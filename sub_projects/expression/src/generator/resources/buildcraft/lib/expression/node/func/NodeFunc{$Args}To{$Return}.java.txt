/*
 * Copyright (c) 2017 SpaceToad and the BuildCraft team
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
 * distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/
 */

package buildcraft.lib.expression.node.func;

import java.util.Objects;

import buildcraft.lib.expression.NodeInliningHelper;
import buildcraft.lib.expression.api.IDependantNode;
import buildcraft.lib.expression.api.IDependancyVisitor;
import buildcraft.lib.expression.api.IExpressionNode.INodeBoolean;
import buildcraft.lib.expression.api.IExpressionNode.INodeDouble;
import buildcraft.lib.expression.api.IExpressionNode.INodeLong;
import buildcraft.lib.expression.api.IExpressionNode.INodeObject;
import buildcraft.lib.expression.api.INodeFunc.INodeFunc{$ReturnOnly};
import buildcraft.lib.expression.api.INodeStack;
import buildcraft.lib.expression.api.InvalidExpressionException;
import buildcraft.lib.expression.api.NodeTypes;
import buildcraft.lib.expression.node.func.{$StringFunction};
import buildcraft.lib.expression.node.func.NodeFuncBase;
import buildcraft.lib.expression.node.func.NodeFuncBase.IFunctionNode;
import buildcraft.lib.expression.node.value.NodeConstant{$ReturnOnly};

{$AutoGenWarning}
public class NodeFunc{$Args}To{$ReturnOnly}{$TypeArgs} extends NodeFuncBase implements INodeFunc{$Return} {

    public final IFunc{$Args}To{$ReturnOnly}{$TypeArgs} function;
    private final {$StringFunction} stringFunction;
{$ObjectClassFields}
    public NodeFunc{$Args}To{$ReturnOnly}(String name, {$ObjectClassArgs}IFunc{$Args}To{$ReturnOnly}{$TypeArgs} function) {
        this({$ObjectClassArgsPass}function, ({$StringFunctionArgs}) -> "[ {$ToStringName} ] " + name + "(" + {$StringFunctionArgsPlus} ")");
    }

    public NodeFunc{$Args}To{$ReturnOnly}({$ObjectClassArgs}IFunc{$Args}To{$ReturnOnly}{$TypeArgs} function, {$StringFunction} stringFunction) {
{$ObjectClassFieldSet}
        this.function = function;
        this.stringFunction = stringFunction;
    }
{$ObjectGetType}
    @Override
    public String toString() {
        return stringFunction.apply({$ToStringArgs});
    }

    @Override
    public NodeFunc{$Args}To{$ReturnOnly}{$TypeArgs} setNeverInline() {
        super.setNeverInline();
        return this;
    }

    @Override
    public INode{$Return} getNode(INodeStack stack) throws InvalidExpressionException {
{$NodeStackPops}
        return create({$StringFunctionArgs});
    }

    /** Shortcut to create a new {@link Func{$Args}To{$ReturnOnly}} without needing to create
     *  and populate an {@link INodeStack} to pass to {@link #getNode(INodeStack)}. */
    public Func{$Args}To{$ReturnOnly} create({$ObjectNodeArgs}) {
        return new Func{$Args}To{$ReturnOnly}({$StringFunctionArgsL}); 
    }

    public class Func{$Args}To{$ReturnOnly} implements INode{$Return}, IDependantNode, IFunctionNode {
{$ObjectNodeFields}
        public Func{$Args}To{$ReturnOnly}({$ObjectNodeArgs}) {
{$ObjectNodeFieldSet}
        }
{$ObjectGetType2}
        @Override
        public {$return} evaluate() {
            return function.apply({$NodeEvaluationsL});
        }

        @Override
        public INode{$Return} inline() {
            if (!canInline) {
                // Note that we can still inline the arguments, just not *this* function
                return NodeInliningHelper.tryInline(this, {$StringFunctionArgsL},
                    ({$StringFunctionArgs}) -> new Func{$Args}To{$ReturnOnly}({$StringFunctionArgs}),
                    ({$StringFunctionArgs}) -> new Func{$Args}To{$ReturnOnly}({$StringFunctionArgs})
                );
            }
            return NodeInliningHelper.tryInline(this, {$StringFunctionArgsL},
                ({$StringFunctionArgs}) -> new Func{$Args}To{$ReturnOnly}({$StringFunctionArgs}),
                ({$StringFunctionArgs}) -> {$NodeConstantGetter}function.apply({$NodeEvaluations}))
            );
        }

        @Override
        public void visitDependants(IDependancyVisitor visitor) {
            if (!canInline) {
                if (function instanceof IDependantNode) {
                    visitor.dependOn((IDependantNode) function);
                } else {
                    visitor.dependOnExplictly(this);
                }
            }
            visitor.dependOn({$StringFunctionArgsL});
        }

        @Override
        public String toString() {
            return stringFunction.apply({$NodeToStringArgs});
        }

        @Override
        public NodeFuncBase getFunction() {
            return NodeFunc{$Args}To{$ReturnOnly}.this;
        }

        @Override
        public int hashCode() {
            return Objects.hash({$StringFunctionArgsL});
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) return true;
            if (obj == null || getClass() != obj.getClass()) {
                return false;
            }
            Func{$Args}To{$ReturnOnly} other = (Func{$Args}To{$ReturnOnly}) obj;
{$ReturnEquals}
        }
    }

    @FunctionalInterface
    public interface IFunc{$Args}To{$ReturnOnly}{$TypeArgs} {
        {$return} apply({$FunctionArgs});
    }
}
