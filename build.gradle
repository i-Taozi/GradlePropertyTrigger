def BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: "0"
def MAVEN_REPO = System.getenv("MAVEN_REPO") ?: ""
def MAVEN_USERNAME = System.getenv("MAVEN_USERNAME") ?: ""
def MAVEN_PASSWORD = System.getenv("MAVEN_PASSWORD") ?: ""

import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'

ext.env = System.getenv()

version = "1.1." + BUILD_NUMBER
group = "com.dynious"
archivesBaseName = "RefinedRelocation"
sourceCompatibility = 1.7
targetCompatibility = 1.7

minecraft {
    version = "1.7.10-10.13.4.1492-1.7.10"
    
    replaceIn "lib/Reference.java"
    replace "@VERSION@", project.version
}

idea {
    module {
        inheritOutputDirs = true
    }
}

repositories {
    mavenCentral()
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name "waila"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        url "http://blay09.net:8081/artifactory/repo/"
    }
    ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    }
    ivy {
        name "IronChest"
        artifactPattern "http://files.minecraftforge.net/maven/cpw/mods/[module]/[revision]/[module]-[revision]-[classifier].[ext]"
    }
    ivy {
        name 'CoFHLib'
        artifactPattern "http://addons-origin.cursecdn.com/files/2246/918/[module]-[revision]-[classifier].[ext]"
    }
}

dependencies {
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
    compile "codechicken:ForgeMultipart:1.7.10-1.2.0.345:dev"
    compile "net.industrial-craft:industrialcraft-2:2.2.781-experimental:api"
    compile "mcp.mobius.waila:Waila:1.5.10_1.7.10:dev"
    compile ("appeng:appliedenergistics2:rv2-stable-10:dev") {
        transitive = false
    }
    compile "com.pahimar.ee3:EquivalentExchange3:1.7.10-0.3.0.509:dev"
    compile "mcp.mobius.jabba:Jabba:1.2.1a_1.7.10:dev"
    compile "hosted-api:InventoryTweaks:1.59-dev"
    compile name: 'buildcraft', version: '7.1.8', classifier: "dev", ext: 'jar'
    compile name: 'ironchest', version: '1.7.10-6.0.62.742', classifier: "deobf", ext: 'jar'
    compile name: 'CoFHLib', version: '[1.7.10]1.0.3-175', classifier: "dev", ext: 'jar'
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        filter(ReplaceTokens, tokens: [VERSION: project.version, MCVERSION: project.minecraft.version])
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    from sourceSets.api.output
    appendix "mc" + minecraft.version

    manifest {
        attributes("FMLAT": "RefinedRelocation_at.cfg")
    }
}

task jarDev(type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    classifier = 'dev'
    appendix "mc" + minecraft.version

	manifest {
        attributes("FMLAT": "RefinedRelocation_at.cfg")
    }
}

task jarAPI(type: Jar) {
    from sourceSets.api.output

    classifier "api"
    appendix "mc" + minecraft.version
}

artifacts {
    archives jarAPI
    archives jarDev
}

uploadArchives {
    dependsOn 'reobf'
    repositories {
        mavenDeployer {
            repository(url: MAVEN_REPO) {
                authentication(userName: MAVEN_USERNAME, password: MAVEN_PASSWORD)
            }

            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
            }

            pom.withXml {
                asNode().dependencies.dependency.findAll {
                    it.scope.text() == "compile"
                }.each {
                    if(it.optional)
                        it.optional.value = 'true'
                    else
                        it.appendNode('optional', 'true');
                }
            }
        }
    }
}