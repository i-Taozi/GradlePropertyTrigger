/**
 * To create the Eclipse project and classpath files:
 *  ./gradlew cleanEclipse eclipse
 *
 * To build the PojoBuilder:
 *  ./gradlew build
 *  
 * To collect performance numbers:
 *  ./gradlew jmh
 *
 * To publish a new release of PojoBuilder to Sonatype OSS Maven Repo:
 *  ./gradlew clean uploadArchives
 */

buildscript {
  repositories {
    mavenCentral()
    gradlePluginPortal()
  }
  dependencies {
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.8'
  }
}

if (!project.hasProperty('ossrhUsername') || !project.hasProperty('ossrhPassword')) {
  println 'OSS repository hosting username or password not set'
  ext.ossrhUsername = ''
  ext.ossrhPassword = ''
}

ext {
  isReleaseVersion = !version.endsWith('SNAPSHOT')
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'me.champeau.gradle.jmh'

group = 'net.karneim'
version = '4.2.3'
sourceCompatibility = 1.7
eclipse.jdt.sourceCompatibility = 1.7

repositories.mavenCentral()

configurations {
  jmhAnnotationProcessor.extendsFrom implementation
}

dependencies {
  implementation 'com.squareup:javawriter:2.5.0'
  testImplementation 'com.google.guava:guava:15.0'
  testImplementation 'junit:junit:4.11'
  testImplementation 'org.assertj:assertj-core:1.6.1'

  jmhAnnotationProcessor sourceSets.main.output
}

jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
  }
}

eclipse {
  classpath {
    downloadSources = true
    downloadJavadoc = false
  }
}

jmh {
  // https://github.com/melix/jmh-gradle-plugin
  includeTests = true // Allows to include test sources into generate JMH jar
  // profilers = ['perfnorm', 'gc']
  // include = ['.*OptionalBuilder.*']
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

sourceSets {
  test {
    java {
      srcDir 'src/testdata/java'
      srcDir 'src/test/java'
    }
  }
  jmh {
    sourceCompatibility = 1.8
  }
}

task dependenciesJar(type: Jar, dependsOn:['compileJava']) {
  archiveClassifier = "jar-with-dependencies"
  from files(sourceSets.main.output.classesDirs)
  from files(sourceSets.main.output.resourcesDir)
  from {configurations.compile.collect {zipTree(it)}}
  into('META-INF/license') { from 'license' }
}

task annotationsJar(type: Jar, dependsOn:['compileJava']) {
  archiveClassifier = "annotations"
  from files(sourceSets.main.output.classesDirs)
  includeEmptyDirs false
  include '**/GeneratePojoBuilder.class'
  include '**/FactoryProperties.class'
  include '**/Visibility.class'
  include '**/GwtIncompatible.class'
  from files(sourceSets.main.output.resourcesDir)
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

tasks.withType(Jar) {
  into('META-INF') { from 'COPYING' }
  manifest {
    attributes(
        'Implementation-Title': project.name,
        'Implementation-Version': project.version
        )
  }
}

artifacts {
  archives dependenciesJar, annotationsJar, javadocJar, sourcesJar
}

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask('uploadArchives') }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      beforeDeployment {
        if ( project.ossrhUsername == "" || project.ossrhPassword == "")
          throw new GradleException('Missing ossrhUsername or ossrhPassword')
      }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'PojoBuilder'
        packaging 'jar'
        description 'The PojoBuilder Generator is a Java 6 compliant annotation processor that generates a fluent builder class for POJOs (Plain Old Java Object)'
        url 'http://github.com/mkarneim/pojobuilder'

        scm {
          url 'git@github.com:mkarneim/pojobuilder.git'
          connection 'scm:git:git@github.com:mkarneim/pojobuilder.git'
          developerConnection 'scm:git:git@github.com:mkarneim/pojobuilder.git'
          tag 'HEAD'
        }
        licenses {
          license {
            name 'PUBLIC DOMAIN'
            url 'http://github.com/mkarneim/pojobuilder/blob/master/COPYING'
            distribution 'repo'
            comments 'Do-whatever-you-want license'
          }
        }
        developers {
          developer {
            id 'mkarneim'
            name 'Michael Karneim'
            timezone 'GMT+1'
          }
        }
      }
    }
  }
}
