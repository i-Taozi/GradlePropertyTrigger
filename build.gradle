allprojects {
    apply plugin: 'java'

    group = 'org.testinfected.petstore'
    version = '0.2-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

ext {
    libs = [
            mysql             : 'mysql:mysql-connector-java:5.1.21',
            flyway            : 'com.googlecode.flyway:flyway-core:2.0',
            cli               : 'com.vtence.cli:cli:1.1',
            molecule          : 'com.vtence.molecule:molecule:0.10',
            molecule_test     : 'com.vtence.molecule:molecule:0.10:tests',
            tape              : 'com.vtence.tape:tape:0.2',
            jmustache         : 'com.samskivert:jmustache:1.11',
            simple            : ['org.simpleframework:simple-common:6.0.1',
                                 'org.simpleframework:simple-transport:6.0.1',
                                 'org.simpleframework:simple-http:6.0.1'],

            hamcrest          : 'org.hamcrest:java-hamcrest:2.0.0.0',
            hamcrest_dom      : 'com.vtence.hamcrest:hamcrest-dom:2.0.0',
            junit             : 'junit:junit:4.12@jar',
            jmock             : ['org.jmock:jmock:2.6.0@jar',
                                 'org.jmock:jmock-junit4:2.6.0@jar',
                                 'org.jmock:jmock-legacy:2.6.0@jar',
                                 'cglib:cglib-nodep:2.1_3',
                                 'org.objenesis:objenesis:1.0'],
            juniversal_chardet: 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3',
            nekohtml          : 'net.sourceforge.nekohtml:nekohtml:1.9.20',
            selenium_api      : 'org.seleniumhq.selenium:selenium-api:2.53.0',
            selenium_firefox  : 'org.seleniumhq.selenium:selenium-firefox-driver:2.53.0',
            mario             : 'com.vtence.mario:mario:0.1',
            selenium_phantom  : 'com.codeborne:phantomjsdriver:1.3.0',
            nolog             : ['org.slf4j:slf4j-api:1.5.6',
                                 'org.slf4j:jcl-over-slf4j:1.5.6',
                                 'org.slf4j:slf4j-nop:1.5.6']
    ]
}

subprojects {
    apply plugin: 'jacoco'

    dependencies {
        testCompile libs.junit
        testCompile libs.hamcrest
        testCompile libs.jmock
        testCompile libs.nolog
    }
}

configurations {
    jacoco
}

dependencies {
    jacoco 'org.jacoco:org.jacoco.ant:0.7.0.201403182114'
}

task coverage(type: JacocoReport) {
    jacocoClasspath = configurations.jacoco
    // Add execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("*/build/jacoco/*.exec")
    // Add source classes from all subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    // Make the aggregate report go in a top-level directory somewhere
    reports {
        xml {
            enabled true
            destination "build/reports/jacoco/test/jacocoTestReport.xml"
        }

        html {
            enabled true
            destination "build/reports/jacoco/test/html"
        }
    }
}

apply plugin: 'application'
mainClassName = 'org.testinfected.petstore.Launcher'

if (!project.hasProperty('env')) {
    ext.env = 'development'
}

run {
    classpath = project(':server').sourceSets.main.runtimeClasspath
    args '-e', env
    if (project.hasProperty('host')) {
        args '-h', host
    }
    if (project.hasProperty('port')) {
        args '-p', port
    }
    if (project.hasProperty('timeout')) {
        args '--timeout', timeout
    }
    if (project.hasProperty('quiet')) {
        args '-q'
    }
    args project(':webapp').file('src/main/content')
}

task 'db-init'(type: JavaExec) {
    main = 'org.testinfected.petstore.Migrations'
    classpath = project(':server').sourceSets.main.runtimeClasspath
    args = ['-e', env, 'init']
}

task 'db-clean'(type: JavaExec) {
    main = 'org.testinfected.petstore.Migrations'
    classpath = project(':server').sourceSets.main.runtimeClasspath
    args = ['-e', env, 'clean']
}

task 'db-migrate'(type: JavaExec) {
    main = 'org.testinfected.petstore.Migrations'
    classpath = project(':server').sourceSets.main.runtimeClasspath
    args = ['-e', env, 'migrate']
}

task 'db-drop'(type: JavaExec) {
    main = 'org.testinfected.petstore.Migrations'
    classpath = project(':server').sourceSets.main.runtimeClasspath
    args = ['-e', env, 'drop']
}

task 'db-reset'(type: JavaExec) {
    main = 'org.testinfected.petstore.Migrations'
    classpath = project(':server').sourceSets.main.runtimeClasspath
    args = ['-e', env, 'reset']
}