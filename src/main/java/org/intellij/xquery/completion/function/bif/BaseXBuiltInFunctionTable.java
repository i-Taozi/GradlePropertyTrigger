/*
 * Copyright 2013-2015 Grzegorz Ligas <ligasgr@gmail.com> and other contributors
 * (see the CONTRIBUTORS file).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.intellij.xquery.completion.function.bif;

import org.intellij.xquery.completion.function.AbstractBuiltInFunctionTable;
import org.intellij.xquery.reference.namespace.PredeclaredNamespaces;
import org.intellij.xquery.reference.namespace.basex.BaseXPredeclaredNamespaces;

public class BaseXBuiltInFunctionTable extends AbstractBuiltInFunctionTable {

    private PredeclaredNamespaces predeclaredNamespaces = new BaseXPredeclaredNamespaces();

    {
        fnMap.putValue(ns("admin"), bif("admin", "delete-logs", 1, "$date as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("admin"), bif("admin", "logs", 0, "", "element(file)*"));
        fnMap.putValue(ns("admin"), bif("admin", "logs", 1, "$date as xs:string", "element(entry)*"));
        fnMap.putValue(ns("admin"), bif("admin", "logs", 2, "$date as xs:string, $merge as xs:boolean", "element(entry)*"));
        fnMap.putValue(ns("admin"), bif("admin", "sessions", 0, "", "element(session)*"));
        fnMap.putValue(ns("admin"), bif("admin", "write-log", 1, "$text as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("admin"), bif("admin", "write-log", 2, "$text as xs:string, $type as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("archive"), bif("archive", "create", 2, "$entries as item(), $contents as item()*", "xs:base64Binary"));
        fnMap.putValue(ns("archive"), bif("archive", "create", 4, "$entries as item(), $contents as item()*, $options as map(xs:string, xs:string)", "xs:base64Binary"));
        fnMap.putValue(ns("archive"), bif("archive", "create-from", 1, "$path as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("archive"), bif("archive", "create-from", 3, "$path as xs:string, $options as map(xs:string, xs:string)", "xs:base64Binary"));
        fnMap.putValue(ns("archive"), bif("archive", "create-from", 4, "$path as xs:string, $options as map(xs:string, xs:string), $entries as item()*", "xs:base64Binary"));
        fnMap.putValue(ns("archive"), bif("archive", "delete", 2, "$archive as xs:base64Binary, $entries as item()*", "xs:base64Binary"));
        fnMap.putValue(ns("archive"), bif("archive", "entries", 1, "$archive as xs:base64Binary", "element(archive:entry)*"));
        fnMap.putValue(ns("archive"), bif("archive", "extract-binary", 1, "$archive as xs:base64Binary", "xs:string*"));
        fnMap.putValue(ns("archive"), bif("archive", "extract-binary", 2, "$archive as xs:base64Binary, $entries as item()*", "xs:base64Binary*"));
        fnMap.putValue(ns("archive"), bif("archive", "extract-text", 1, "$archive as xs:base64Binary", "xs:string*"));
        fnMap.putValue(ns("archive"), bif("archive", "extract-text", 2, "$archive as xs:base64Binary, $entries as item()*", "xs:string*"));
        fnMap.putValue(ns("archive"), bif("archive", "extract-text", 3, "$archive as xs:base64Binary, $entries as item()*, $encoding as xs:string", "xs:string*"));
        fnMap.putValue(ns("archive"), bif("archive", "extract-to", 2, "$path as xs:string, $archive as xs:base64Binary", "empty-sequence()"));
        fnMap.putValue(ns("archive"), bif("archive", "extract-to", 3, "$path as xs:string, $archive as xs:base64Binary, $entries as item()*", "empty-sequence()"));
        fnMap.putValue(ns("archive"), bif("archive", "options", 1, "$archive as xs:base64Binary", "element(archive:options)"));
        fnMap.putValue(ns("archive"), bif("archive", "update", 3, "$archive as xs:base64Binary, $entries as item()*, $contents as item()*", "xs:base64Binary"));
        fnMap.putValue(ns("array"), bif("array", "append", 2, "$array as array(*), $member as item()*", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "filter", 2, "$array as array(*), $function as function(item()*) as xs:boolean", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "flatten", 1, "$items as item()*", "item()*"));
        fnMap.putValue(ns("array"), bif("array", "fold-left", 4, "$array as array(*), $zero as item()*, $function as function(item()*, item()*) as item()*", "item()*"));
        fnMap.putValue(ns("array"), bif("array", "fold-right", 4, "$array as array(*), $zero as item()*, $function as function(item()*, item()*) as item()*", "item()*"));
        fnMap.putValue(ns("array"), bif("array", "for-each", 2, "$array as array(*), $function as function(item()*) as item()*", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "for-each-pair", 3, "$array1 as array(*), $array2 as array(*), $function as function(item()*) as item()*", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "get", 2, "$array as array(*), $position as xs:integer", "item()*"));
        fnMap.putValue(ns("array"), bif("array", "head", 1, "$array as array(*)", "item()*"));
        fnMap.putValue(ns("array"), bif("array", "insert-before", 3, "$array as array(*), $position as xs:integer, $member as item()*", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "join", 1, "$arrays as array(*)*", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "remove", 2, "$array as array(*), $position as xs:integer", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "reverse", 1, "$array as array(*)", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "serialize", 1, "$input as array(*)", "xs:string"));
        fnMap.putValue(ns("array"), bif("array", "size", 1, "$input as array(*)", "xs:integer"));
        fnMap.putValue(ns("array"), bif("array", "sort", 1, "$array as array(*)", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "sort", 2, "$array as array(*), $key as function(item()*) as xs:anyAtomicType*", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "subarray", 2, "$array as array(*), $position as xs:integer", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "subarray", 3, "$array as array(*), $position as xs:integer, $length as xs:integer", "array(*)"));
        fnMap.putValue(ns("array"), bif("array", "tail", 1, "$array as array(*)", "array(*)"));
        fnMap.putValue(ns("bin"), bif("bin", "and", 2, "$a as xs:base64Binary?, $b as xs:base64Binary?", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "bin", 1, "$in as xs:string?", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "decode-string", 2, "$in as xs:base64Binary?, $encoding as xs:string", "xs:string?"));
        fnMap.putValue(ns("bin"), bif("bin", "decode-string", 3, "$in as xs:base64Binary?, $encoding as xs:string, $offset as xs:integer", "xs:string?"));
        fnMap.putValue(ns("bin"), bif("bin", "decode-string", 4, "$in as xs:base64Binary?, $encoding as xs:string, $offset as xs:integer, $size as xs:integer ", "xs:string?"));
        fnMap.putValue(ns("bin"), bif("bin", "encode-string", 2, "$in as xs:string?, $encoding as xs:string", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "find", 3, "$in as xs:base64Binary?, $offset as xs:integer, $search as xs:base64Binary", "xs:integer?"));
        fnMap.putValue(ns("bin"), bif("bin", "from-octets", 1, "$in as xs:integer*", "xs:base64Binary"));
        fnMap.putValue(ns("bin"), bif("bin", "hex", 1, "$in as xs:string?", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "insert-before", 3, "$in as xs:base64Binary?, $offset as xs:integer, $extra as xs:base64Binary?", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "join", 1, "$in as xs:base64Binary*", "xs:base64Binary"));
        fnMap.putValue(ns("bin"), bif("bin", "length", 1, "$in as xs:base64Binary", "xs:integer"));
        fnMap.putValue(ns("bin"), bif("bin", "not", 1, "$in as xs:base64Binary?", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "octal", 1, "$in as xs:string?", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "or", 2, "$a as xs:base64Binary?, $b as xs:base64Binary?", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "pack-double", 1, "$in as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("bin"), bif("bin", "pack-double", 2, "$in as xs:double, $octet-order as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("bin"), bif("bin", "pack-float", 1, "$in as xs:float", "xs:base64Binary"));
        fnMap.putValue(ns("bin"), bif("bin", "pack-float", 2, "$in as xs:float, $octet-order as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("bin"), bif("bin", "pack-integer", 2, "$in as xs:integer, $size as xs:integer", "xs:base64Binary"));
        fnMap.putValue(ns("bin"), bif("bin", "pack-integer", 3, "$in as xs:integer, $size as xs:integer, $octet-order as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("bin"), bif("bin", "pad-left", 2, "$in as xs:base64Binary?, $size as xs:integer", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "pad-left", 3, "$in as xs:base64Binary?, $size as xs:integer, $octet as xs:integer", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "pad-right", 2, "$in as xs:base64Binary?, $size as xs:integer", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "pad-right", 3, "$in as xs:base64Binary?, $size as xs:integer, $octet as xs:integer", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "part", 2, "$in as xs:base64Binary?, $offset as xs:integer", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "part", 3, "$in as xs:base64Binary?, $offset as xs:integer, $size as xs:integer", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "shift", 2, "$in as xs:base64Binary?, $by as xs:integer", "xs:base64Binary?"));
        fnMap.putValue(ns("bin"), bif("bin", "to-octets", 1, "$in as xs:base64Binary", "xs:integer*"));
        fnMap.putValue(ns("bin"), bif("bin", "unpack-double", 2, "$in as xs:base64Binary, $offset as xs:integer", "xs:double"));
        fnMap.putValue(ns("bin"), bif("bin", "unpack-double", 3, "$in as xs:base64Binary, $offset as xs:integer, $octet-order as xs:string", "xs:double"));
        fnMap.putValue(ns("bin"), bif("bin", "unpack-float", 2, "$in as xs:base64Binary, $offset as xs:integer", "xs:float"));
        fnMap.putValue(ns("bin"), bif("bin", "unpack-float", 3, "$in as xs:base64Binary, $offset as xs:integer, $octet-order as xs:string", "xs:float"));
        fnMap.putValue(ns("bin"), bif("bin", "unpack-integer", 3, "$in as xs:base64Binary, $offset as xs:integer, $size as xs:integer", "xs:integer"));
        fnMap.putValue(ns("bin"), bif("bin", "unpack-integer", 4, "$in as xs:base64Binary, $offset as xs:integer, $size as xs:integer, $octet-order as xs:string ", "xs:integer"));
        fnMap.putValue(ns("bin"), bif("bin", "unpack-unsigned-integer", 3, "$in as xs:base64Binary, $offset as xs:integer, $size as xs:integer", "xs:integer"));
        fnMap.putValue(ns("bin"), bif("bin", "unpack-unsigned-integer", 4, "$in as xs:base64Binary, $offset as xs:integer, $size as xs:integer, $octet-order as xs:string ", "xs:integer"));
        fnMap.putValue(ns("bin"), bif("bin", "xor", 2, "$a as xs:base64Binary?, $b as xs:base64Binary?", "xs:base64Binary?"));
        fnMap.putValue(ns("client"), bif("client", "close", 1, "$id as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("client"), bif("client", "connect", 4, "$host as xs:string, $port as xs:integer, $user as xs:string, $password as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("client"), bif("client", "execute", 2, "$id as xs:anyURI, $command as xs:string", "xs:string"));
        fnMap.putValue(ns("client"), bif("client", "info", 1, "$id as xs:anyURI", "xs:string"));
        fnMap.putValue(ns("client"), bif("client", "query", 2, "$id as xs:anyURI, $query as xs:string", "item()*"));
        fnMap.putValue(ns("client"), bif("client", "query", 3, "$id as xs:anyURI, $query as xs:string, $bindings as map(*)", "item()*"));
        fnMap.putValue(ns("convert"), bif("convert", "binary-to-bytes", 1, "$bin as xs:anyAtomicType", "xs:byte*"));
        fnMap.putValue(ns("convert"), bif("convert", "binary-to-string", 1, "$bytes as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("convert"), bif("convert", "binary-to-string", 2, "$bytes as xs:anyAtomicType, $encoding as xs:string", "xs:string"));
        fnMap.putValue(ns("convert"), bif("convert", "bytes-to-base64", 1, "$input as xs:byte*", "xs:base64Binary"));
        fnMap.putValue(ns("convert"), bif("convert", "bytes-to-hex", 1, "$input as xs:byte*", "xs:hexBinary"));
        fnMap.putValue(ns("convert"), bif("convert", "dateTime-to-integer", 1, "$dateTime as xs:dateTime", "xs:integer"));
        fnMap.putValue(ns("convert"), bif("convert", "dayTime-to-integer", 1, "$dayTime as xs:dayTimeDuration", "xs:integer"));
        fnMap.putValue(ns("convert"), bif("convert", "integer-from-base", 2, "$str as xs:string, $base as xs:integer", "xs:integer"));
        fnMap.putValue(ns("convert"), bif("convert", "integer-to-base", 2, "$num as xs:integer, $base as xs:integer", "xs:string"));
        fnMap.putValue(ns("convert"), bif("convert", "integer-to-dateTime", 1, "$ms as xs:integer", "xs:dateTime"));
        fnMap.putValue(ns("convert"), bif("convert", "integer-to-dayTime", 1, "$ms as xs:integer", "xs:dayTimeDuration"));
        fnMap.putValue(ns("convert"), bif("convert", "string-to-base64", 1, "$input as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("convert"), bif("convert", "string-to-base64", 2, "$input as xs:string, $encoding as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("convert"), bif("convert", "string-to-hex", 1, "$input as xs:string", "xs:hexBinary"));
        fnMap.putValue(ns("convert"), bif("convert", "string-to-hex", 2, "$input as xs:string, $encoding as xs:string", "xs:hexBinary"));
        fnMap.putValue(ns("crypto"), bif("crypto", "decrypt", 4, "$input as xs:string, $type as xs:string, $key as xs:string, $algorithm as xs:string", "xs:string"));
        fnMap.putValue(ns("crypto"), bif("crypto", "encrypt", 4, "$input as xs:string, $encryption as xs:string, $key as xs:string, $algorithm as xs:string", "xs:string"));
        fnMap.putValue(ns("crypto"), bif("crypto", "generate-signature", 6, "$input as node(), $canonicalization as xs:string, $digest as xs:string, $signature as xs:string, $prefix as xs:string, $type as xs:string ", "node()"));
        fnMap.putValue(ns("crypto"), bif("crypto", "generate-signature", 7, "$input as node(), $canonicalization as xs:string, $digest as xs:string, $signature as xs:string, $prefix as xs:string, $type as xs:string, $ext as item() ", "node()"));
        fnMap.putValue(ns("crypto"), bif("crypto", "generate-signature", 8, "$input as node(), $canonicalization as xs:string, $digest as xs:string, $signature as xs:string, $prefix as xs:string, $type as xs:string, $xpath as xs:string, $certificate as node() ", "node()"));
        fnMap.putValue(ns("crypto"), bif("crypto", "hmac", 3, "$message as xs:string, $key as xs:string, $algorithm as xs:string", "xs:string"));
        fnMap.putValue(ns("crypto"), bif("crypto", "hmac", 4, "$message as xs:string, $key as xs:string, $algorithm as xs:string, $encoding as xs:string", "xs:string"));
        fnMap.putValue(ns("crypto"), bif("crypto", "validate-signature", 1, "$input-doc as node()", "xs:boolean"));
        fnMap.putValue(ns("csv"), bif("csv", "parse", 1, "$input as xs:string", "document-node(element(csv))"));
        fnMap.putValue(ns("csv"), bif("csv", "parse", 3, "$input as xs:string, $options as map(xs:string, item())", "item()"));
        fnMap.putValue(ns("csv"), bif("csv", "serialize", 1, "$input as node()", "xs:string"));
        fnMap.putValue(ns("csv"), bif("csv", "serialize", 3, "$input as node(), $options as map(xs:string, item())", "xs:string"));
        fnMap.putValue(ns("db"), bif("db", "add", 2, "$db as xs:string, $input as item()", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "add", 3, "$db as xs:string, $input as item(), $path as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "add", 5, "$db as xs:string, $input as item(), $path as xs:string, $options as map(xs:string, xs:string) ", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "alter", 2, "$db as xs:string, $newname as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "attribute", 2, "$db as xs:string, $string as item()", "attribute()*"));
        fnMap.putValue(ns("db"), bif("db", "attribute", 3, "$db as xs:string, $string as item(), $attname as xs:string", "attribute()*"));
        fnMap.putValue(ns("db"), bif("db", "attribute-range", 3, "$db as xs:string, $min as xs:string, $max as xs:string", "attribute()*"));
        fnMap.putValue(ns("db"), bif("db", "attribute-range", 4, "$db as xs:string, $min as xs:string, $max as xs:string, $attname as xs:string", "attribute()*"));
        fnMap.putValue(ns("db"), bif("db", "backups", 0, "", "element(backup)*"));
        fnMap.putValue(ns("db"), bif("db", "backups", 1, "$db as xs:string", "element(backup)*"));
        fnMap.putValue(ns("db"), bif("db", "content-type", 2, "$db as xs:string, $path as xs:string", "xs:string"));
        fnMap.putValue(ns("db"), bif("db", "copy", 2, "$db as xs:string, $newname as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "create", 1, "$db as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "create", 2, "$db as xs:string, $inputs as item()*", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "create", 3, "$db as xs:string, $inputs as item()*, $paths as xs:string*", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "create", 5, "$db as xs:string, $inputs as item()*, $paths as xs:string*, $options as map(xs:string, xs:string) ", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "create-backup", 1, "$db as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "delete", 2, "$db as xs:string, $path as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "drop", 1, "$db as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "drop-backup", 1, "$name as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "exists", 1, "$db as xs:string", "xs:boolean"));
        fnMap.putValue(ns("db"), bif("db", "exists", 2, "$db as xs:string, $path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("db"), bif("db", "export", 2, "$db as xs:string, $path as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "export", 3, "$db as xs:string, $path as xs:string, $params as item()", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "flush", 1, "$db as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "info", 1, "$db as xs:string", "element(database)"));
        fnMap.putValue(ns("db"), bif("db", "is-raw", 2, "$db as xs:string, $path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("db"), bif("db", "is-xml", 2, "$db as xs:string, $path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("db"), bif("db", "list", 0, "", "xs:string*"));
        fnMap.putValue(ns("db"), bif("db", "list", 1, "$db as xs:string", "xs:string*"));
        fnMap.putValue(ns("db"), bif("db", "list", 2, "$db as xs:string, $path as xs:string", "xs:string*"));
        fnMap.putValue(ns("db"), bif("db", "list-details", 0, "", "element(database)*"));
        fnMap.putValue(ns("db"), bif("db", "list-details", 1, "$db as xs:string", "element(resource)*"));
        fnMap.putValue(ns("db"), bif("db", "list-details", 2, "$db as xs:string, $path as xs:string", "element(resource)*"));
        fnMap.putValue(ns("db"), bif("db", "name", 1, "$node as node()", "xs:string"));
        fnMap.putValue(ns("db"), bif("db", "node-id", 1, "$nodes as node()*", "xs:integer*"));
        fnMap.putValue(ns("db"), bif("db", "node-pre", 1, "$nodes as node()*", "xs:integer*"));
        fnMap.putValue(ns("db"), bif("db", "open", 1, "$db as xs:string", "document-node()*"));
        fnMap.putValue(ns("db"), bif("db", "open", 2, "$db as xs:string, $path as xs:string", "document-node()*"));
        fnMap.putValue(ns("db"), bif("db", "open-id", 2, "$db as xs:string, $id as xs:integer", "node()"));
        fnMap.putValue(ns("db"), bif("db", "open-pre", 2, "$db as xs:string, $pre as xs:integer", "node()"));
        fnMap.putValue(ns("db"), bif("db", "optimize", 1, "$db as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "optimize", 2, "$db as xs:string, $all as xs:boolean", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "optimize", 4, "$db as xs:string, $all as xs:boolean, $options as map(xs:string, xs:string)", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "output", 1, "$result as item()*", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "output-cache", 0, "", "item()*"));
        fnMap.putValue(ns("db"), bif("db", "path", 1, "$node as node()", "xs:string"));
        fnMap.putValue(ns("db"), bif("db", "rename", 3, "$db as xs:string, $path as xs:string, $newpath as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "replace", 3, "$db as xs:string, $path as xs:string, $input as item()", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "replace", 5, "$db as xs:string, $path as xs:string, $input as item(), $options as map(xs:string, xs:string) ", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "restore", 1, "$name as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "retrieve", 2, "$db as xs:string, $path as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("db"), bif("db", "store", 3, "$db as xs:string, $path as xs:string, $input as item()", "empty-sequence()"));
        fnMap.putValue(ns("db"), bif("db", "system", 0, "", "element(system)"));
        fnMap.putValue(ns("db"), bif("db", "text", 2, "$db as xs:string, $string as item()", "text()*"));
        fnMap.putValue(ns("db"), bif("db", "text-range", 3, "$db as xs:string, $min as xs:string, $max as xs:string", "text()*"));
        fnMap.putValue(ns("fetch"), bif("fetch", "binary", 1, "$uri as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("fetch"), bif("fetch", "content-type", 1, "$uri as xs:string", "xs:string"));
        fnMap.putValue(ns("fetch"), bif("fetch", "text", 1, "$uri as xs:string", "xs:string"));
        fnMap.putValue(ns("fetch"), bif("fetch", "text", 2, "$uri as xs:string, $encoding as xs:string", "xs:string"));
        fnMap.putValue(ns("fetch"), bif("fetch", "xml", 1, "$uri as xs:string", "document-node()"));
        fnMap.putValue(ns("fetch"), bif("fetch", "xml", 3, "$uri as xs:string, $options as map(xs:string, item())", "document-node()"));
        fnMap.putValue(ns("file"), bif("file", "append", 2, "$path as xs:string, $items as item()*", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append", 3, "$path as xs:string, $items as item()*, $params as item()", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append-binary", 2, "$path as xs:string, $value as xs:anyAtomicType", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append-text", 2, "$path as xs:string, $value as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append-text", 3, "$path as xs:string, $value as xs:string, $encoding as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append-text-lines", 2, "$path as xs:string, $values as xs:string*", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append-text-lines", 3, "$path as xs:string, $values as xs:string*, $encoding as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "base-dir", 0, "", "xs:string?"));
        fnMap.putValue(ns("file"), bif("file", "children", 1, "$dir as xs:string", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "copy", 2, "$source as xs:string, $target as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "create-dir", 1, "$dir as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "create-temp-dir", 2, "$prefix as xs:string, $suffix as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "create-temp-dir", 3, "$prefix as xs:string, $suffix as xs:string, $dir as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "create-temp-file", 2, "$prefix as xs:string, $suffix as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "create-temp-file", 3, "$prefix as xs:string, $suffix as xs:string, $dir as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "current-dir", 0, "", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "delete", 1, "$path as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "delete", 2, "$path as xs:string, $recursive as xs:boolean", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "dir-separator", 0, "", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "exists", 1, "$path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "is-absolute", 1, "$path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "is-dir", 1, "$path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "is-file", 1, "$path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "last-modified", 1, "$path as xs:string", "xs:dateTime"));
        fnMap.putValue(ns("file"), bif("file", "line-separator", 0, "", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "list", 1, "$dir as xs:string", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "list", 2, "$dir as xs:string, $recursive as xs:boolean", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "list", 3, "$dir as xs:string, $recursive as xs:boolean, $pattern as xs:string", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "move", 2, "$source as xs:string, $target as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "name", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "parent", 1, "$path as xs:string", "xs:string?"));
        fnMap.putValue(ns("file"), bif("file", "path-separator", 0, "", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "path-to-native", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "path-to-uri", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "read-binary", 1, "$path as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("file"), bif("file", "read-binary", 2, "$path as xs:string, $offset as xs:integer", "xs:base64Binary"));
        fnMap.putValue(ns("file"), bif("file", "read-binary", 3, "$path as xs:string, $offset as xs:integer, $length as xs:integer", "xs:base64Binary"));
        fnMap.putValue(ns("file"), bif("file", "read-text", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "read-text", 2, "$path as xs:string, $encoding as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "read-text-lines", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "read-text-lines", 2, "$path as xs:string, $encoding as xs:string", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "resolve-path", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "resolve-path", 2, "$path as xs:string, $base as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "size", 1, "$file as xs:string", "xs:integer"));
        fnMap.putValue(ns("file"), bif("file", "temp-dir", 0, "", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "write", 2, "$path as xs:string, $items as item()*", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write", 3, "$path as xs:string, $items as item()*, $params as item()", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-binary", 2, "$path as xs:string, $value as xs:anyAtomicType", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-binary", 3, "$path as xs:string, $value as xs:anyAtomicType, $offset as xs:integer", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-text", 2, "$path as xs:string, $value as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-text", 3, "$path as xs:string, $value as xs:string, $encoding as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-text-lines", 2, "$path as xs:string, $values as xs:string*", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-text-lines", 3, "$path as xs:string, $values as xs:string*, $encoding as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("fn"), bif("fn", "QName", 2, "$paramURI as xs:string?, $paramQName as xs:string", "xs:QName"));
        fnMap.putValue(ns("fn"), bif("fn", "abs", 1, "$arg as numeric?", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-date-to-timezone", 1, "$arg as xs:date?", "xs:date?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-date-to-timezone", 2, "$arg as xs:date?, $timezone as xs:dayTimeDuration?", "xs:date?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-dateTime-to-timezone", 1, "$arg as xs:dateTime?", "xs:dateTime?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-dateTime-to-timezone", 2, "$arg as xs:dateTime?, $timezone as xs:dayTimeDuration?", "xs:dateTime?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-time-to-timezone", 1, "$arg as xs:time?", "xs:time?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-time-to-timezone", 2, "$arg as xs:time?, $timezone as xs:dayTimeDuration?", "xs:time?"));
        fnMap.putValue(ns("fn"), bif("fn", "analyze-string", 2, "$input as xs:string?, $pattern as xs:string", "element(fn:analyze-string-result)"));
        fnMap.putValue(ns("fn"), bif("fn", "analyze-string", 3, "$input as xs:string?, $pattern as xs:string, $flags as xs:string", "element(fn:analyze-string-result)"));
        fnMap.putValue(ns("fn"), bif("fn", "available-environment-variables", 0, "", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "avg", 1, "$arg as xs:anyAtomicType*", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "base-uri", 0, "", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "base-uri", 1, "$arg as node()?", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "boolean", 1, "$arg as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "ceiling", 1, "$arg as numeric?", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "codepoint-equal", 2, "$comparand1 as xs:string?, $comparand2 as xs:string?", "xs:boolean?"));
        fnMap.putValue(ns("fn"), bif("fn", "codepoints-to-string", 1, "$arg as xs:integer*", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "collection", 0, "", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "collection", 1, "$arg as xs:string?", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "compare", 2, "$comparand1 as xs:string?, $comparand2 as xs:string?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "compare", 3, "$comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 2, "$arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 3, "$arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $arg3 as xs:anyAtomicType?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 4, "$arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $arg3 as xs:anyAtomicType?, $arg4 as xs:anyAtomicType?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 5, "$arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $arg3 as xs:anyAtomicType?, $arg4 as xs:anyAtomicType?, $arg5 as xs:anyAtomicType?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 6, "$arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $arg3 as xs:anyAtomicType?, $arg4 as xs:anyAtomicType?, $arg5 as xs:anyAtomicType?, $arg6 as xs:anyAtomicType?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 7, "$arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $arg3 as xs:anyAtomicType?, $arg4 as xs:anyAtomicType?, $arg5 as xs:anyAtomicType?, $arg6 as xs:anyAtomicType?, $arg7 as xs:anyAtomicType?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 8, "$arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $arg3 as xs:anyAtomicType?, $arg4 as xs:anyAtomicType?, $arg5 as xs:anyAtomicType?, $arg6 as xs:anyAtomicType?, $arg7 as xs:anyAtomicType?, $arg8 as xs:anyAtomicType?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 9, "$arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $arg3 as xs:anyAtomicType?, $arg4 as xs:anyAtomicType?, $arg5 as xs:anyAtomicType?, $arg6 as xs:anyAtomicType?, $arg7 as xs:anyAtomicType?, $arg8 as xs:anyAtomicType?, $arg9 as xs:anyAtomicType?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 10, "$arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $arg3 as xs:anyAtomicType?, $arg4 as xs:anyAtomicType?, $arg5 as xs:anyAtomicType?, $arg6 as xs:anyAtomicType?, $arg7 as xs:anyAtomicType?, $arg8 as xs:anyAtomicType?, $arg9 as xs:anyAtomicType?, $arg10 as xs:anyAtomicType?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "contains", 2, "$arg1 as xs:string?, $arg2 as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "contains", 3, "$arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "count", 1, "$arg as item()*", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "current-date", 0, "", "xs:date"));
        fnMap.putValue(ns("fn"), bif("fn", "current-dateTime", 0, "", "xs:dateTimeStamp"));
        fnMap.putValue(ns("fn"), bif("fn", "current-time", 0, "", "xs:time"));
        fnMap.putValue(ns("fn"), bif("fn", "data", 0, "", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "data", 1, "$arg as item()*", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "dateTime", 2, "$arg1 as xs:date?, $arg2 as xs:time?", "xs:dateTime?"));
        fnMap.putValue(ns("fn"), bif("fn", "day-from-date", 1, "$arg as xs:date?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "day-from-dateTime", 1, "$arg as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "days-from-duration", 1, "$arg as xs:duration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "deep-equal", 2, "$parameter1 as item()*, $parameter2 as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "deep-equal", 3, "$parameter1 as item()*, $parameter2 as item()*, $collation as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "default-collation", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "distinct-values", 1, "$arg as xs:anyAtomicType*", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "distinct-values", 2, "$arg as xs:anyAtomicType*, $collation as xs:string", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "doc", 1, "$uri as xs:string?", "document-node()?"));
        fnMap.putValue(ns("fn"), bif("fn", "doc-available", 1, "$uri as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "document-uri", 0, "", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "document-uri", 1, "$arg as node()?", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "element-with-id", 1, "$arg as xs:string*", "element()*"));
        fnMap.putValue(ns("fn"), bif("fn", "element-with-id", 2, "$arg as xs:string*, $node as node()", "element()*"));
        fnMap.putValue(ns("fn"), bif("fn", "empty", 1, "$arg as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "encode-for-uri", 1, "$uri-part as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "ends-with", 2, "$arg1 as xs:string?, $arg2 as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "ends-with", 3, "$arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "environment-variable", 1, "$name as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 0, "", "none"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 1, "$code as xs:QName", "none"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 2, "$code as xs:QName?, $description as xs:string", "none"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 3, "$code as xs:QName?, $description as xs:string, $error-object as item()*", "none"));
        fnMap.putValue(ns("fn"), bif("fn", "escape-html-uri", 1, "$uri as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "exactly-one", 1, "$arg as item()*", "item()"));
        fnMap.putValue(ns("fn"), bif("fn", "exists", 1, "$arg as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "false", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "filter", 2, "$seq as item()*, $f as function(item()) as xs:boolean", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "floor", 1, "$arg as numeric?", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "fold-left", 3, "$seq as item()*, $zero as item()*, $f as function(item()*, item()) as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "fold-right", 3, "$seq as item()*, $zero as item()*, $f as function(item()*, item()) as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "for-each", 2, "$seq as item()*, $f as function(item()) as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "for-each-pair", 3, "$seq1 as item()*, $seq2 as item()*, $f as function(item(), item()) as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "format-date", 2, "$value as xs:date?, $picture as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-date", 5, "$value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-dateTime", 2, "$value as xs:dateTime?, $picture as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-dateTime", 5, "$value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-integer", 2, "$value as xs:integer?, $picture as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-integer", 3, "$value as xs:integer?, $picture as xs:string, $lang as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-number", 2, "$value as numeric?, $picture as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-number", 3, "$value as numeric?, $picture as xs:string, $decimal-format-name as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-time", 2, "$value as xs:time?, $picture as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-time", 5, "$value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "function-arity", 1, "$func as function(*)", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "function-lookup", 2, "$name as xs:QName, $arity as xs:integer", "function(*)?"));
        fnMap.putValue(ns("fn"), bif("fn", "function-name", 1, "$func as function(*)", "xs:QName?"));
        fnMap.putValue(ns("fn"), bif("fn", "generate-id", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "generate-id", 1, "$arg as node()?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "has-children", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "has-children", 1, "$node as node()?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "head", 1, "$arg as item()*", "item()?"));
        fnMap.putValue(ns("fn"), bif("fn", "hours-from-dateTime", 1, "$arg as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "hours-from-duration", 1, "$arg as xs:duration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "hours-from-time", 1, "$arg as xs:time?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "id", 1, "$arg as xs:string*", "element()*"));
        fnMap.putValue(ns("fn"), bif("fn", "id", 2, "$arg as xs:string*, $node as node()", "element()*"));
        fnMap.putValue(ns("fn"), bif("fn", "idref", 1, "$arg as xs:string*", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "idref", 2, "$arg as xs:string*, $node as node()", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "implicit-timezone", 0, "", "xs:dayTimeDuration"));
        fnMap.putValue(ns("fn"), bif("fn", "in-scope-prefixes", 1, "$element as element()", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "index-of", 2, "$seq as xs:anyAtomicType*, $search as xs:anyAtomicType", "xs:integer*"));
        fnMap.putValue(ns("fn"), bif("fn", "index-of", 3, "$seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string", "xs:integer*"));
        fnMap.putValue(ns("fn"), bif("fn", "innermost", 1, "$nodes as node()*", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "insert-before", 3, "$target as item()*, $position as xs:integer, $inserts as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "iri-to-uri", 1, "$iri as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "lang", 1, "$testlang as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "lang", 2, "$testlang as xs:string?, $node as node()", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "last", 0, "", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "local-name", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "local-name", 1, "$arg as node()?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "local-name-from-QName", 1, "$arg as xs:QName?", "xs:NCName?"));
        fnMap.putValue(ns("fn"), bif("fn", "lower-case", 1, "$arg as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "matches", 2, "$input as xs:string?, $pattern as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "matches", 3, "$input as xs:string?, $pattern as xs:string, $flags as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "max", 1, "$arg as xs:anyAtomicType*", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "max", 2, "$arg as xs:anyAtomicType*, $collation as xs:string", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "min", 1, "$arg as xs:anyAtomicType*", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "min", 2, "$arg as xs:anyAtomicType*, $collation as xs:string", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "minutes-from-dateTime", 1, "$arg as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "minutes-from-duration", 1, "$arg as xs:duration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "minutes-from-time", 1, "$arg as xs:time?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "month-from-date", 1, "$arg as xs:date?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "month-from-dateTime", 1, "$arg as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "months-from-duration", 1, "$arg as xs:duration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "name", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "name", 1, "$arg as node()?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri", 0, "", "xs:anyURI"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri", 1, "$arg as node()?", "xs:anyURI"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri-for-prefix", 2, "$prefix as xs:string?, $element as element()", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri-from-QName", 1, "$arg as xs:QName?", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "nilled", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "nilled", 1, "$arg as node()?", "xs:boolean?"));
        fnMap.putValue(ns("fn"), bif("fn", "node-name", 0, "", "xs:QName?"));
        fnMap.putValue(ns("fn"), bif("fn", "node-name", 1, "$arg as node()?", "xs:QName?"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-space", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-space", 1, "$arg as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-unicode", 1, "$arg as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-unicode", 2, "$arg as xs:string?, $normalizationForm as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "not", 1, "$arg as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "number", 0, "", "xs:double"));
        fnMap.putValue(ns("fn"), bif("fn", "number", 1, "$arg as xs:anyAtomicType?", "xs:double"));
        fnMap.putValue(ns("fn"), bif("fn", "one-or-more", 1, "$arg as item()*", "item()+"));
        fnMap.putValue(ns("fn"), bif("fn", "outermost", 1, "$nodes as node()*", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "parse-xml", 1, "$arg as xs:string?", "document-node(element(*))?"));
        fnMap.putValue(ns("fn"), bif("fn", "parse-xml-fragment", 1, "$arg as xs:string?", "document-node()?"));
        fnMap.putValue(ns("fn"), bif("fn", "path", 0, "", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "path", 1, "$arg as node()?", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "position", 0, "", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "prefix-from-QName", 1, "$arg as xs:QName?", "xs:NCName?"));
        fnMap.putValue(ns("fn"), bif("fn", "remove", 2, "$target as item()*, $position as xs:integer", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "replace", 3, "$input as xs:string?, $pattern as xs:string, $replacement as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "replace", 4, "$input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "resolve-QName", 2, "$qname as xs:string?, $element as element()", "xs:QName?"));
        fnMap.putValue(ns("fn"), bif("fn", "resolve-uri", 1, "$relative as xs:string?", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "resolve-uri", 2, "$relative as xs:string?, $base as xs:string", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "reverse", 1, "$arg as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "root", 0, "", "node()"));
        fnMap.putValue(ns("fn"), bif("fn", "root", 1, "$arg as node()?", "node()?"));
        fnMap.putValue(ns("fn"), bif("fn", "round", 1, "$arg as numeric?", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "round", 2, "$arg as numeric?, $precision as xs:integer", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "round-half-to-even", 1, "$arg as numeric?", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "round-half-to-even", 2, "$arg as numeric?, $precision as xs:integer", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "seconds-from-dateTime", 1, "$arg as xs:dateTime?", "xs:decimal?"));
        fnMap.putValue(ns("fn"), bif("fn", "seconds-from-duration", 1, "$arg as xs:duration?", "xs:decimal?"));
        fnMap.putValue(ns("fn"), bif("fn", "seconds-from-time", 1, "$arg as xs:time?", "xs:decimal?"));
        fnMap.putValue(ns("fn"), bif("fn", "serialize", 1, "$arg as item()*", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "serialize", 2, "$arg as item()*, $params as element(output:serialization-parameters)?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "starts-with", 2, "$arg1 as xs:string?, $arg2 as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "starts-with", 3, "$arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "static-base-uri", 0, "", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "string", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string", 1, "$arg as item()?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string-join", 1, "$arg1 as xs:string*", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string-join", 2, "$arg1 as xs:string*, $arg2 as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string-length", 0, "", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "string-length", 1, "$arg as xs:string?", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "string-to-codepoints", 1, "$arg as xs:string?", "xs:integer*"));
        fnMap.putValue(ns("fn"), bif("fn", "subsequence", 2, "$sourceSeq as item()*, $startingLoc as xs:double", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "subsequence", 3, "$sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "substring", 2, "$sourceString as xs:string?, $start as xs:double", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring", 3, "$sourceString as xs:string?, $start as xs:double, $length as xs:double", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-after", 2, "$arg1 as xs:string?, $arg2 as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-after", 3, "$arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-before", 2, "$arg1 as xs:string?, $arg2 as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-before", 3, "$arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "sum", 1, "$arg as xs:anyAtomicType*", "xs:anyAtomicType"));
        fnMap.putValue(ns("fn"), bif("fn", "sum", 2, "$arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "tail", 1, "$arg as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "timezone-from-date", 1, "$arg as xs:date?", "xs:dayTimeDuration?"));
        fnMap.putValue(ns("fn"), bif("fn", "timezone-from-dateTime", 1, "$arg as xs:dateTime?", "xs:dayTimeDuration?"));
        fnMap.putValue(ns("fn"), bif("fn", "timezone-from-time", 1, "$arg as xs:time?", "xs:dayTimeDuration?"));
        fnMap.putValue(ns("fn"), bif("fn", "tokenize", 2, "$input as xs:string?, $pattern as xs:string", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "tokenize", 3, "$input as xs:string?, $pattern as xs:string, $flags as xs:string", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "trace", 2, "$value as item()*, $label as xs:string", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "translate", 3, "$arg as xs:string?, $mapString as xs:string, $transString as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "true", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "unordered", 1, "$sourceSeq as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text", 1, "$href as xs:string?", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text", 2, "$href as xs:string?, $encoding as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-available", 1, "$href as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-available", 2, "$href as xs:string?, $encoding as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-lines", 1, "$href as xs:string?", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-lines", 2, "$href as xs:string?, $encoding as xs:string", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "upper-case", 1, "$arg as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "uri-collection", 0, "", "xs:anyURI*"));
        fnMap.putValue(ns("fn"), bif("fn", "uri-collection", 1, "$arg as xs:string?", "xs:anyURI*"));
        fnMap.putValue(ns("fn"), bif("fn", "year-from-date", 1, "$arg as xs:date?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "year-from-dateTime", 1, "$arg as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "years-from-duration", 1, "$arg as xs:duration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "zero-or-one", 1, "$arg as item()*", "item()?"));
        fnMap.putValue(ns("ft"), bif("ft", "contains", 2, "$input as item()*, $terms as item()*", "xs:boolean"));
        fnMap.putValue(ns("ft"), bif("ft", "contains", 4, "$input as item()*, $terms as item()*, $options as map(xs:xstring, item())", "xs:boolean"));
        fnMap.putValue(ns("ft"), bif("ft", "count", 1, "$nodes as node()*", "xs:integer"));
        fnMap.putValue(ns("ft"), bif("ft", "extract", 1, "$nodes as node()*", "node()*"));
        fnMap.putValue(ns("ft"), bif("ft", "extract", 2, "$nodes as node()*, $name as xs:string", "node()*"));
        fnMap.putValue(ns("ft"), bif("ft", "extract", 3, "$nodes as node()*, $name as xs:string, $length as xs:integer", "node()*"));
        fnMap.putValue(ns("ft"), bif("ft", "mark", 1, "$nodes as node()*", "node()*"));
        fnMap.putValue(ns("ft"), bif("ft", "mark", 2, "$nodes as node()*, $name as xs:string", "node()*"));
        fnMap.putValue(ns("ft"), bif("ft", "normalize", 1, "$input as xs:string", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "normalize", 3, "$input as xs:string, $options as map(xs:xstring, item())", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "score", 1, "$item as item()*", "xs:double*"));
        fnMap.putValue(ns("ft"), bif("ft", "search", 2, "$db as xs:string, $terms as item()*", "text()*"));
        fnMap.putValue(ns("ft"), bif("ft", "search", 4, "$db as xs:string, $terms as item()*, $options as map(xs:string, item())", "text()*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenize", 1, "$input as xs:string", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenize", 3, "$input as xs:string, $options as map(xs:xstring, item())", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokens", 1, "$db as xs:string", "element(value)*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokens", 2, "$db as xs:string, $prefix as xs:string", "element(value)*"));
        fnMap.putValue(ns("geo"), bif("geo", "area", 1, "$geometry as element(*)", "xs:double"));
        fnMap.putValue(ns("geo"), bif("geo", "as-binary", 1, "$geometry as element(*)", "xs:base64Binary"));
        fnMap.putValue(ns("geo"), bif("geo", "as-text", 1, "$geometry as element(*)", "xs:string"));
        fnMap.putValue(ns("geo"), bif("geo", "boundary", 1, "$geometry as element(*)", "element(*)?"));
        fnMap.putValue(ns("geo"), bif("geo", "buffer", 2, "$geometry as element(*), $distance as xs:double", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "centroid", 1, "$geometry as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "contains", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "convex-hull", 1, "$geometry as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "crosses", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "difference", 2, "$geometry1 as element(*), $geometry2 as element(*)", "element(*)?"));
        fnMap.putValue(ns("geo"), bif("geo", "dimension", 1, "$geometry as element(*)", "xs:integer"));
        fnMap.putValue(ns("geo"), bif("geo", "disjoint", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "distance", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:double"));
        fnMap.putValue(ns("geo"), bif("geo", "end-point", 1, "$line as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "envelope", 1, "$geometry as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "equals", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "exterior-ring", 1, "$polygon as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "geometry-n", 2, "$geometry as element(*), $geoNumber as xs:integer", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "geometry-type", 1, "$geometry as element(*)", "xs:QName"));
        fnMap.putValue(ns("geo"), bif("geo", "interior-ring-n", 1, "$polygon as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "intersection", 2, "$geometry1 as element(*), $geometry2 as element(*)", "element(*)?"));
        fnMap.putValue(ns("geo"), bif("geo", "intersects", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-closed", 1, "$line as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-ring", 1, "$line as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-simple", 1, "$geometry as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "length", 1, "$geometry as element(*)", "xs:double"));
        fnMap.putValue(ns("geo"), bif("geo", "num-geometries", 1, "$geometry as element(*)", "xs:integer"));
        fnMap.putValue(ns("geo"), bif("geo", "num-interior-ring", 1, "$polygon as element(*)", "xs:integer"));
        fnMap.putValue(ns("geo"), bif("geo", "num-points", 1, "$geometry as element(*)", "xs:integer"));
        fnMap.putValue(ns("geo"), bif("geo", "overlaps", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "point-n", 1, "$line as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "point-on-surface", 1, "$geometry as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "relate", 3, "$geometry1 as element(*), $geometry2 as element(*), $intersectionMatrix as xs:string", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "srid", 1, "$geometry as element(*)", "xs:integer"));
        fnMap.putValue(ns("geo"), bif("geo", "start-point", 1, "$line as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "sym-difference", 2, "$geometry1 as element(*), $geometry2 as element(*)", "element(*)?"));
        fnMap.putValue(ns("geo"), bif("geo", "touches", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "union", 2, "$geometry1 as element(*), $geometry2 as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "within", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "x", 1, "$point as element(*)", "xs:double"));
        fnMap.putValue(ns("geo"), bif("geo", "y", 1, "$point as element(*)", "xs:double?"));
        fnMap.putValue(ns("geo"), bif("geo", "z", 1, "$point as element(*)", "xs:double?"));
        fnMap.putValue(ns("hash"), bif("hash", "hash", 2, "$value as xs:anyAtomicType, $algorithm as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hash"), bif("hash", "md5", 1, "$value as xs:anyAtomicType", "xs:base64Binary"));
        fnMap.putValue(ns("hash"), bif("hash", "sha1", 1, "$value as xs:anyAtomicType", "xs:base64Binary"));
        fnMap.putValue(ns("hash"), bif("hash", "sha256", 1, "$value as xs:anyAtomicType", "xs:base64Binary"));
        fnMap.putValue(ns("hof"), bif("hof", "const", 2, "$expr as item()*, $ignored as item()*", "item()*"));
        fnMap.putValue(ns("hof"), bif("hof", "fold-left1", 3, "$seq as item()+, $f as function(item()*, item()) as item()*", "item()*"));
        fnMap.putValue(ns("hof"), bif("hof", "id", 1, "$expr as item()*", "item()*"));
        fnMap.putValue(ns("hof"), bif("hof", "scan-left", 4, "$seq as item()*, $start as item()*, $f as function(item()*, item()) as item()*", "item()*"));
        fnMap.putValue(ns("hof"), bif("hof", "take-while", 2, "$seq as item()*, $pred as function(item()) as xs:boolean", "item()*"));
        fnMap.putValue(ns("hof"), bif("hof", "top-k-by", 3, "$seq as item()*, $sort-key as function(item()) as item(), $k as xs:integer", "item()*"));
        fnMap.putValue(ns("hof"), bif("hof", "top-k-with", 4, "$seq as item()*, $lt as function(item(), item()) as xs:boolean, $k as xs:integer", "item()*"));
        fnMap.putValue(ns("hof"), bif("hof", "until", 3, "$pred as function(item()*) as xs:boolean, $f as function(item()*) as item()*, $start as item()* ", "item()*"));
        fnMap.putValue(ns("html"), bif("html", "parse", 1, "$input as xs:anyAtomicType", "document-node()"));
        fnMap.putValue(ns("html"), bif("html", "parse", 3, "$input as xs:anyAtomicType, $options as map(xs:string, item())", "document-node()"));
        fnMap.putValue(ns("html"), bif("html", "parser", 0, "", "xs:string"));
        fnMap.putValue(ns("http"), bif("http", "send-request", 1, "$request as element(http:request)", "item()+"));
        fnMap.putValue(ns("http"), bif("http", "send-request", 2, "$request as element(http:request)?, $href as xs:string?", "item()+"));
        fnMap.putValue(ns("http"), bif("http", "send-request", 3, "$request as element(http:request)?, $href as xs:string?, $bodies as item()*", "item()+"));
        fnMap.putValue(ns("index"), bif("index", "attribute-names", 1, "$db as xs:string", "element(value)*"));
        fnMap.putValue(ns("index"), bif("index", "attributes", 1, "$db as xs:string", "element(value)*"));
        fnMap.putValue(ns("index"), bif("index", "attributes", 2, "$db as xs:string, $prefix as xs:string", "element(value)*"));
        fnMap.putValue(ns("index"), bif("index", "attributes", 3, "$db as xs:string, $start as xs:string, $ascending as xs:boolean", "element(value)*"));
        fnMap.putValue(ns("index"), bif("index", "element-names", 1, "$db as xs:string", "element(value)*"));
        fnMap.putValue(ns("index"), bif("index", "facets", 1, "$db as xs:string", "xs:string"));
        fnMap.putValue(ns("index"), bif("index", "facets", 2, "$db as xs:string, $type as xs:string", "xs:string"));
        fnMap.putValue(ns("index"), bif("index", "texts", 1, "$db as xs:string", "element(value)*"));
        fnMap.putValue(ns("index"), bif("index", "texts", 2, "$db as xs:string, $prefix as xs:string", "element(value)*"));
        fnMap.putValue(ns("index"), bif("index", "texts", 3, "$db as xs:string, $start as xs:string, $ascending as xs:boolean", "element(value)*"));
        fnMap.putValue(ns("inspect"), bif("inspect", "context", 0, "", "element(context)"));
        fnMap.putValue(ns("inspect"), bif("inspect", "function", 1, "$function as function(*)", "element(function)"));
        fnMap.putValue(ns("inspect"), bif("inspect", "functions", 0, "", "function(*)*"));
        fnMap.putValue(ns("inspect"), bif("inspect", "functions", 1, "$uri as xs:string", "function(*)*"));
        fnMap.putValue(ns("inspect"), bif("inspect", "module", 1, "$input as xs:string", "element(module)"));
        fnMap.putValue(ns("inspect"), bif("inspect", "xqdoc", 1, "$input as xs:string", "element(xqdoc:xqdoc)"));
        fnMap.putValue(ns("json"), bif("json", "parse", 1, "$input as xs:string", "element(json)"));
        fnMap.putValue(ns("json"), bif("json", "parse", 3, "$input as xs:string, $options as map(xs:string, xs:string)", "item()"));
        fnMap.putValue(ns("json"), bif("json", "serialize", 1, "$input as node()", "xs:string"));
        fnMap.putValue(ns("json"), bif("json", "serialize", 3, "$input as node(), $options as map(xs:string, xs:string)", "xs:string"));
        fnMap.putValue(ns("map"), bif("map", "contains", 2, "$input as map(*), $key as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("map"), bif("map", "entry", 2, "$key as xs:anyAtomicType, $value as item()*", "map(*)"));
        fnMap.putValue(ns("map"), bif("map", "for-each", 3, "$input as map(*), $fun as function(xs:anyAtomicType, item()*) as item()*", "item()*"));
        fnMap.putValue(ns("map"), bif("map", "get", 2, "$input as map(*), $key as xs:anyAtomicType", "item()*"));
        fnMap.putValue(ns("map"), bif("map", "keys", 1, "$input as map(*)", "xs:anyAtomicType*"));
        fnMap.putValue(ns("map"), bif("map", "merge", 1, "$input as map(*)*", "map(*)"));
        fnMap.putValue(ns("map"), bif("map", "put", 3, "$input as map(*), $key as xs:anyAtomicType, $value as item()*", "map(*)"));
        fnMap.putValue(ns("map"), bif("map", "remove", 2, "$input as map(*), $key as xs:anyAtomicType", "map(*)"));
        fnMap.putValue(ns("map"), bif("map", "serialize", 1, "$input as map(*)", "xs:string"));
        fnMap.putValue(ns("map"), bif("map", "size", 1, "$input as map(*)", "xs:integer"));
        fnMap.putValue(ns("math"), bif("math", "acos", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "asin", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "atan", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "atan2", 2, "$arg1 as xs:double?, $arg2 as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "cos", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "cosh", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "crc32", 1, "$str as xs:string", "xs:hexBinary"));
        fnMap.putValue(ns("math"), bif("math", "e", 0, "", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "exp", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "log", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "log10", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "pi", 0, "", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "pow", 2, "$arg1 as xs:double?, $arg2 as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "sin", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "sinh", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "sqrt", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "tan", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "tanh", 1, "$arg as xs:double?", "xs:double?"));
        fnMap.putValue(ns("out"), bif("out", "format", 3, "$format as xs:string, $item1 as item(), ...", "xs:string"));
        fnMap.putValue(ns("out"), bif("out", "nl()", 0, "", "xs:string"));
        fnMap.putValue(ns("out"), bif("out", "tab()", 0, "", "xs:string"));
        fnMap.putValue(ns("proc"), bif("proc", "execute", 1, "$cmd as xs:string", "element(result)"));
        fnMap.putValue(ns("proc"), bif("proc", "execute", 2, "$cmd as xs:string, $args as xs:string*", "element(result)"));
        fnMap.putValue(ns("proc"), bif("proc", "execute", 3, "$cmd as xs:string, $args as xs:string*, $encoding as xs:string", "element(result)"));
        fnMap.putValue(ns("proc"), bif("proc", "system", 1, "$cmd as xs:string", "xs:string"));
        fnMap.putValue(ns("proc"), bif("proc", "system", 2, "$cmd as xs:string, $args as xs:string*", "xs:string"));
        fnMap.putValue(ns("proc"), bif("proc", "system", 3, "$cmd as xs:string, $args as xs:string*, $encoding as xs:string", "xs:string"));
        fnMap.putValue(ns("prof"), bif("prof", "current-ms", 0, "", "xs:integer"));
        fnMap.putValue(ns("prof"), bif("prof", "current-ns", 0, "", "xs:integer"));
        fnMap.putValue(ns("prof"), bif("prof", "dump", 1, "$expr as item()", "empty-sequence()"));
        fnMap.putValue(ns("prof"), bif("prof", "dump", 2, "$expr as item(), $label as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("prof"), bif("prof", "human", 1, "$number as xs:integer", "xs:string"));
        fnMap.putValue(ns("prof"), bif("prof", "mem", 1, "$expr as item()", "item()*"));
        fnMap.putValue(ns("prof"), bif("prof", "mem", 2, "$expr as item(), $cache as xs:boolean", "item()*"));
        fnMap.putValue(ns("prof"), bif("prof", "mem", 3, "$expr as item(), $cache as xs:boolean, $label as xs:string", "item()*"));
        fnMap.putValue(ns("prof"), bif("prof", "sleep", 1, "$ms as xs:integer", "empty-sequence()"));
        fnMap.putValue(ns("prof"), bif("prof", "time", 1, "$expr as item()", "item()*"));
        fnMap.putValue(ns("prof"), bif("prof", "time", 2, "$expr as item(), $cache as xs:boolean", "item()*"));
        fnMap.putValue(ns("prof"), bif("prof", "time", 3, "$expr as item(), $cache as xs:boolean, $label as xs:string", "item()*"));
        fnMap.putValue(ns("prof"), bif("prof", "variables", 0, "", "empty-sequence()"));
        fnMap.putValue(ns("prof"), bif("prof", "void", 1, "$value as item()*", "empty-sequence()"));
        fnMap.putValue(ns("random"), bif("random", "double", 0, "", "xs:double"));
        fnMap.putValue(ns("random"), bif("random", "gaussian", 1, "$num as xs:integer", "xs:double*"));
        fnMap.putValue(ns("random"), bif("random", "integer", 0, "", "xs:integer"));
        fnMap.putValue(ns("random"), bif("random", "integer", 1, "$max as xs:integer", "xs:integer"));
        fnMap.putValue(ns("random"), bif("random", "seeded-double", 2, "$seed as xs:integer, $num as xs:integer", "xs:double*"));
        fnMap.putValue(ns("random"), bif("random", "seeded-integer", 2, "$seed as xs:integer, $num as xs:integer", "xs:integer*"));
        fnMap.putValue(ns("random"), bif("random", "seeded-integer", 3, "$seed as xs:integer, $num as xs:integer, $max as xs:integer", "xs:integer*"));
        fnMap.putValue(ns("random"), bif("random", "uuid", 0, "", "xs:string"));
        fnMap.putValue(ns("repo"), bif("repo", "delete", 1, "$pkg as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("repo"), bif("repo", "install", 1, "$path as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("repo"), bif("repo", "list", 0, "", "element(package)*"));
        fnMap.putValue(ns("request"), bif("request", "address", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "attribute", 1, "$name as xs:string", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "context-path", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "cookie", 1, "$name as xs:string", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "cookie", 2, "$name as xs:string, $default as xs:string", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "cookie-names", 0, "", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "header", 1, "$name as xs:string", "xs:string?"));
        fnMap.putValue(ns("request"), bif("request", "header", 2, "$name as xs:string, $default as xs:string", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "header-names", 0, "", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "hostname", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "method", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "parameter", 1, "$name as xs:string", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "parameter", 2, "$name as xs:string, $default as xs:string", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "parameter-names", 0, "", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "path", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "port", 0, "", "xs:integer"));
        fnMap.putValue(ns("request"), bif("request", "query", 0, "", "xs:string?"));
        fnMap.putValue(ns("request"), bif("request", "remote-address", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "remote-hostname", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "remote-port", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "scheme", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "uri", 0, "", "xs:anyURI"));
        fnMap.putValue(ns("rest"), bif("rest", "base-uri", 0, "", "xs:anyURI"));
        fnMap.putValue(ns("rest"), bif("rest", "uri", 0, "", "xs:anyURI"));
        fnMap.putValue(ns("rest"), bif("rest", "wadl", 0, "", "element(wadl:application)"));
        fnMap.putValue(ns("session"), bif("session", "accessed", 0, "", "xs:dateTime"));
        fnMap.putValue(ns("session"), bif("session", "close", 0, "", "empty-sequence()"));
        fnMap.putValue(ns("session"), bif("session", "created", 0, "", "xs:dateTime"));
        fnMap.putValue(ns("session"), bif("session", "delete", 1, "$key as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("session"), bif("session", "get", 1, "$key as xs:string", "item()*"));
        fnMap.putValue(ns("session"), bif("session", "get", 2, "$key as xs:string, $default as item()*", "item()*"));
        fnMap.putValue(ns("session"), bif("session", "id", 0, "", "xs:string"));
        fnMap.putValue(ns("session"), bif("session", "names", 0, "", "xs:string*"));
        fnMap.putValue(ns("session"), bif("session", "set", 2, "$key as xs:string, $value as item()*", "empty-sequence()"));
        fnMap.putValue(ns("sessions"), bif("sessions", "accessed", 1, "$id as xs:string", "xs:dateTime"));
        fnMap.putValue(ns("sessions"), bif("sessions", "close", 1, "$id as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("sessions"), bif("sessions", "created", 1, "$id as xs:string", "xs:dateTime"));
        fnMap.putValue(ns("sessions"), bif("sessions", "delete", 2, "$id as xs:string, $key as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("sessions"), bif("sessions", "get", 2, "$id as xs:string, $key as xs:string", "xs:string?"));
        fnMap.putValue(ns("sessions"), bif("sessions", "get", 3, "$id as xs:string, $key as xs:string, $default as xs:string", "xs:string"));
        fnMap.putValue(ns("sessions"), bif("sessions", "ids", 0, "", "xs:string"));
        fnMap.putValue(ns("sessions"), bif("sessions", "names", 1, "$id as xs:string", "xs:string*"));
        fnMap.putValue(ns("sessions"), bif("sessions", "set", 3, "$id as xs:string, $key as xs:string, $value as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("sql"), bif("sql", "close", 1, "$connection as xs:integer", "empty-sequence()"));
        fnMap.putValue(ns("sql"), bif("sql", "commit", 1, "$connection as xs:integer", "empty-sequence()"));
        fnMap.putValue(ns("sql"), bif("sql", "connect", 1, "$url as xs:string", "xs:integer"));
        fnMap.putValue(ns("sql"), bif("sql", "connect", 3, "$url as xs:string, $user as xs:string, $password as xs:string", "xs:integer"));
        fnMap.putValue(ns("sql"), bif("sql", "connect", 5, "$url as xs:string, $user as xs:string, $password as xs:string, $options as map(xs:string, item()) ", "xs:integer"));
        fnMap.putValue(ns("sql"), bif("sql", "execute", 2, "$connection as xs:integer, $query as xs:string", "element()*"));
        fnMap.putValue(ns("sql"), bif("sql", "execute-prepared", 2, "$id as xs:integer, $params as element(sql:parameters)", "element()*"));
        fnMap.putValue(ns("sql"), bif("sql", "init", 1, "$class as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("sql"), bif("sql", "prepare", 2, "$connection as xs:integer, $statement as xs:string", "xs:integer"));
        fnMap.putValue(ns("sql"), bif("sql", "rollback", 1, "$connection as xs:integer", "empty-sequence()"));
        fnMap.putValue(ns("stream"), bif("stream", "is-streamable", 1, "$item as item()", "item()"));
        fnMap.putValue(ns("stream"), bif("stream", "materialize", 1, "$value as item()*", "item()*"));
        fnMap.putValue(ns("unit"), bif("unit", "assert", 1, "$test as item()*", "empty-sequence()"));
        fnMap.putValue(ns("unit"), bif("unit", "assert", 2, "$test as item()*, $info as item()", "empty-sequence()"));
        fnMap.putValue(ns("unit"), bif("unit", "assert-equals", 2, "$returned as item()*, $expected as item()*", "empty-sequence()"));
        fnMap.putValue(ns("unit"), bif("unit", "assert-equals", 3, "$returned as item()*, $expected as item()*, $info as item()", "empty-sequence()"));
        fnMap.putValue(ns("unit"), bif("unit", "fail", 0, "", "empty-sequence()"));
        fnMap.putValue(ns("unit"), bif("unit", "fail", 1, "$info as item()", "empty-sequence()"));
        fnMap.putValue(ns("user"), bif("user", "alter", 2, "$name as xs:string, $newname as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("user"), bif("user", "create", 2, "$name as xs:string, $password as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("user"), bif("user", "create", 3, "$name as xs:string, $password as xs:string, $permission as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("user"), bif("user", "current", 0, "", "xs:string"));
        fnMap.putValue(ns("user"), bif("user", "drop", 1, "$name as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("user"), bif("user", "drop", 2, "$name as xs:string, $pattern as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("user"), bif("user", "exists", 1, "$name as xs:string", "xs:boolean"));
        fnMap.putValue(ns("user"), bif("user", "grant", 2, "$name as xs:string, $permission as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("user"), bif("user", "grant", 3, "$name as xs:string, $permission as xs:string, $pattern as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("user"), bif("user", "list", 0, "", "xs:string*"));
        fnMap.putValue(ns("user"), bif("user", "list-details", 0, "", "element(user)*"));
        fnMap.putValue(ns("user"), bif("user", "list-details", 1, "$name as xs:string", "element(user)*"));
        fnMap.putValue(ns("user"), bif("user", "password", 2, "$name as xs:string, $password as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("validate"), bif("validate", "dtd", 1, "$input as item()", "empty-sequence()"));
        fnMap.putValue(ns("validate"), bif("validate", "dtd", 2, "$input as item(), $dtd as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("validate"), bif("validate", "dtd-info", 1, "$input as item()", "xs:string*"));
        fnMap.putValue(ns("validate"), bif("validate", "dtd-info", 2, "$input as item(), $dtd as xs:string", "xs:string*"));
        fnMap.putValue(ns("validate"), bif("validate", "rng", 2, "$input as item(), $schema as item()", "empty-sequence()"));
        fnMap.putValue(ns("validate"), bif("validate", "rng", 3, "$input as item(), $schema as item(), $compact as xs:boolean", "empty-sequence()"));
        fnMap.putValue(ns("validate"), bif("validate", "rng-info", 2, "$input as item(), $schema as item()", "xs:string*"));
        fnMap.putValue(ns("validate"), bif("validate", "rng-info", 3, "$input as item(), $schema as item(), $compact as xs:boolean", "xs:string*"));
        fnMap.putValue(ns("validate"), bif("validate", "xsd", 1, "$input as item()", "empty-sequence()"));
        fnMap.putValue(ns("validate"), bif("validate", "xsd", 2, "$input as item(), $schema as item()", "empty-sequence()"));
        fnMap.putValue(ns("validate"), bif("validate", "xsd-info", 1, "$input as item()", "xs:string*"));
        fnMap.putValue(ns("validate"), bif("validate", "xsd-info", 2, "$input as item(), $schema as item()", "xs:string*"));
        fnMap.putValue(ns("web"), bif("web", "content-type", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("web"), bif("web", "create-url", 3, "$url as xs:string, $parameters as map(item(), item()*)", "xs:string"));
        fnMap.putValue(ns("web"), bif("web", "decode-url", 1, "$string as xs:string", "xs:string"));
        fnMap.putValue(ns("web"), bif("web", "encode-url", 1, "$string as xs:string", "xs:string"));
        fnMap.putValue(ns("web"), bif("web", "redirect", 1, "$location as xs:string", "element(rest:response)"));
        fnMap.putValue(ns("web"), bif("web", "redirect", 3, "$location as xs:string, $parameters as map(item(), item()*)", "element(rest:response)"));
        fnMap.putValue(ns("web"), bif("web", "response-header", 0, "", "element(rest:response)"));
        fnMap.putValue(ns("web"), bif("web", "response-header", 1, "$headers as map(*)", "element(rest:response)"));
        fnMap.putValue(ns("web"), bif("web", "response-header", 3, "$headers as map(*), $output as map(xs:string, xs:string)", "element(rest:response)"));
        fnMap.putValue(ns("xquery"), bif("xquery", "eval", 1, "$query as xs:string", "item()*"));
        fnMap.putValue(ns("xquery"), bif("xquery", "eval", 2, "$query as xs:string, $bindings as map(*)", "item()*"));
        fnMap.putValue(ns("xquery"), bif("xquery", "eval", 4, "$query as xs:string, $bindings as map(*), $options as map(xs:string, xs:string)", "item()"));
        fnMap.putValue(ns("xquery"), bif("xquery", "invoke", 1, "$uri as xs:string", "item()*"));
        fnMap.putValue(ns("xquery"), bif("xquery", "invoke", 2, "$uri as xs:string, $bindings as map(*)", "item()*"));
        fnMap.putValue(ns("xquery"), bif("xquery", "invoke", 4, "$uri as xs:string, $bindings as map(*), $options as map(xs:string, xs:string)", "item()*"));
        fnMap.putValue(ns("xquery"), bif("xquery", "parse", 1, "$query as xs:string", "item()*"));
        fnMap.putValue(ns("xquery"), bif("xquery", "parse", 3, "$query as xs:string, $options as map(xs:string, xs:string)", "item()"));
        fnMap.putValue(ns("xquery"), bif("xquery", "type", 1, "$expr as item()*", "item()*"));
        fnMap.putValue(ns("xquery"), bif("xquery", "update", 1, "$query as xs:string", "item()*"));
        fnMap.putValue(ns("xquery"), bif("xquery", "update", 2, "$query as xs:string, $bindings as map(*)", "item()*"));
        fnMap.putValue(ns("xquery"), bif("xquery", "update", 4, "$query as xs:string, $bindings as map(*), $options as map(xs:string, xs:string)", "item()"));
        fnMap.putValue(ns("xs"), bif("xs", "untyped", 1, "$arg", "xs:untyped"));
        fnMap.putValue(ns("xs"), bif("xs", "untypedAtomic", 1, "$arg", "xs:untypedAtomic"));
        fnMap.putValue(ns("xs"), bif("xs", "dayTimeDuration", 1, "$arg", "xs:dayTimeDuration"));
        fnMap.putValue(ns("xs"), bif("xs", "yearMonthDuration", 1, "$arg", "xs:yearMonthDuration"));
        fnMap.putValue(ns("xs"), bif("xs", "anyURI", 1, "$arg", "xs:anyURI"));
        fnMap.putValue(ns("xs"), bif("xs", "base64Binary", 1, "$arg", "xs:base64Binary"));
        fnMap.putValue(ns("xs"), bif("xs", "boolean", 1, "$arg", "xs:boolean"));
        fnMap.putValue(ns("xs"), bif("xs", "date", 1, "$arg", "xs:date"));
        fnMap.putValue(ns("xs"), bif("xs", "int", 1, "$arg", "xs:int"));
        fnMap.putValue(ns("xs"), bif("xs", "integer", 1, "$arg", "xs:integer"));
        fnMap.putValue(ns("xs"), bif("xs", "short", 1, "$arg", "xs:short"));
        fnMap.putValue(ns("xs"), bif("xs", "long", 1, "$arg", "xs:long"));
        fnMap.putValue(ns("xs"), bif("xs", "dateTime", 1, "$arg", "xs:dateTime"));
        fnMap.putValue(ns("xs"), bif("xs", "dateTimeStamp", 1, "$arg", "xs:dateTimeStamp"));
        fnMap.putValue(ns("xs"), bif("xs", "decimal", 1, "$arg", "xs:decimal"));
        fnMap.putValue(ns("xs"), bif("xs", "double", 1, "$arg", "xs:double"));
        fnMap.putValue(ns("xs"), bif("xs", "duration", 1, "$arg", "xs:duration"));
        fnMap.putValue(ns("xs"), bif("xs", "float", 1, "$arg", "xs:float"));
        fnMap.putValue(ns("xs"), bif("xs", "gDay", 1, "$arg", "xs:gDay"));
        fnMap.putValue(ns("xs"), bif("xs", "gMonth", 1, "$arg", "xs:gMonth"));
        fnMap.putValue(ns("xs"), bif("xs", "gMonthDay", 1, "$arg", "xs:gMonthDay"));
        fnMap.putValue(ns("xs"), bif("xs", "gYear", 1, "$arg", "xs:gYear"));
        fnMap.putValue(ns("xs"), bif("xs", "gYearMonth", 1, "$arg", "gYearMonth"));
        fnMap.putValue(ns("xs"), bif("xs", "hexBinary", 1, "$arg", "xs:hexBinary"));
        fnMap.putValue(ns("xs"), bif("xs", "string", 1, "$arg", "xs:string"));
        fnMap.putValue(ns("xs"), bif("xs", "time", 1, "$arg", "xs:time"));
        fnMap.putValue(ns("xs"), bif("xs", "byte", 1, "$arg", "xs:byte"));
        fnMap.putValue(ns("xs"), bif("xs", "nonPositiveInteger", 1, "$arg", "xs:nonPositiveInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "nonNegativeInteger", 1, "$arg", "xs:nonNegativeInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "negativeInteger", 1, "$arg", "xs:negativeInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "positiveInteger", 1, "$arg", "xs:positiveInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedLong", 1, "$arg", "xs:unsignedLong"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedInt", 1, "$arg", "xs:unsignedInt"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedShort", 1, "$arg", "xs:unsignedShort"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedByte", 1, "$arg", "xs:unsignedByte"));
        fnMap.putValue(ns("xs"), bif("xs", "normalizedString", 1, "$arg", "xs:normalizedString"));
        fnMap.putValue(ns("xs"), bif("xs", "token", 1, "$arg", "xs:token"));
        fnMap.putValue(ns("xs"), bif("xs", "language", 1, "$arg", "xs:language"));
        fnMap.putValue(ns("xs"), bif("xs", "Name", 1, "$arg", "xs:Name"));
        fnMap.putValue(ns("xs"), bif("xs", "NCName", 1, "$arg", "xs:NCName"));
        fnMap.putValue(ns("xs"), bif("xs", "NMToken", 1, "$arg", "xs:NMToken"));
        fnMap.putValue(ns("xs"), bif("xs", "ID", 1, "$arg", "xs:ID"));
        fnMap.putValue(ns("xs"), bif("xs", "IDREF", 1, "$arg", "xs:IDREF"));
        fnMap.putValue(ns("xs"), bif("xs", "ENTITY", 1, "$arg", "xs:ENTITY"));
        fnMap.putValue(ns("xs"), bif("xs", "IDREFS", 1, "$arg", "xs:IDREFS"));
        fnMap.putValue(ns("xs"), bif("xs", "ENTITIES", 1, "$arg", "xs:ENTITIES"));
        fnMap.putValue(ns("xs"), bif("xs", "NMTOKENS", 1, "$arg", "xs:NMTOKENS"));
        fnMap.putValue(ns("xs"), bif("xs", "NMTOKEN", 1, "$arg", "xs:NMTOKEN"));
        fnMap.putValue(ns("xs"), bif("xs", "QName", 1, "$arg", "xs:QName"));
        fnMap.putValue(ns("xslt"), bif("xslt", "processor", 0, "", "xs:string"));
        fnMap.putValue(ns("xslt"), bif("xslt", "transform", 2, "$input as item(), $stylesheet as item()", "node()"));
        fnMap.putValue(ns("xslt"), bif("xslt", "transform", 4, "$input as item(), $stylesheet as item(), $params as map(xs:string, xs:string)", "node()"));
        fnMap.putValue(ns("xslt"), bif("xslt", "transform-text", 2, "$input as item(), $stylesheet as item()", "xs:string"));
        fnMap.putValue(ns("xslt"), bif("xslt", "transform-text", 4, "$input as item(), $stylesheet as item(), $params as map(xs:string, xs:string)", "xs:string"));
        fnMap.putValue(ns("xslt"), bif("xslt", "version", 0, "", "xs:string"));
        fnMap.putValue(ns("zip"), bif("zip", "binary-entry", 2, "$uri as xs:string, $path as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("zip"), bif("zip", "entries", 1, "$uri as xs:string", "element(zip:file)"));
        fnMap.putValue(ns("zip"), bif("zip", "html-entry", 2, "$uri as xs:string, $path as xs:string", "document-node()"));
        fnMap.putValue(ns("zip"), bif("zip", "text-entry", 2, "$uri as xs:string, $path as xs:string", "xs:string"));
        fnMap.putValue(ns("zip"), bif("zip", "text-entry", 3, "$uri as xs:string, $path as xs:string, $encoding as xs:string", "xs:string"));
        fnMap.putValue(ns("zip"), bif("zip", "update-entries", 2, "$zip as element(zip:file), $output as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("zip"), bif("zip", "xml-entry", 2, "$uri as xs:string, $path as xs:string", "document-node()"));
        fnMap.putValue(ns("zip"), bif("zip", "zip-file", 1, "$zip as element(zip:file)", "empty-sequence()"));
    }

    @Override
    public PredeclaredNamespaces predeclaredNamespaces() {
        return predeclaredNamespaces;
    }
}
