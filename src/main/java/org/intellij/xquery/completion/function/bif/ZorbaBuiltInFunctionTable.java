/*
 * Copyright 2013-2015 Grzegorz Ligas <ligasgr@gmail.com> and other contributors
 * (see the CONTRIBUTORS file).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.intellij.xquery.completion.function.bif;

import org.intellij.xquery.completion.function.AbstractBuiltInFunctionTable;
import org.intellij.xquery.reference.namespace.PredeclaredNamespaces;
import org.intellij.xquery.reference.namespace.ZorbaPredeclaredNamespaces;

public class ZorbaBuiltInFunctionTable extends AbstractBuiltInFunctionTable {

    private PredeclaredNamespaces predeclaredNamespaces = new ZorbaPredeclaredNamespaces();

    {
        fnMap.putValue(ns("anim"), bif("anim", "create-animated-gif", 3, "$images as xs:base64Binary, $delay as xs:unsignedInt, $iterations as xs:unsignedInt", "xs:base64Binary"));
        fnMap.putValue(ns("anim"), bif("anim", "create-morphed-gif", 4, "$images as xs:base64Binary, $delay as xs:unsignedInt, $iterations as xs:unsignedInt, $nr-of-morph-images as xs:unsignedInt ", "xs:base64Binary"));
        fnMap.putValue(ns("base64"), bif("base64", "decode", 1, "$base64 as base64Binary", "string"));
        fnMap.putValue(ns("base64"), bif("base64", "decode", 2, "$base64 as base64Binary, $encoding as string", "string"));
        fnMap.putValue(ns("base64"), bif("base64", "encode", 1, "$string as string", "base64Binary"));
        fnMap.putValue(ns("basic"), bif("basic", "compress", 2, "$image as xs:base64Binary, $quality as xs:unsignedInt", "xs:base64Binary"));
        fnMap.putValue(ns("basic"), bif("basic", "convert", 2, "$image as xs:base64Binary, $format as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("basic"), bif("basic", "convert-impl", 2, "$image as xs:base64Binary, $format as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("basic"), bif("basic", "convert-svg", 2, "$svg as element(svg:svg), $format as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("basic"), bif("basic", "convert-svg-impl", 2, "$svg as xs:string, $format as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("basic"), bif("basic", "convert-svg-string", 2, "$svg as xs:string, $format as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("basic"), bif("basic", "create", 3, "$width as xs:unsignedInt, $height as xs:unsignedInt, $format as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("basic"), bif("basic", "create-impl", 3, "$width as xs:unsignedInt, $height as xs:unsignedInt, $format as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("basic"), bif("basic", "equals", 2, "$image1 as xs:base64Binary, $image2 as xs:base64Binary", "xs:boolean"));
        fnMap.putValue(ns("basic"), bif("basic", "exif", 2, "$image as xs:base64Binary, $tag as xs:string", "xs:string?"));
        fnMap.putValue(ns("basic"), bif("basic", "format", 1, "$image as xs:base64Binary", "xs:string"));
        fnMap.putValue(ns("basic"), bif("basic", "height", 1, "$image as xs:base64Binary", "xs:unsignedInt"));
        fnMap.putValue(ns("basic"), bif("basic", "width", 1, "$image as xs:base64Binary", "xs:unsignedInt"));
        fnMap.putValue(ns("cb"), bif("cb", "connect", 1, "$options as object()", "xs:anyURI"));
        fnMap.putValue(ns("cb"), bif("cb", "connect", 4, "$host as xs:string, $username as xs:string, $password as xs:string, $bucket as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("cb"), bif("cb", "create-view", 3, "$db as xs:anyURI, $doc-name as xs:string, $view-names as xs:string", "xs:string*"));
        fnMap.putValue(ns("cb"), bif("cb", "create-view", 4, "$db as xs:anyURI, $doc-name as xs:string, $view-names as xs:string, $options as object()", "xs:string*"));
        fnMap.putValue(ns("cb"), bif("cb", "delete-view", 2, "$db as xs:anyURI, $doc as xs:string", "xs:string*"));
        fnMap.putValue(ns("cb"), bif("cb", "flush", 1, "$db as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("cb"), bif("cb", "get-binary", 2, "$db as xs:anyURI, $key as xs:string", "xs:base64Binary*"));
        fnMap.putValue(ns("cb"), bif("cb", "get-binary", 3, "$db as xs:anyURI, $key as xs:string, $options as object()", "xs:base64Binary*"));
        fnMap.putValue(ns("cb"), bif("cb", "get-text", 2, "$db as xs:anyURI, $key as xs:string", "xs:string*"));
        fnMap.putValue(ns("cb"), bif("cb", "get-text", 3, "$db as xs:anyURI, $key as xs:string, $options as object()", "xs:string*"));
        fnMap.putValue(ns("cb"), bif("cb", "put-binary", 3, "$db as xs:anyURI, $key as xs:string, $value as xs:base64Binary", "empty-sequence()"));
        fnMap.putValue(ns("cb"), bif("cb", "put-binary", 4, "$db as xs:anyURI, $key as xs:string, $value as xs:base64Binary, $options as object()", "empty-sequence()"));
        fnMap.putValue(ns("cb"), bif("cb", "put-text", 3, "$db as xs:anyURI, $key as xs:string, $value as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("cb"), bif("cb", "put-text", 4, "$db as xs:anyURI, $key as xs:string, $value as xs:string, $options as object()", "empty-sequence()"));
        fnMap.putValue(ns("cb"), bif("cb", "remove", 2, "$db as xs:anyURI, $key as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("cb"), bif("cb", "touch", 3, "$db as xs:anyURI, $key as xs:string, $exp-time as xs:integer", "empty-sequence()"));
        fnMap.putValue(ns("cb"), bif("cb", "view", 2, "$db as xs:anyURI, $path as xs:string", "object()*"));
        fnMap.putValue(ns("cb"), bif("cb", "view", 3, "$db as xs:anyURI, $path as xs:string, $options as object()", "object()*"));
        fnMap.putValue(ns("cb"), bif("cb", "view-text", 2, "$db as xs:anyURI, $path as xs:string", "xs:string*"));
        fnMap.putValue(ns("cb"), bif("cb", "view-text", 3, "$db as xs:anyURI, $path as xs:string, $options as object()", "xs:string*"));
        fnMap.putValue(ns("cddl"), bif("cddl", "available-collections", 0, "", "xs:QName*"));
        fnMap.putValue(ns("cddl"), bif("cddl", "create", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("cddl"), bif("cddl", "create", 2, "$name as xs:QName, $content as item()", ""));
        fnMap.putValue(ns("cddl"), bif("cddl", "declared-collections", 0, "", "xs:QName*"));
        fnMap.putValue(ns("cddl"), bif("cddl", "delete", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("cddl"), bif("cddl", "is-available-collection", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("cddl"), bif("cddl", "is-declared-collection", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("cdml"), bif("cdml", "apply-insert", 2, "$name as xs:QName, $content as item()", "item()*"));
        fnMap.putValue(ns("cdml"), bif("cdml", "apply-insert-after", 3, "$name as xs:QName, $pos as item(), $content as item()", "item()*"));
        fnMap.putValue(ns("cdml"), bif("cdml", "apply-insert-before", 3, "$name as xs:QName, $target as item(), $content as item()", "item()*"));
        fnMap.putValue(ns("cdml"), bif("cdml", "apply-insert-first", 2, "$name as xs:QName, $content as item()", "item()*"));
        fnMap.putValue(ns("cdml"), bif("cdml", "apply-insert-last", 2, "$name as xs:QName, $content as item()", "item()*"));
        fnMap.putValue(ns("cdml"), bif("cdml", "collection", 1, "$name as xs:QName", "item()*"));
        fnMap.putValue(ns("cdml"), bif("cdml", "collection", 2, "$name as xs:QName, $skip as xs:integer", "item()*"));
        fnMap.putValue(ns("cdml"), bif("cdml", "collection", 3, "$name as xs:QName, $start as xs:anyURI, $skip as xs:integer", "item()*"));
        fnMap.putValue(ns("cdml"), bif("cdml", "collection-name", 1, "$item as item()", "xs:QName"));
        fnMap.putValue(ns("cdml"), bif("cdml", "delete", 1, "$items as item()", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "delete-first", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "delete-first", 2, "$name as xs:QName, $number as xs:integer", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "delete-last", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "delete-last", 2, "$name as xs:QName, $number as xs:integer", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "edit", 2, "$target as item(), $content as item()", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "index-of", 1, "$item as item()", "xs:integer"));
        fnMap.putValue(ns("cdml"), bif("cdml", "insert", 2, "$name as xs:QName, $content as item()", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "insert-after", 3, "$name as xs:QName, $target as item(), $content as item()", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "insert-before", 3, "$name as xs:QName, $target as item(), $content as item()", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "insert-first", 2, "$name as xs:QName, $content as item()", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "insert-last", 2, "$name as xs:QName, $content as item()", ""));
        fnMap.putValue(ns("cdml"), bif("cdml", "truncate", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("con"), bif("con", "all-xpaths", 2, "$s as element(*), $paths as xs:string", "element(*)*"));
        fnMap.putValue(ns("con"), bif("con", "least-attributes", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "least-distinct-attributes", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "least-distinct-elements", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "least-distinct-nodes", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "least-elements", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "least-frequent", 1, "$s", "item()"));
        fnMap.putValue(ns("con"), bif("con", "least-nodes", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "least-similar-edit-distance", 2, "$s as xs:string, $m as xs:string", "xs:string?"));
        fnMap.putValue(ns("con"), bif("con", "least-tokens", 2, "$s as xs:string, $r as xs:string", "xs:string?"));
        fnMap.putValue(ns("con"), bif("con", "least-xpaths", 2, "$s as element(*), $paths as xs:string", "element(*)*"));
        fnMap.putValue(ns("con"), bif("con", "longest", 1, "$s as xs:string", "xs:string?"));
        fnMap.putValue(ns("con"), bif("con", "matching", 2, "$s as xs:string, $r as xs:string", "xs:string*"));
        fnMap.putValue(ns("con"), bif("con", "most-attributes", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "most-distinct-attributes", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "most-distinct-elements", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "most-distinct-nodes", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "most-elements", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "most-frequent", 1, "$s", "item()"));
        fnMap.putValue(ns("con"), bif("con", "most-nodes", 1, "$s", "element(*)"));
        fnMap.putValue(ns("con"), bif("con", "most-similar-edit-distance", 2, "$s as xs:string, $m as xs:string", "xs:string?"));
        fnMap.putValue(ns("con"), bif("con", "most-tokens", 2, "$s as xs:string, $r as xs:string", "xs:string?"));
        fnMap.putValue(ns("con"), bif("con", "most-xpaths", 2, "$s as element(*), $paths as xs:string", "element(*)*"));
        fnMap.putValue(ns("con"), bif("con", "shortest", 1, "$s as xs:string", "xs:string?"));
        fnMap.putValue(ns("con"), bif("con", "some-xpaths", 2, "$s as element(*), $paths as xs:string", "element(*)*"));
        fnMap.putValue(ns("con"), bif("con", "superstring", 1, "$s as xs:string", "xs:string?"));
        fnMap.putValue(ns("con"), bif("con", "validating-schema", 2, "$s as element(*), $schema as element(*)", "element(*)*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "address-from-domain", 1, "$domain as xs:string", "xs:string*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "address-from-geocode", 2, "$lat as xs:double, $lon as xs:double", "xs:string*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "address-from-phone", 1, "$phone-number as xs:string", "xs:string*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "address-from-user", 1, "$name as xs:string", "xs:string*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "currency-convert", 4, "$v as xs:double, $m1 as xs:string, $m2 as xs:string, $date as xs:string", "xs:double"));
        fnMap.putValue(ns("conversion"), bif("conversion", "geocode-from-address", 1, "$q as xs:string", "xs:double*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "name-from-domain", 1, "$domain as xs:string", "xs:string*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "phone-from-address", 1, "$address as xs:string", "xs:string*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "phone-from-domain", 1, "$domain as xs:string", "xs:string*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "phone-from-user", 1, "$name as xs:string", "xs:string*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "unit-convert", 4, "$v as xs:double, $t as xs:string, $m1 as xs:string, $m2 as xs:string", "xs:double"));
        fnMap.putValue(ns("conversion"), bif("conversion", "user-from-address", 1, "$address as xs:string", "xs:string*"));
        fnMap.putValue(ns("conversion"), bif("conversion", "user-from-phone", 1, "$phone-number as xs:string", "xs:string*"));
        fnMap.putValue(ns("csv"), bif("csv", "parse", 1, "$csv as string", "object()*"));
        fnMap.putValue(ns("csv"), bif("csv", "parse", 2, "$csv as string, $options as object()", "object()*"));
        fnMap.putValue(ns("csv"), bif("csv", "serialize", 1, "$obj as object()", "string*"));
        fnMap.putValue(ns("csv"), bif("csv", "serialize", 2, "$obj as object(), $options as object()", "string*"));
        fnMap.putValue(ns("datetime"), bif("datetime", "current-date", 0, "", "xs:date"));
        fnMap.putValue(ns("datetime"), bif("datetime", "current-dateTime", 0, "", "xs:dateTimeStamp"));
        fnMap.putValue(ns("datetime"), bif("datetime", "current-time", 0, "", "xs:time"));
        fnMap.putValue(ns("datetime"), bif("datetime", "millis-to-dateTime", 1, "$millis as xs:long", "xs:dateTime"));
        fnMap.putValue(ns("datetime"), bif("datetime", "parse-date", 2, "$input as xs:string, $format as xs:string", "xs:date"));
        fnMap.putValue(ns("datetime"), bif("datetime", "parse-date", 3, "$input as xs:string, $format as xs:string, $locale as xs:string", "xs:date"));
        fnMap.putValue(ns("datetime"), bif("datetime", "parse-dateTime", 2, "$input as xs:string, $format as xs:string", "xs:dateTime"));
        fnMap.putValue(ns("datetime"), bif("datetime", "parse-dateTime", 3, "$input as xs:string, $format as xs:string, $locale as xs:string", "xs:dateTime"));
        fnMap.putValue(ns("datetime"), bif("datetime", "parse-time", 2, "$input as xs:string, $format as xs:string", "xs:time"));
        fnMap.putValue(ns("datetime"), bif("datetime", "parse-time", 3, "$input as xs:string, $format as xs:string, $locale as xs:string", "xs:time"));
        fnMap.putValue(ns("datetime"), bif("datetime", "timestamp", 0, "", "xs:long"));
        fnMap.putValue(ns("datetime"), bif("datetime", "utc-offset", 0, "", "xs:long"));
        fnMap.putValue(ns("ddl"), bif("ddl", "available-collections", 0, "", "xs:QName*"));
        fnMap.putValue(ns("ddl"), bif("ddl", "available-collections", 0, "", "xs:string*"));
        fnMap.putValue(ns("ddl"), bif("ddl", "create", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("ddl"), bif("ddl", "create", 1, "$uri as xs:string", ""));
        fnMap.putValue(ns("ddl"), bif("ddl", "create", 2, "$name as xs:QName, $content as item()", ""));
        fnMap.putValue(ns("ddl"), bif("ddl", "create", 2, "$uri as xs:string, $content as node()", ""));
        fnMap.putValue(ns("ddl"), bif("ddl", "delete", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("ddl"), bif("ddl", "delete", 1, "$uri as xs:string", ""));
        fnMap.putValue(ns("ddl"), bif("ddl", "from-qname", 1, "$name as xs:QName", "xs:string"));
        fnMap.putValue(ns("ddl"), bif("ddl", "is-available-collection", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("ddl"), bif("ddl", "is-available-collection", 1, "$uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("ddl"), bif("ddl", "to-qname", 1, "$uri as xs:string", "xs:QName"));
        fnMap.putValue(ns("dml"), bif("dml", "apply-insert-after", 3, "$name as xs:QName, $target as item(), $content as item()", "item()*"));
        fnMap.putValue(ns("dml"), bif("dml", "apply-insert-before", 3, "$name as xs:QName, $target as item(), $content as item()", "item()*"));
        fnMap.putValue(ns("dml"), bif("dml", "apply-insert-first", 2, "$name as xs:QName, $content as item()", "item()*"));
        fnMap.putValue(ns("dml"), bif("dml", "apply-insert-last", 2, "$name as xs:QName, $content as item()", "item()*"));
        fnMap.putValue(ns("dml"), bif("dml", "apply-insert-nodes-after", 3, "$name as xs:string, $pos as node(), $content as node()", "node()*"));
        fnMap.putValue(ns("dml"), bif("dml", "apply-insert-nodes-before", 3, "$name as xs:string, $target as node(), $content as node()", "node()*"));
        fnMap.putValue(ns("dml"), bif("dml", "apply-insert-nodes-first", 2, "$name as xs:string, $content as node()", "node()*"));
        fnMap.putValue(ns("dml"), bif("dml", "apply-insert-nodes-last", 2, "$name as xs:string, $content as node()", "node()*"));
        fnMap.putValue(ns("dml"), bif("dml", "collection", 1, "$name as xs:QName", "item()*"));
        fnMap.putValue(ns("dml"), bif("dml", "collection", 1, "$name as xs:string", "node()*"));
        fnMap.putValue(ns("dml"), bif("dml", "collection", 2, "$name as xs:QName, $skip as xs:integer", "item()*"));
        fnMap.putValue(ns("dml"), bif("dml", "collection", 3, "$name as xs:QName, $start as xs:anyURI, $skip as xs:integer", "item()*"));
        fnMap.putValue(ns("dml"), bif("dml", "collection-name", 1, "$item as item()", "xs:QName"));
        fnMap.putValue(ns("dml"), bif("dml", "collection-name", 1, "$node as node()", "xs:string"));
        fnMap.putValue(ns("dml"), bif("dml", "delete", 1, "$items as item()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "delete-first", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("dml"), bif("dml", "delete-first", 2, "$name as xs:QName, $number as xs:integer", ""));
        fnMap.putValue(ns("dml"), bif("dml", "delete-last", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("dml"), bif("dml", "delete-last", 2, "$name as xs:QName, $number as xs:integer", ""));
        fnMap.putValue(ns("dml"), bif("dml", "delete-node-first", 1, "$name as xs:string", ""));
        fnMap.putValue(ns("dml"), bif("dml", "delete-node-last", 1, "$name as xs:string", ""));
        fnMap.putValue(ns("dml"), bif("dml", "delete-nodes", 1, "$nodes as node()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "delete-nodes-first", 2, "$name as xs:string, $number as xs:integer", ""));
        fnMap.putValue(ns("dml"), bif("dml", "delete-nodes-last", 2, "$name as xs:string, $number as xs:integer", ""));
        fnMap.putValue(ns("dml"), bif("dml", "edit", 2, "$target as item(), $content as item()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "index-of", 1, "$item as item()", "xs:integer"));
        fnMap.putValue(ns("dml"), bif("dml", "index-of", 1, "$node as node()", "xs:integer"));
        fnMap.putValue(ns("dml"), bif("dml", "insert-after", 3, "$name as xs:QName, $pos as item(), $content as item()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "insert-before", 3, "$name as xs:QName, $target as item(), $content as item()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "insert-first", 2, "$name as xs:QName, $content as item()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "insert-last", 2, "$name as xs:QName, $content as item()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "insert-nodes-after", 3, "$name as xs:string, $pos as node(), $content as node()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "insert-nodes-before", 3, "$name as xs:string, $target as node(), $content as node()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "insert-nodes-first", 2, "$name as xs:string, $content as node()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "insert-nodes-last", 2, "$name as xs:string, $content as node()", ""));
        fnMap.putValue(ns("dml"), bif("dml", "truncate", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("doc"), bif("doc", "available-documents", 0, "", "xs:string*"));
        fnMap.putValue(ns("doc"), bif("doc", "document", 1, "$uri as xs:string", "document()"));
        fnMap.putValue(ns("doc"), bif("doc", "is-available-document", 1, "$uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("doc"), bif("doc", "put", 2, "$uri as xs:string, $doc as document()", ""));
        fnMap.putValue(ns("doc"), bif("doc", "remove", 1, "$uri as xs:string", ""));
        fnMap.putValue(ns("ex"), bif("ex", "categories", 1, "$text", "element(ex:category)*"));
        fnMap.putValue(ns("ex"), bif("ex", "concept-inline-annotation", 3, "$text as , $concepts as , $size", "item()*"));
        fnMap.putValue(ns("ex"), bif("ex", "concepts", 1, "$text", "element(ex:concept)*"));
        fnMap.putValue(ns("ex"), bif("ex", "concepts-inline", 1, "$text", "item()*"));
        fnMap.putValue(ns("ex"), bif("ex", "entities", 1, "$text as xs:string", "element(ex:entity)*"));
        fnMap.putValue(ns("ex"), bif("ex", "entities-inline", 1, "$text", "item()*"));
        fnMap.putValue(ns("ex"), bif("ex", "entity-inline-annotation", 3, "$text as , $entities as , $size", "item()*"));
        fnMap.putValue(ns("ex"), bif("ex", "relations", 1, "$text", "element(ex:relation)*"));
        fnMap.putValue(ns("ex"), bif("ex", "server-connection", 1, "$text as xs:string", ""));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "date", 3, "$year as xs:integer, $month as xs:integer, $day as xs:integer", "xs:date?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "day", 1, "$date as xs:date", "xs:integer?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "day-of-week", 1, "$date as xs:anyAtomicType", "xs:integer?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "days360", 2, "$start_date as xs:date, $end_date as xs:date", "xs:integer"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "days360", 3, "$start_date as xs:date, $end_date as xs:date, $method as xs:boolean", "xs:integer"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "hour", 1, "$time as xs:time", "xs:integer?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "is-leap-year", 1, "$date as xs:date", "xs:boolean"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "minute", 1, "$time as xs:time", "xs:integer?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "month", 1, "$date as xs:date", "xs:integer?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "networkdays", 2, "$start_date as xs:date, $end_date as xs:date", "xs:integer*"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "networkdays", 3, "$start_date as xs:date, $end_date as xs:date, $holidays as xs:date", "xs:integer*"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "now", 0, "", "xs:dateTime?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "second", 1, "$time as xs:time", "xs:decimal?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "time", 3, "$hour as xs:integer, $minute as xs:integer, $second as xs:integer", "xs:time?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "today", 0, "", "xs:date?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "weekday", 1, "$date as xs:date", "xs:integer?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "weekday", 2, "$date as xs:date, $return_type as xs:integer", "xs:integer?"));
        fnMap.putValue(ns("excel-datetime"), bif("excel-datetime", "year", 1, "$date as xs:date", "xs:integer?"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "bin2dec", 1, "$arg as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "bin2decUtil", 1, "$arg as xs:string", "xs:integer"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "bin2hex", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "bin2hex", 2, "$arg as xs:anyAtomicType, $places as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "bin2oct", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "bin2oct", 2, "$arg as xs:anyAtomicType, $places as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "dec2bin", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "dec2bin", 2, "$arg as xs:anyAtomicType, $places as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "dec2binUtil", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "dec2hex", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "dec2hex", 2, "$arg as xs:anyAtomicType, $places as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "dec2hexUtil", 1, "$number as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "dec2oct", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "dec2oct", 2, "$arg as xs:anyAtomicType, $places as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "dec2octUtil", 1, "$number as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "hex2bin", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "hex2bin", 2, "$arg as xs:anyAtomicType, $places as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "hex2dec", 1, "$arg as xs:string", "xs:integer"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "hex2decUtil", 1, "$arg as xs:string", "xs:integer*"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "hex2oct", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "hex2oct", 2, "$arg as xs:anyAtomicType, $places as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "is-bin", 1, "$arg as xs:string", "xs:boolean"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "is-hex", 1, "$arg as xs:string", "xs:boolean"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "is-oct", 1, "$arg as xs:string", "xs:boolean"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "oct2bin", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "oct2bin", 2, "$arg as xs:anyAtomicType, $places as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "oct2dec", 1, "$arg as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "oct2decUtil", 1, "$arg as xs:string", "xs:integer"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "oct2hex", 1, "$arg as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-engineering"), bif("excel-engineering", "oct2hex", 2, "$arg as xs:anyAtomicType, $places as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-information"), bif("excel-information", "is-blank", 1, "$value as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-information"), bif("excel-information", "is-even", 1, "$value as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-information"), bif("excel-information", "is-odd", 1, "$value as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-information"), bif("excel-information", "islogical", 1, "$value as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-information"), bif("excel-information", "isnumber", 1, "$value as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-information"), bif("excel-information", "istext", 1, "$value as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-information"), bif("excel-information", "n", 1, "$value as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-information"), bif("excel-information", "na", 0, "", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-logical"), bif("excel-logical", "and", 1, "$values as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-logical"), bif("excel-logical", "and", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-logical"), bif("excel-logical", "if", 3, "$logical_test as xs:boolean, $value_if_true as item(), $value_if_false as item()", "item()*"));
        fnMap.putValue(ns("excel-logical"), bif("excel-logical", "or", 1, "$values as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-logical"), bif("excel-logical", "or", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "choose", 2, "$index_num as xs:integer, $values as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "choose", 30, "$index_num as xs:integer, $value_sequence1 as xs:anyAtomicType, $value_sequence2 as xs:anyAtomicType, $value_sequence3 as xs:anyAtomicType, $value_sequence4 as xs:anyAtomicType, $value_sequence5 as xs:anyAtomicType, $value_sequence6 as xs:anyAtomicType, $value_sequence7 as xs:anyAtomicType, $value_sequence8 as xs:anyAtomicType, $value_sequence9 as xs:anyAtomicType, $value_sequence10 as xs:anyAtomicType, $value_sequence11 as xs:anyAtomicType, $value_sequence12 as xs:anyAtomicType, $value_sequence13 as xs:anyAtomicType, $value_sequence14 as xs:anyAtomicType, $value_sequence15 as xs:anyAtomicType, $value_sequence16 as xs:anyAtomicType, $value_sequence17 as xs:anyAtomicType, $value_sequence18 as xs:anyAtomicType, $value_sequence19 as xs:anyAtomicType, $value_sequence20 as xs:anyAtomicType, $value_sequence21 as xs:anyAtomicType, $value_sequence22 as xs:anyAtomicType, $value_sequence23 as xs:anyAtomicType, $value_sequence24 as xs:anyAtomicType, $value_sequence25 as xs:anyAtomicType, $value_sequence26 as xs:anyAtomicType, $value_sequence27 as xs:anyAtomicType, $value_sequence28 as xs:anyAtomicType, $value_sequence29 as xs:anyAtomicType ", "xs:anyAtomicType*"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "hlookup", 5, "$lookup_value as xs:anyAtomicType, $table_array as xs:anyAtomicType, $table_width as xs:integer, $table_height as xs:integer, $row_index_num as xs:integer ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "hlookup", 6, "$lookup_value as xs:anyAtomicType, $table_array as xs:anyAtomicType, $table_width as xs:integer, $table_height as xs:integer, $row_index_num as xs:integer, $range_lookup as xs:boolean ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "index", 5, "$array as xs:anyAtomicType, $array_height as xs:integer, $array_width as xs:integer, $row_num as xs:integer, $column_num as xs:integer ", "xs:anyAtomicType+"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "lookup", 3, "$lookup_value as xs:anyAtomicType, $lookup_vector as xs:anyAtomicType, $result_vector as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "lookup", 4, "$lookup_value as xs:anyAtomicType, $array as xs:anyAtomicType, $array_width as xs:integer, $array_height as xs:integer ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "match", 2, "$lookup_value as xs:anyAtomicType, $sequence as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "match", 3, "$lookup_value as xs:anyAtomicType, $sequence as xs:anyAtomicType, $match_type as xs:integer", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "offset", 5, "$reference as xs:anyAtomicType, $reference_height as xs:integer, $reference_width as xs:integer, $rows as xs:integer, $cols as xs:integer ", "xs:anyAtomicType*"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "offset", 7, "$reference as xs:anyAtomicType, $reference_height as xs:integer, $reference_width as xs:integer, $rows as xs:integer, $cols as xs:integer, $height as xs:integer, $width as xs:integer ", "xs:anyAtomicType*"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "transpose", 3, "$array as xs:anyAtomicType, $array_width as xs:integer, $array_height as xs:integer", "xs:anyAtomicType+"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "vlookup", 5, "$lookup_value as xs:anyAtomicType, $table_array as xs:anyAtomicType, $table_width as xs:integer, $table_height as xs:integer, $col_index_num as xs:integer ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-lookup"), bif("excel-lookup", "vlookup", 6, "$lookup_value as xs:anyAtomicType, $table_array as xs:anyAtomicType, $table_width as xs:integer, $table_height as xs:integer, $col_index_num as xs:integer, $range_lookup as xs:boolean ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "abs", 1, "$arg as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "cast-as-numeric", 1, "$number as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "ceiling", 2, "$number as xs:anyAtomicType, $significance as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "degrees", 1, "$radian as xs:double", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "even", 1, "$number as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "fact", 1, "$number as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "factdouble", 1, "$number as xs:integer", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "floor", 2, "$number as xs:anyAtomicType, $significance as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "gcd", 1, "$numbers as xs:integer", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "int", 1, "$number as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "is-a-number", 1, "$value as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "lcm", 1, "$numbers as xs:integer", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "mod", 2, "$number as xs:anyAtomicType, $divisor as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "mround", 2, "$number as xs:anyAtomicType, $multiple as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "odd", 1, "$number as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "pi", 0, "", "xs:decimal"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "power", 2, "$number as xs:anyAtomicType, $power as xs:integer", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "product", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "quotient", 2, "$numerator as xs:anyAtomicType, $denominator as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "radians", 1, "$degree as xs:integer", "xs:decimal"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "roman", 1, "$number as xs:integer", "xs:string"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "round", 2, "$number as xs:anyAtomicType, $precision as xs:integer", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "rounddown", 2, "$number as xs:anyAtomicType, $precision as xs:integer", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "roundup", 2, "$number as xs:anyAtomicType, $precision as xs:integer", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "sign", 1, "$number as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "sort-numbers", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "sum", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "trunc", 1, "$number as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-math"), bif("excel-math", "trunc", 2, "$number as xs:anyAtomicType, $precision as xs:integer", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 1, "$array1 as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 10, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 11, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 12, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 13, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 14, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 15, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 16, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 17, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 18, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 19, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 2, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 20, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 21, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 22, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType, $array22 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 23, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType, $array22 as xs:anyAtomicType, $array23 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 24, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType, $array22 as xs:anyAtomicType, $array23 as xs:anyAtomicType, $array24 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 25, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType, $array22 as xs:anyAtomicType, $array23 as xs:anyAtomicType, $array24 as xs:anyAtomicType, $array25 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 26, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType, $array22 as xs:anyAtomicType, $array23 as xs:anyAtomicType, $array24 as xs:anyAtomicType, $array25 as xs:anyAtomicType, $array26 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 27, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType, $array22 as xs:anyAtomicType, $array23 as xs:anyAtomicType, $array24 as xs:anyAtomicType, $array25 as xs:anyAtomicType, $array26 as xs:anyAtomicType, $array27 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 28, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType, $array22 as xs:anyAtomicType, $array23 as xs:anyAtomicType, $array24 as xs:anyAtomicType, $array25 as xs:anyAtomicType, $array26 as xs:anyAtomicType, $array27 as xs:anyAtomicType, $array28 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 29, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType, $array22 as xs:anyAtomicType, $array23 as xs:anyAtomicType, $array24 as xs:anyAtomicType, $array25 as xs:anyAtomicType, $array26 as xs:anyAtomicType, $array27 as xs:anyAtomicType, $array28 as xs:anyAtomicType, $array29 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 3, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 30, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType, $array10 as xs:anyAtomicType, $array11 as xs:anyAtomicType, $array12 as xs:anyAtomicType, $array13 as xs:anyAtomicType, $array14 as xs:anyAtomicType, $array15 as xs:anyAtomicType, $array16 as xs:anyAtomicType, $array17 as xs:anyAtomicType, $array18 as xs:anyAtomicType, $array19 as xs:anyAtomicType, $array20 as xs:anyAtomicType, $array21 as xs:anyAtomicType, $array22 as xs:anyAtomicType, $array23 as xs:anyAtomicType, $array24 as xs:anyAtomicType, $array25 as xs:anyAtomicType, $array26 as xs:anyAtomicType, $array27 as xs:anyAtomicType, $array28 as xs:anyAtomicType, $array29 as xs:anyAtomicType, $array30 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 4, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 5, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 6, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 7, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 8, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-math-sumproduct"), bif("excel-math-sumproduct", "sumproduct", 9, "$array1 as xs:anyAtomicType, $array2 as xs:anyAtomicType, $array3 as xs:anyAtomicType, $array4 as xs:anyAtomicType, $array5 as xs:anyAtomicType, $array6 as xs:anyAtomicType, $array7 as xs:anyAtomicType, $array8 as xs:anyAtomicType, $array9 as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "avedev", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "average", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "averagea", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "count", 1, "$numbers as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "counta", 1, "$numbers as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "countblank", 1, "$cells as xs:anyAtomicType", "xs:integer"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "large", 2, "$numbers as xs:anyAtomicType, $k as xs:integer", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "max", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "maxa", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "median", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "min", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "mina", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "mode", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "percentile", 2, "$numbers as xs:anyAtomicType, $k_at as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "percentrank", 2, "$numbers as xs:anyAtomicType, $x as xs:anyAtomicType", "xs:decimal"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "prob", 3, "$x_range as xs:anyAtomicType, $prob_range as xs:anyAtomicType, $range_lower_limit as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "prob", 4, "$x_range as xs:anyAtomicType, $prob_range as xs:anyAtomicType, $range_lower_limit as xs:anyAtomicType, $upper_limit as xs:anyAtomicType ", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "quartile", 2, "$numbers as xs:anyAtomicType, $quart as xs:integer", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "rank", 2, "$x as xs:anyAtomicType, $numbers as xs:anyAtomicType", "xs:decimal"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "rank", 3, "$x as xs:anyAtomicType, $numbers as xs:anyAtomicType, $order_ascending as xs:boolean", "xs:decimal"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "slope", 2, "$known_y as xs:anyAtomicType, $known_x as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "small", 2, "$numbers as xs:anyAtomicType, $k as xs:integer", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "standardize", 3, "$x as xs:anyAtomicType, $mean as xs:anyAtomicType, $standard_dev as xs:anyAtomicType", "xs:double"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "var", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "vara", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "varp", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical"), bif("excel-statistical", "varpa", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical-zorba"), bif("excel-statistical-zorba", "stdev", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical-zorba"), bif("excel-statistical-zorba", "stdeva", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical-zorba"), bif("excel-statistical-zorba", "stdevp", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical-zorba"), bif("excel-statistical-zorba", "stdevpa", 1, "$numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-statistical-zorba"), bif("excel-statistical-zorba", "subtotal", 2, "$function_num as xs:integer, $numbers as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "asc", 1, "$text as xs:string", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "char", 1, "$number as xs:integer", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "clean", 1, "$arg as xs:string", "xs:string?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "code", 1, "$arg as xs:string", "xs:integer"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "concatenate", 1, "$args as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "concatenate", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "dollar", 1, "$number as xs:decimal", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "dollar", 2, "$number as xs:decimal, $decimals as xs:decimal", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "exact", 2, "$arg1 as xs:string, $arg2 as xs:string", "xs:boolean"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "find", 2, "$find_text as xs:string, $within_text as xs:string", "xs:integer?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "find", 3, "$find_text as xs:string, $within_text as xs:string, $start_num as xs:integer", "xs:integer?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "fixed", 2, "$number as xs:decimal, $decimals as xs:decimal", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "fixed", 3, "$number as xs:decimal, $decimals as xs:decimal, $no_commas as xs:boolean", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "index-of-match", 4, "$arg as xs:string, $pattern as xs:string, $pos as xs:integer, $instance_num as xs:integer", "xs:integer?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "index-of-match-first", 2, "$arg as xs:string, $pattern as xs:string", "xs:integer?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "index-of-match-first", 3, "$arg as xs:string, $pattern as xs:string, $flags as xs:string", "xs:integer?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "left", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "left", 2, "$text as xs:string, $num_chars as xs:integer", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "len", 1, "$arg as xs:string", "xs:integer"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "lower", 1, "$arg as xs:string", "xs:string?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "mid", 3, "$text as xs:string, $start_num as xs:integer, $num_chars as xs:integer", "xs:string?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "pad-integer-to-length", 3, "$toPad as xs:anyAtomicType, $padChar as xs:string, $length as xs:integer", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "pad-string-to-length", 3, "$string as xs:string, $padChar as xs:string, $length as xs:integer", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "replace", 4, "$old_text as xs:string, $start_num as xs:integer, $num_chars as xs:integer, $new_text as xs:string ", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "reverse-string", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "right", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "right", 2, "$text as xs:string, $num_chars as xs:integer", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "search", 2, "$find_text as xs:string, $within_text as xs:string", "xs:integer?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "search", 3, "$find_text as xs:string, $within_text as xs:string, $start_num as xs:integer", "xs:integer?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "substitute", 3, "$text as xs:string, $old_text as xs:string, $new_text as xs:string", "xs:string?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "substitute", 4, "$text as xs:string, $old_text as xs:string, $new_text as xs:string, $instance_num as xs:integer ", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "t", 1, "$value as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "tokenize-length", 2, "$text as xs:string, $length as xs:decimal", "xs:string*"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "trim", 1, "$text as xs:string", "xs:string?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "upper", 1, "$text as xs:string", "xs:string?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "value", 1, "$arg as xs:anyAtomicType", "xs:anyAtomicType?"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "value-except", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "value-intersect", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("excel-text"), bif("excel-text", "value-union", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("expath-http"), bif("expath-http", "send-request", 1, "$request as element(*)", "item()+"));
        fnMap.putValue(ns("expath-http"), bif("expath-http", "send-request", 2, "$request as element(*), $href as xs:string", "item()+"));
        fnMap.putValue(ns("expath-http"), bif("expath-http", "send-request", 3, "$request as element(*), $href as xs:string, $bodies as item()", "item()+"));
        fnMap.putValue(ns("fetch"), bif("fetch", "content", 1, "$uri as xs:string", "xs:string"));
        fnMap.putValue(ns("fetch"), bif("fetch", "content", 2, "$uri as xs:string, $entity-kind as xs:string", "xs:string"));
        fnMap.putValue(ns("fetch"), bif("fetch", "content", 3, "$uri as xs:string, $entity-kind as xs:string, $encoding as xs:string", "xs:string"));
        fnMap.putValue(ns("fetch"), bif("fetch", "content-binary", 1, "$uri as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("fetch"), bif("fetch", "content-binary", 2, "$uri as xs:string, $entity-kind as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("file"), bif("file", "append-binary", 2, "$file as xs:string, $content as xs:base64Binary", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append-text", 2, "$file as xs:string, $content as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append-text", 3, "$file as xs:string, $content as xs:string, $encoding as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append-text-lines", 2, "$file as xs:string, $content as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "append-text-lines", 3, "$file as xs:string, $content as xs:string, $encoding as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "base-name", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "base-name", 2, "$path as xs:string, $suffix as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "copy", 2, "$source as xs:string, $destination as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "copy-directory", 2, "$sourceDir as xs:string, $destinationDir as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "copy-directory-content", 2, "$sourceDir as xs:string, $destination as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "copy-directory-impl", 2, "$sourceDir as xs:string, $destination as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "copy-file-impl", 2, "$sourceFile as xs:string, $destination as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "create-directory", 1, "$dir as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "delete", 1, "$path as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "delete-directory-impl", 1, "$dir as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "delete-file-impl", 1, "$file as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "dir-name", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "directory-separator", 0, "", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "exists", 1, "$path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "exists", 2, "$path as xs:string, $follow-symlinks as xs:boolean", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "glob-to-regex", 1, "$pattern as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "is-directory", 1, "$path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "is-file", 1, "$path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "is-symlink", 1, "$path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "last-modified", 1, "$path as xs:string", "xs:dateTime"));
        fnMap.putValue(ns("file"), bif("file", "list", 1, "$dir as xs:string", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "list", 2, "$path as xs:string, $recursive as xs:boolean", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "list", 3, "$path as xs:string, $recursive as xs:boolean, $pattern as xs:string", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "move", 2, "$source as xs:string, $destination as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "path-separator", 0, "", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "path-to-native", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "path-to-uri", 1, "$path as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("file"), bif("file", "read-binary", 1, "$file as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("file"), bif("file", "read-text", 1, "$file as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "read-text", 2, "$file as xs:string, $encoding as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "read-text-lines", 1, "$file as xs:string", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "read-text-lines", 2, "$file as xs:string, $encoding as xs:string", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "resolve-path", 1, "$path as xs:string", "xs:string"));
        fnMap.putValue(ns("file"), bif("file", "size", 1, "$file as xs:string", "xs:integer"));
        fnMap.putValue(ns("file"), bif("file", "write-binary", 2, "$file as xs:string, $content as xs:base64Binary", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-text", 2, "$file as xs:string, $content as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-text", 3, "$file as xs:string, $content as xs:string, $encoding as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-text-lines", 2, "$file as xs:string, $content as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("file"), bif("file", "write-text-lines", 3, "$file as xs:string, $content as xs:string, $encoding as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("fn"), bif("fn", "QName", 2, "$paramURI as xs:string, $paramQName as xs:string", "xs:QName"));
        fnMap.putValue(ns("fn"), bif("fn", "abs", 1, "$arg as numeric", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-date-to-timezone", 1, "$arg as xs:date", "xs:date?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-date-to-timezone", 2, "$arg as xs:date, $timezone as xs:dayTimeDuration", "xs:date?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-dateTime-to-timezone", 1, "$arg as xs:dateTime", "xs:dateTime"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-dateTime-to-timezone", 2, "$arg as xs:dateTime, $timezone as xs:dayTimeDuration", "xs:dateTime"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-time-to-timezone", 1, "$arg as xs:time", "xs:time?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-time-to-timezone", 2, "$arg as xs:time, $timezone as xs:dayTimeDuration", "xs:time?"));
        fnMap.putValue(ns("fn"), bif("fn", "analyze-string", 2, "$input as xs:string, $pattern as xs:string", "element(fn:analyze-string-result)"));
        fnMap.putValue(ns("fn"), bif("fn", "analyze-string", 3, "$input as xs:string, $pattern as xs:string, $flags as xs:string", "element(fn:analyze-string-result)"));
        fnMap.putValue(ns("fn"), bif("fn", "available-environment-variables", 0, "", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "available-environment-variables", 0, "", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "avg", 1, "$arg as xs:anyAtomicType", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "base-uri", 0, "", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "base-uri", 1, "$arg as node()", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "boolean", 1, "$arg as item()", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "ceiling", 1, "$arg as numeric", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "codepoint-equal", 2, "$comparand1 as xs:string, $comparand2 as xs:string", "xs:boolean?"));
        fnMap.putValue(ns("fn"), bif("fn", "codepoints-to-string", 1, "$arg as xs:integer", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "codepoints-to-string", 1, "$arg as xs:integer", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "collection", 0, "", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "collection", 1, "$arg as xs:string", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "compare", 2, "$comparand1 as xs:string, $comparand2 as xs:string", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "compare", 3, "$comparand1 as xs:string, $comparand2 as xs:string, $collation as xs:string", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "contains", 2, "$arg1 as xs:string, $arg2 as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "contains", 3, "$arg1 as xs:string, $arg2 as xs:string, $collation as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "count", 1, "$arg as item()", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "current-date", 0, "", "xs:date"));
        fnMap.putValue(ns("fn"), bif("fn", "current-dateTime", 0, "", "xs:dateTimeStamp"));
        fnMap.putValue(ns("fn"), bif("fn", "current-time", 0, "", "xs:time"));
        fnMap.putValue(ns("fn"), bif("fn", "data", 0, "", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "data", 1, "$arg as item()", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "dateTime", 2, "$arg1 as xs:date, $arg2 as xs:time", "xs:dateTime?"));
        fnMap.putValue(ns("fn"), bif("fn", "day-from-date", 1, "$arg as xs:date", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "days-from-duration", 1, "$arg as xs:duration", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "deep-equal", 2, "$parameter1 as item(), $parameter2 as item()", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "deep-equal", 3, "$parameter1 as item(), $parameter2 as item(), $collation as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "default-collation", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "distinct-values", 1, "$arg as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "distinct-values", 2, "$arg as xs:anyAtomicType, $collation as xs:string", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "doc", 1, "$uri as xs:string", "document()?"));
        fnMap.putValue(ns("fn"), bif("fn", "doc-available", 1, "$uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "document-uri", 0, "", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "document-uri", 1, "$arg as node()", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "element-with-id", 1, "$arg as xs:string", "element(*)*"));
        fnMap.putValue(ns("fn"), bif("fn", "element-with-id", 2, "$arg as xs:string, $node as node()", "element(*)*"));
        fnMap.putValue(ns("fn"), bif("fn", "empty", 1, "$arg as item()", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "encode-for-uri", 1, "$uri-part as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "ends-with", 2, "$arg1 as xs:string, $arg2 as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "ends-with", 3, "$arg1 as xs:string, $arg2 as xs:string, $collation as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "environment-variable", 1, "$name as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "environment-variable", 1, "$arg as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 0, "", "none"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 1, "$code as xs:QName", "none"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 2, "$code as xs:QName, $description as xs:string", "none"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 3, "$code as xs:QName, $description as xs:string, $error-object as item()", "none"));
        fnMap.putValue(ns("fn"), bif("fn", "escape-html-uri", 1, "$uri as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "exactly-one", 1, "$arg as item()", "item()"));
        fnMap.putValue(ns("fn"), bif("fn", "exists", 1, "$arg as item()", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "false", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "filter", 2, "$seq as item(), $f as function (item()) as xs:boolean", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "floor", 1, "$arg as numeric", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "fold-left", 3, "$seq as item(), $zero as item(), $f as function (item()*, item()) as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "fold-right", 3, "$seq as item(), $zero as item(), $f as function (item()*, item()) as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "for-each", 2, "$seq as item(), $f as function (item()) as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "for-each-pair", 3, "$seq1 as item(), $seq2 as item(), $f as function (item(), item()) as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "format-date", 2, "$value as xs:date, $picture as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-date", 5, "$value as xs:date, $picture as xs:string, $language as xs:string, $calendar as xs:string, $place as xs:string ", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-dateTime", 2, "$value as xs:dateTime, $picture as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-dateTime", 5, "$value as xs:dateTime, $picture as xs:string, $language as xs:string, $calendar as xs:string, $place as xs:string ", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-integer", 2, "$value as xs:integer, $picture as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-integer", 3, "$value as xs:integer, $picture as xs:string, $language as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-number", 2, "$value as numeric, $picture as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-number", 3, "$value as numeric, $picture as xs:string, $decimal-format-name as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-time", 2, "$value as xs:time, $picture as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "format-time", 5, "$value as xs:time, $picture as xs:string, $language as xs:string, $calendar as xs:string, $place as xs:string ", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "function-arity", 1, "$func as function (*)", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "generate-id", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "generate-id", 1, "$arg as node()", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "has-children", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "has-children", 1, "$node as node()", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "head", 1, "$arg as item()", "item()?"));
        fnMap.putValue(ns("fn"), bif("fn", "hours-from-duration", 1, "$arg as xs:duration", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "hours-from-time", 1, "$arg as xs:time", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "id", 1, "$arg as xs:string", "element(*)*"));
        fnMap.putValue(ns("fn"), bif("fn", "id", 2, "$arg as xs:string, $node as node()", "element(*)*"));
        fnMap.putValue(ns("fn"), bif("fn", "idref", 1, "$arg as xs:string", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "idref", 2, "$arg as xs:string, $node as node()", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "implicit-timezone", 0, "", "xs:dayTimeDuration"));
        fnMap.putValue(ns("fn"), bif("fn", "in-scope-prefixes", 1, "$element as element(*)", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "index-of", 2, "$seq as xs:anyAtomicType, $search as xs:anyAtomicType", "xs:integer*"));
        fnMap.putValue(ns("fn"), bif("fn", "index-of", 3, "$seq as xs:anyAtomicType, $search as xs:anyAtomicType, $collation as xs:string", "xs:integer*"));
        fnMap.putValue(ns("fn"), bif("fn", "innermost", 1, "$nodes as node()", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "insert-before", 3, "$target as item(), $position as xs:integer, $inserts as item()", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "iri-to-uri", 1, "$iri as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "lang", 1, "$testlang as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "lang", 2, "$testlang as xs:string, $node as node()", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "last", 0, "", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "local-name", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "local-name", 1, "$arg as node()", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "local-name-from-QName", 1, "$arg as xs:QName", "xs:NCName?"));
        fnMap.putValue(ns("fn"), bif("fn", "lower-case", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "matches", 2, "$input as xs:string, $pattern as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "matches", 3, "$input as xs:string, $pattern as xs:string, $flags as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "max", 1, "$arg as xs:anyAtomicType", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "max", 2, "$arg as xs:anyAtomicType, $collation as xs:string", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "min", 1, "$arg as xs:anyAtomicType", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "min", 2, "$arg as xs:anyAtomicType, $collation as xs:string", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "minutes-from-dateTime", 1, "$arg as xs:dateTime", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "minutes-from-duration", 1, "$arg as xs:duration", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "minutes-from-time", 1, "$arg as xs:time", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "month-from-date", 1, "$arg as xs:date", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "months-from-duration", 1, "$arg as xs:duration", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "name", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "name", 1, "$arg as node()", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri", 0, "", "xs:anyURI"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri", 1, "$arg as node()", "xs:anyURI"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri-for-prefix", 2, "$prefix as xs:string, $element as element(*)", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri-from-QName", 1, "$arg as xs:QName", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "nilled", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "nilled", 1, "$arg as node()", "xs:boolean?"));
        fnMap.putValue(ns("fn"), bif("fn", "node-name", 0, "", "xs:QName?"));
        fnMap.putValue(ns("fn"), bif("fn", "node-name", 1, "$arg as node()", "xs:QName?"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-space", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-space", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-unicode", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-unicode", 2, "$arg as xs:string, $normalizationForm as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "not", 1, "$arg as item()", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "number", 0, "", "xs:double"));
        fnMap.putValue(ns("fn"), bif("fn", "number", 1, "$arg as xs:anyAtomicType", "xs:double"));
        fnMap.putValue(ns("fn"), bif("fn", "one-or-more", 1, "$arg as item()", "item()+"));
        fnMap.putValue(ns("fn"), bif("fn", "outermost", 1, "$nodes as node()", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "parse-xml", 1, "$arg as xs:string", "document(element(*,xs:untyped))"));
        fnMap.putValue(ns("fn"), bif("fn", "parse-xml", 2, "$arg as xs:string, $baseURI as xs:string", "document(element(*,xs:untyped))"));
        fnMap.putValue(ns("fn"), bif("fn", "parse-xml-fragment", 1, "$arg as xs:string", "document(element(*,xs:untyped))"));
        fnMap.putValue(ns("fn"), bif("fn", "position", 0, "", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "prefix-from-QName", 1, "$arg as xs:QName", "xs:NCName?"));
        fnMap.putValue(ns("fn"), bif("fn", "remove", 2, "$target as item(), $position as xs:integer", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "replace", 3, "$input as xs:string, $pattern as xs:string, $replacement as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "replace", 4, "$input as xs:string, $pattern as xs:string, $replacement as xs:string, $flags as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "resolve-QName", 2, "$qname as xs:string, $element as element(*)", "xs:QName?"));
        fnMap.putValue(ns("fn"), bif("fn", "resolve-uri", 1, "$relative as xs:string", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "resolve-uri", 2, "$relative as xs:string, $base as xs:string", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "reverse", 1, "$arg as item()", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "root", 0, "", "node()"));
        fnMap.putValue(ns("fn"), bif("fn", "root", 1, "$arg as node()", "node()?"));
        fnMap.putValue(ns("fn"), bif("fn", "round", 1, "$arg as numeric", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "round", 2, "$arg as numeric, $precision as xs:integer", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "round-half-to-even", 1, "$arg as numeric", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "round-half-to-even", 2, "$arg as numeric, $precision as xs:integer", "numeric?"));
        fnMap.putValue(ns("fn"), bif("fn", "seconds-from-dateTime", 1, "$arg as xs:dateTime", "xs:decimal?"));
        fnMap.putValue(ns("fn"), bif("fn", "seconds-from-duration", 1, "$arg as xs:duration", "xs:decimal?"));
        fnMap.putValue(ns("fn"), bif("fn", "seconds-from-time", 1, "$arg as xs:time", "xs:decimal?"));
        fnMap.putValue(ns("fn"), bif("fn", "serialize", 1, "$arg as item()", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "serialize", 2, "$arg as item(), $params as element(output:serialization-parameters)", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "starts-with", 2, "$arg1 as xs:string, $arg2 as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "starts-with", 3, "$arg1 as xs:string, $arg2 as xs:string, $collation as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "static-base-uri", 0, "", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "string", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string", 1, "$arg as item()", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string-join", 1, "$arg1 as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string-join", 2, "$arg1 as xs:string, $arg2 as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string-length", 0, "", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "string-length", 1, "$arg as xs:string", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "string-to-codepoints", 1, "$arg as xs:string", "xs:integer*"));
        fnMap.putValue(ns("fn"), bif("fn", "string-to-codepoints", 1, "$arg as xs:string", "xs:integer*"));
        fnMap.putValue(ns("fn"), bif("fn", "subsequence", 2, "$sourceSeq as item(), $startingLoc as xs:double", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "subsequence", 3, "$sourceSeq as item(), $startingLoc as xs:double, $length as xs:double", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "substring", 2, "$sourceString as xs:string, $start as xs:double", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring", 3, "$sourceString as xs:string, $start as xs:double, $length as xs:double", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-after", 2, "$arg1 as xs:string, $arg2 as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-after", 3, "$arg1 as xs:string, $arg2 as xs:string, $collation as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-before", 2, "$arg1 as xs:string, $arg2 as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-before", 3, "$arg1 as xs:string, $arg2 as xs:string, $collation as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "sum", 1, "$arg as xs:anyAtomicType", "xs:anyAtomicType"));
        fnMap.putValue(ns("fn"), bif("fn", "sum", 2, "$arg as xs:anyAtomicType, $zero as xs:anyAtomicType", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "tail", 1, "$arg as item()", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "timezone-from-date", 1, "$arg as xs:date", "xs:dayTimeDuration?"));
        fnMap.putValue(ns("fn"), bif("fn", "timezone-from-dateTime", 1, "$arg as xs:dateTime", "xs:dayTimeDuration?"));
        fnMap.putValue(ns("fn"), bif("fn", "timezone-from-time", 1, "$arg as xs:time", "xs:dayTimeDuration?"));
        fnMap.putValue(ns("fn"), bif("fn", "tokenize", 2, "$input as xs:string, $pattern as xs:string", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "tokenize", 3, "$input as xs:string, $pattern as xs:string, $flags as xs:string", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "trace", 2, "$value as item(), $label as xs:string", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "translate", 3, "$arg as xs:string, $mapString as xs:string, $transString as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "true", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "unordered", 1, "$sourceSeq as item()", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text", 1, "$href as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text", 1, "$href as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text", 2, "$href as xs:string, $encoding as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text", 2, "$href as xs:string, $encoding as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-available", 1, "$href as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-available", 1, "$href as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-available", 2, "$href as xs:string, $encoding as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-available", 2, "$href as xs:string, $encoding as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-lines", 1, "$href as xs:string", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-lines", 2, "$href as xs:string, $encoding as xs:string", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "unparsed-text-lines", 2, "$href as xs:string, $encoding as xs:string", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "upper-case", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "uri-collection", 0, "", "xs:anyURI*"));
        fnMap.putValue(ns("fn"), bif("fn", "uri-collection", 0, "", "xs:anyURI*"));
        fnMap.putValue(ns("fn"), bif("fn", "uri-collection", 1, "$arg as xs:string", "xs:anyURI*"));
        fnMap.putValue(ns("fn"), bif("fn", "uri-collection", 1, "$arg as xs:string", "xs:anyURI*"));
        fnMap.putValue(ns("fn"), bif("fn", "year-from-date", 1, "$arg as xs:date", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "years-from-duration", 1, "$arg as xs:duration", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "zero-or-one", 1, "$arg as item()", "item()?"));
        fnMap.putValue(ns("ft"), bif("ft", "current-compare-options", 0, "", "object()"));
        fnMap.putValue(ns("ft"), bif("ft", "current-lang", 0, "", "xs:language"));
        fnMap.putValue(ns("ft"), bif("ft", "host-lang", 0, "", "xs:language"));
        fnMap.putValue(ns("ft"), bif("ft", "is-stem-lang-supported", 1, "$lang as xs:language", "xs:boolean"));
        fnMap.putValue(ns("ft"), bif("ft", "is-stop-word", 1, "$word as xs:string", "xs:boolean"));
        fnMap.putValue(ns("ft"), bif("ft", "is-stop-word", 2, "$word as xs:string, $lang as xs:language", "xs:boolean"));
        fnMap.putValue(ns("ft"), bif("ft", "is-stop-word-lang-supported", 1, "$lang as xs:language", "xs:boolean"));
        fnMap.putValue(ns("ft"), bif("ft", "is-thesaurus-lang-supported", 1, "$lang as xs:language", "xs:boolean"));
        fnMap.putValue(ns("ft"), bif("ft", "is-thesaurus-lang-supported", 2, "$uri as xs:string, $lang as xs:language", "xs:boolean"));
        fnMap.putValue(ns("ft"), bif("ft", "is-tokenizer-lang-supported", 1, "$lang as xs:language", "xs:boolean"));
        fnMap.putValue(ns("ft"), bif("ft", "stem", 1, "$word as xs:string", "xs:string"));
        fnMap.putValue(ns("ft"), bif("ft", "stem", 2, "$word as xs:string, $lang as xs:language", "xs:string"));
        fnMap.putValue(ns("ft"), bif("ft", "strip-diacritics", 1, "$string as xs:string", "xs:string"));
        fnMap.putValue(ns("ft"), bif("ft", "thesaurus-lookup", 1, "$phrase as xs:string", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "thesaurus-lookup", 2, "$uri as xs:string, $phrase as xs:string", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "thesaurus-lookup", 3, "$uri as xs:string, $phrase as xs:string, $lang as xs:language", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "thesaurus-lookup", 4, "$uri as xs:string, $phrase as xs:string, $lang as xs:language, $relationship as xs:string", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "thesaurus-lookup", 6, "$uri as xs:string, $phrase as xs:string, $lang as xs:language, $relationship as xs:string, $level-least as xs:integer, $level-most as xs:integer ", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenize-node", 1, "$node as node()", "object()*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenize-node", 2, "$node as node(), $lang as xs:language", "object()*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenize-nodes", 2, "$includes as node(), $excludes as node()", "object()*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenize-nodes", 3, "$includes as node(), $excludes as node(), $lang as xs:language", "object()*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenize-string", 1, "$string as xs:string", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenize-string", 2, "$string as xs:string, $lang as xs:language", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenizer-properties", 0, "", "object()"));
        fnMap.putValue(ns("ft"), bif("ft", "tokenizer-properties", 1, "$lang as xs:language", "object()"));
        fnMap.putValue(ns("functx"), bif("functx", "add-attributes", 3, "$elements as element(*), $attrNames as xs:QName, $attrValues as xs:anyAtomicType", "element(*)?"));
        fnMap.putValue(ns("functx"), bif("functx", "add-months", 2, "$date as xs:anyAtomicType, $months as xs:integer", "xs:date?"));
        fnMap.putValue(ns("functx"), bif("functx", "add-or-update-attributes", 3, "$elements as element(*), $attrNames as xs:QName, $attrValues as xs:anyAtomicType", "element(*)?"));
        fnMap.putValue(ns("functx"), bif("functx", "all-whitespace", 1, "$arg as xs:string", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "are-distinct-values", 1, "$seq as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "atomic-type", 1, "$values as xs:anyAtomicType", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "avg-empty-is-zero", 2, "$values as xs:anyAtomicType, $allNodes as node()", "xs:double"));
        fnMap.putValue(ns("functx"), bif("functx", "between-exclusive", 3, "$value as xs:anyAtomicType, $minValue as xs:anyAtomicType, $maxValue as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "between-inclusive", 3, "$value as xs:anyAtomicType, $minValue as xs:anyAtomicType, $maxValue as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "camel-case-to-words", 2, "$arg as xs:string, $delim as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "capitalize-first", 1, "$arg as xs:string", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "change-element-names-deep", 3, "$nodes as node(), $oldNames as xs:QName, $newNames as xs:QName", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "change-element-ns", 3, "$elements as element(*), $newns as xs:string, $prefix as xs:string", "element(*)?"));
        fnMap.putValue(ns("functx"), bif("functx", "change-element-ns-deep", 3, "$nodes as node(), $newns as xs:string, $prefix as xs:string", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "chars", 1, "$arg as xs:string", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "contains-any-of", 2, "$arg as xs:string, $searchStrings as xs:string", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "contains-case-insensitive", 2, "$arg as xs:string, $substring as xs:string", "xs:boolean?"));
        fnMap.putValue(ns("functx"), bif("functx", "contains-word", 2, "$arg as xs:string, $word as xs:string", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "copy-attributes", 2, "$copyTo as element(*), $copyFrom as element(*)", "element(*)"));
        fnMap.putValue(ns("functx"), bif("functx", "date", 3, "$year as xs:anyAtomicType, $month as xs:anyAtomicType, $day as xs:anyAtomicType", "xs:date"));
        fnMap.putValue(ns("functx"), bif("functx", "dateTime", 6, "$year as xs:anyAtomicType, $month as xs:anyAtomicType, $day as xs:anyAtomicType, $hour as xs:anyAtomicType, $minute as xs:anyAtomicType, $second as xs:anyAtomicType ", "xs:dateTime"));
        fnMap.putValue(ns("functx"), bif("functx", "day-in-year", 1, "$date as xs:anyAtomicType", "xs:integer?"));
        fnMap.putValue(ns("functx"), bif("functx", "day-of-week", 1, "$date as xs:anyAtomicType", "xs:integer?"));
        fnMap.putValue(ns("functx"), bif("functx", "day-of-week-abbrev-en", 1, "$date as xs:anyAtomicType", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "day-of-week-name-en", 1, "$date as xs:anyAtomicType", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "dayTimeDuration", 4, "$days as xs:decimal, $hours as xs:decimal, $minutes as xs:decimal, $seconds as xs:decimal", "xs:dayTimeDuration"));
        fnMap.putValue(ns("functx"), bif("functx", "days-in-month", 1, "$date as xs:anyAtomicType", "xs:integer?"));
        fnMap.putValue(ns("functx"), bif("functx", "depth-of-node", 1, "$node as node()", "xs:integer"));
        fnMap.putValue(ns("functx"), bif("functx", "distinct-attribute-names", 1, "$nodes as node()", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "distinct-deep", 1, "$nodes as node()", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "distinct-element-names", 1, "$nodes as node()", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "distinct-element-paths", 1, "$nodes as node()", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "distinct-nodes", 1, "$nodes as node()", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "duration-from-timezone", 1, "$timezone as xs:string", "xs:dayTimeDuration"));
        fnMap.putValue(ns("functx"), bif("functx", "dynamic-path", 2, "$parent as node(), $path as xs:string", "item()*"));
        fnMap.putValue(ns("functx"), bif("functx", "escape-for-regex", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "exclusive-or", 2, "$arg1 as xs:boolean, $arg2 as xs:boolean", "xs:boolean?"));
        fnMap.putValue(ns("functx"), bif("functx", "first-day-of-month", 1, "$date as xs:anyAtomicType", "xs:date?"));
        fnMap.putValue(ns("functx"), bif("functx", "first-day-of-year", 1, "$date as xs:anyAtomicType", "xs:date?"));
        fnMap.putValue(ns("functx"), bif("functx", "first-node", 1, "$nodes as node()", "node()?"));
        fnMap.putValue(ns("functx"), bif("functx", "follows-not-descendant", 2, "$a as node(), $b as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "format-as-title-en", 1, "$titles as xs:string", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "fragment-from-uri", 1, "$uri as xs:string", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "get-matches", 2, "$string as xs:string, $regex as xs:string", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "get-matches-and-non-matches", 2, "$string as xs:string, $regex as xs:string", "element(*)*"));
        fnMap.putValue(ns("functx"), bif("functx", "has-element-only-content", 1, "$element as element(*)", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "has-empty-content", 1, "$element as element(*)", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "has-mixed-content", 1, "$element as element(*)", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "has-simple-content", 1, "$element as element(*)", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "id-from-element", 1, "$element as element(*)", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "id-untyped", 2, "$node as node(), $id as xs:anyAtomicType", "element(*)*"));
        fnMap.putValue(ns("functx"), bif("functx", "if-absent", 2, "$arg as item(), $value as item()", "item()*"));
        fnMap.putValue(ns("functx"), bif("functx", "if-empty", 2, "$arg as item(), $value as item()", "item()*"));
        fnMap.putValue(ns("functx"), bif("functx", "index-of-deep-equal-node", 2, "$nodes as node(), $nodeToFind as node()", "xs:integer*"));
        fnMap.putValue(ns("functx"), bif("functx", "index-of-match-first", 2, "$arg as xs:string, $pattern as xs:string", "xs:integer?"));
        fnMap.putValue(ns("functx"), bif("functx", "index-of-node", 2, "$nodes as node(), $nodeToFind as node()", "xs:integer*"));
        fnMap.putValue(ns("functx"), bif("functx", "index-of-string", 2, "$arg as xs:string, $substring as xs:string", "xs:integer*"));
        fnMap.putValue(ns("functx"), bif("functx", "index-of-string-first", 2, "$arg as xs:string, $substring as xs:string", "xs:integer?"));
        fnMap.putValue(ns("functx"), bif("functx", "index-of-string-last", 2, "$arg as xs:string, $substring as xs:string", "xs:integer?"));
        fnMap.putValue(ns("functx"), bif("functx", "insert-string", 3, "$originalString as xs:string, $stringToInsert as xs:string, $pos as xs:integer", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "is-a-number", 1, "$value as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "is-absolute-uri", 1, "$uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "is-ancestor", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "is-descendant", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "is-leap-year", 1, "$date as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "is-node-among-descendants", 2, "$node as node(), $seq as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "is-node-among-descendants-deep-equal", 2, "$node as node(), $seq as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "is-node-in-sequence", 2, "$node as node(), $seq as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "is-node-in-sequence-deep-equal", 2, "$node as node(), $seq as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "is-value-in-sequence", 2, "$value as xs:anyAtomicType, $seq as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "last-day-of-month", 1, "$date as xs:anyAtomicType", "xs:date?"));
        fnMap.putValue(ns("functx"), bif("functx", "last-day-of-year", 1, "$date as xs:anyAtomicType", "xs:date?"));
        fnMap.putValue(ns("functx"), bif("functx", "last-node", 1, "$nodes as node()", "node()?"));
        fnMap.putValue(ns("functx"), bif("functx", "leaf-elements", 1, "$root as node()", "element(*)*"));
        fnMap.putValue(ns("functx"), bif("functx", "left-trim", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "line-count", 1, "$arg as xs:string", "xs:integer"));
        fnMap.putValue(ns("functx"), bif("functx", "lines", 1, "$arg as xs:string", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "max-depth", 1, "$root as node()", "xs:integer?"));
        fnMap.putValue(ns("functx"), bif("functx", "max-determine-type", 1, "$seq as xs:anyAtomicType", "xs:anyAtomicType?"));
        fnMap.putValue(ns("functx"), bif("functx", "max-line-length", 1, "$arg as xs:string", "xs:integer"));
        fnMap.putValue(ns("functx"), bif("functx", "max-node", 1, "$nodes as node()", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "max-string", 1, "$strings as xs:anyAtomicType", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "min-determine-type", 1, "$seq as xs:anyAtomicType", "xs:anyAtomicType?"));
        fnMap.putValue(ns("functx"), bif("functx", "min-node", 1, "$nodes as node()", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "min-non-empty-string", 1, "$strings as xs:string", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "min-string", 1, "$strings as xs:anyAtomicType", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "mmddyyyy-to-date", 1, "$dateString as xs:string", "xs:date?"));
        fnMap.putValue(ns("functx"), bif("functx", "month-abbrev-en", 1, "$date as xs:anyAtomicType", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "month-name-en", 1, "$date as xs:anyAtomicType", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "name-test", 2, "$testname as xs:string, $names as xs:string", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "namespaces-in-use", 1, "$root as node()", "xs:anyURI*"));
        fnMap.putValue(ns("functx"), bif("functx", "next-day", 1, "$date as xs:anyAtomicType", "xs:date?"));
        fnMap.putValue(ns("functx"), bif("functx", "node-kind", 1, "$nodes as node()", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "non-distinct-values", 1, "$seq as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("functx"), bif("functx", "number-of-matches", 2, "$arg as xs:string, $pattern as xs:string", "xs:integer"));
        fnMap.putValue(ns("functx"), bif("functx", "open-ref-document", 1, "$refNode as node()", "document()"));
        fnMap.putValue(ns("functx"), bif("functx", "ordinal-number-en", 1, "$num as xs:integer", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "pad-integer-to-length", 2, "$integerToPad as xs:anyAtomicType, $length as xs:integer", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "pad-string-to-length", 3, "$stringToPad as xs:string, $padChar as xs:string, $length as xs:integer", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "path-to-node", 1, "$nodes as node()", "xs:string*"));
        fnMap.putValue(ns("functx"), bif("functx", "path-to-node-with-pos", 1, "$node as node()", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "precedes-not-ancestor", 2, "$a as node(), $b as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "previous-day", 1, "$date as xs:anyAtomicType", "xs:date?"));
        fnMap.putValue(ns("functx"), bif("functx", "remove-attributes", 2, "$elements as element(*), $names as xs:string", "element(*)"));
        fnMap.putValue(ns("functx"), bif("functx", "remove-attributes-deep", 2, "$nodes as node(), $names as xs:string", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "remove-elements", 2, "$elements as element(*), $names as xs:string", "element(*)*"));
        fnMap.putValue(ns("functx"), bif("functx", "remove-elements-deep", 2, "$nodes as node(), $names as xs:string", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "remove-elements-not-contents", 2, "$nodes as node(), $names as xs:string", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "repeat-string", 2, "$stringToRepeat as xs:string, $count as xs:integer", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "replace-beginning", 3, "$arg as xs:string, $pattern as xs:string, $replacement as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "replace-element-values", 2, "$elements as element(*), $values as xs:anyAtomicType", "element(*)*"));
        fnMap.putValue(ns("functx"), bif("functx", "replace-first", 3, "$arg as xs:string, $pattern as xs:string, $replacement as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "replace-multi", 3, "$arg as xs:string, $changeFrom as xs:string, $changeTo as xs:string", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "reverse-string", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "right-trim", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "scheme-from-uri", 1, "$uri as xs:string", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "sequence-deep-equal", 2, "$seq1 as item(), $seq2 as item()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "sequence-node-equal", 2, "$seq1 as node(), $seq2 as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "sequence-node-equal-any-order", 2, "$seq1 as node(), $seq2 as node()", "xs:boolean"));
        fnMap.putValue(ns("functx"), bif("functx", "sequence-type", 1, "$items as item()", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "siblings", 1, "$node as node()", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "siblings-same-name", 1, "$element as element(*)", "element(*)*"));
        fnMap.putValue(ns("functx"), bif("functx", "sort", 1, "$seq as item()", "item()*"));
        fnMap.putValue(ns("functx"), bif("functx", "sort-as-numeric", 1, "$seq as item()", "item()*"));
        fnMap.putValue(ns("functx"), bif("functx", "sort-case-insensitive", 1, "$seq as item()", "item()*"));
        fnMap.putValue(ns("functx"), bif("functx", "sort-document-order", 1, "$seq as node()", "node()*"));
        fnMap.putValue(ns("functx"), bif("functx", "substring-after-if-contains", 2, "$arg as xs:string, $delim as xs:string", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "substring-after-last", 2, "$arg as xs:string, $delim as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "substring-after-last-match", 2, "$arg as xs:string, $regex as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "substring-after-match", 2, "$arg as xs:string, $regex as xs:string", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "substring-before-if-contains", 2, "$arg as xs:string, $delim as xs:string", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "substring-before-last", 2, "$arg as xs:string, $delim as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "substring-before-last-match", 2, "$arg as xs:string, $regex as xs:string", "xs:string?"));
        fnMap.putValue(ns("functx"), bif("functx", "substring-before-match", 2, "$arg as xs:string, $regex as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "time", 3, "$hour as xs:anyAtomicType, $minute as xs:anyAtomicType, $second as xs:anyAtomicType", "xs:time"));
        fnMap.putValue(ns("functx"), bif("functx", "timezone-from-duration", 1, "$duration as xs:dayTimeDuration", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "total-days-from-duration", 1, "$duration as xs:dayTimeDuration", "xs:decimal?"));
        fnMap.putValue(ns("functx"), bif("functx", "total-hours-from-duration", 1, "$duration as xs:dayTimeDuration", "xs:decimal?"));
        fnMap.putValue(ns("functx"), bif("functx", "total-minutes-from-duration", 1, "$duration as xs:dayTimeDuration", "xs:decimal?"));
        fnMap.putValue(ns("functx"), bif("functx", "total-months-from-duration", 1, "$duration as xs:yearMonthDuration", "xs:decimal?"));
        fnMap.putValue(ns("functx"), bif("functx", "total-seconds-from-duration", 1, "$duration as xs:dayTimeDuration", "xs:decimal?"));
        fnMap.putValue(ns("functx"), bif("functx", "total-years-from-duration", 1, "$duration as xs:yearMonthDuration", "xs:decimal?"));
        fnMap.putValue(ns("functx"), bif("functx", "trim", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "update-attributes", 3, "$elements as element(*), $attrNames as xs:QName, $attrValues as xs:anyAtomicType", "element(*)?"));
        fnMap.putValue(ns("functx"), bif("functx", "value-except", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("functx"), bif("functx", "value-intersect", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("functx"), bif("functx", "value-union", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("functx"), bif("functx", "word-count", 1, "$arg as xs:string", "xs:integer"));
        fnMap.putValue(ns("functx"), bif("functx", "words-to-camel-case", 1, "$arg as xs:string", "xs:string"));
        fnMap.putValue(ns("functx"), bif("functx", "wrap-values-in-elements", 2, "$values as xs:anyAtomicType, $elementName as xs:QName", "element(*)*"));
        fnMap.putValue(ns("functx"), bif("functx", "yearMonthDuration", 2, "$years as xs:decimal, $months as xs:integer", "xs:yearMonthDuration"));
        fnMap.putValue(ns("geo"), bif("geo", "area", 1, "$geometry as element(*)", "xs:double"));
        fnMap.putValue(ns("geo"), bif("geo", "as-binary", 1, "$geometry as element(*)", "xs:base64Binary"));
        fnMap.putValue(ns("geo"), bif("geo", "as-text", 1, "$geometry as element(*)", "xs:string"));
        fnMap.putValue(ns("geo"), bif("geo", "boundary", 1, "$geometry as element(*)", "element(*)*"));
        fnMap.putValue(ns("geo"), bif("geo", "bounding-polygons", 2, "$polyhedral-surface as element(gml:Surface), $polygon as element(*)", "element(gml:PolygonPatch)*"));
        fnMap.putValue(ns("geo"), bif("geo", "buffer", 2, "$geometry as element(*), $distance as xs:double", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "centroid", 1, "$geometry as element(*)", "element(gml:Point)"));
        fnMap.putValue(ns("geo"), bif("geo", "contains", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "convex-hull", 1, "$geometry as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "coordinate-dimension", 1, "$geometry as element(*)", "xs:integer"));
        fnMap.putValue(ns("geo"), bif("geo", "covers", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "crosses", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "difference", 2, "$geometry1 as element(*), $geometry2 as element(*)", "element(*)?"));
        fnMap.putValue(ns("geo"), bif("geo", "dimension", 1, "$geometry as element(*)", "xs:integer"));
        fnMap.putValue(ns("geo"), bif("geo", "disjoint", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "distance", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:double"));
        fnMap.putValue(ns("geo"), bif("geo", "end-point", 1, "$line as element(*)", "element(gml:Point)"));
        fnMap.putValue(ns("geo"), bif("geo", "envelope", 1, "$geometry as element(*)", "element(gml:Envelope)"));
        fnMap.putValue(ns("geo"), bif("geo", "equals", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "exterior-ring", 1, "$polygon as element(gml:Polygon)", "element(gml:LinearRing)"));
        fnMap.putValue(ns("geo"), bif("geo", "geometry-n", 2, "$geometry as element(*), $n as xs:unsignedInt", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "geometry-type", 1, "$geometry as element(*)", "xs:QName?"));
        fnMap.putValue(ns("geo"), bif("geo", "interior-ring-n", 2, "$polygon as element(gml:Polygon), $n as xs:unsignedInt", "element(gml:LinearRing)"));
        fnMap.putValue(ns("geo"), bif("geo", "intersection", 2, "$geometry1 as element(*), $geometry2 as element(*)", "element(*)?"));
        fnMap.putValue(ns("geo"), bif("geo", "intersects", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-3d", 1, "$geometry as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-closed", 1, "$geom as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-empty", 1, "$geometry as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-measured", 1, "$geometry as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-ring", 1, "$line as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-simple", 1, "$geometry as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "is-within-distance", 3, "$geometry1 as element(*), $geometry2 as element(*), $distance as xs:double", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "length", 1, "$geometry as element(*)", "xs:double"));
        fnMap.putValue(ns("geo"), bif("geo", "m", 1, "$point as element(gml:Point)", "xs:double?"));
        fnMap.putValue(ns("geo"), bif("geo", "num-geometries", 1, "$geometry as element(*)", "xs:unsignedInt"));
        fnMap.putValue(ns("geo"), bif("geo", "num-interior-ring", 1, "$polygon as element(gml:Polygon)", "xs:unsignedInt"));
        fnMap.putValue(ns("geo"), bif("geo", "num-patches", 1, "$polyhedral-surface as element(gml:Surface)", "xs:integer"));
        fnMap.putValue(ns("geo"), bif("geo", "num-points", 1, "$line as element(*)", "xs:unsignedInt"));
        fnMap.putValue(ns("geo"), bif("geo", "overlaps", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "patch-n", 2, "$polyhedral-surface as element(gml:Surface), $n as xs:unsignedInt", "element(gml:PolygonPatch)"));
        fnMap.putValue(ns("geo"), bif("geo", "point-n", 2, "$line as element(*), $n as xs:unsignedInt", "element(gml:Point)"));
        fnMap.putValue(ns("geo"), bif("geo", "point-on-surface", 1, "$geometry as element(*)", "element(gml:Point)"));
        fnMap.putValue(ns("geo"), bif("geo", "relate", 3, "$geometry1 as element(*), $geometry2 as element(*), $intersection_matrix as xs:string", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "srid", 1, "$geometry as element(*)", "xs:anyURI?"));
        fnMap.putValue(ns("geo"), bif("geo", "start-point", 1, "$line as element(*)", "element(gml:Point)"));
        fnMap.putValue(ns("geo"), bif("geo", "sym-difference", 2, "$geometry1 as element(*), $geometry2 as element(*)", "element(*)?"));
        fnMap.putValue(ns("geo"), bif("geo", "touches", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "union", 2, "$geometry1 as element(*), $geometry2 as element(*)", "element(*)"));
        fnMap.putValue(ns("geo"), bif("geo", "within", 2, "$geometry1 as element(*), $geometry2 as element(*)", "xs:boolean"));
        fnMap.putValue(ns("geo"), bif("geo", "x", 1, "$point as element(gml:Point)", "xs:double"));
        fnMap.putValue(ns("geo"), bif("geo", "y", 1, "$point as element(gml:Point)", "xs:double"));
        fnMap.putValue(ns("geo"), bif("geo", "z", 1, "$point as element(gml:Point)", "xs:double?"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "deg-to-dms", 1, "$deg as xs:double", "xs:string"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "deg-to-rad", 1, "$deg as xs:double", "xs:double"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "dms-to-deg", 1, "$dms as xs:string", "xs:double"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "omerc-gmlpos-to-wgs84", 4, "$lat_0 as xs:double, $long_c as xs:double, $k0 as xs:double, $gmlposs as element(gml:pos)", "element(geoproj-param:latlong)*"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "omerc-to-wgs84", 4, "$lat-0 as xs:double, $long-c as xs:double, $k0 as xs:double, $coords as element(geoproj-param:coord) ", "element(geoproj-param:latlong)*"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "omerc-to-wgs84-validated", 4, "$lat_0 as xs:double, $long_c as xs:double, $k0 as xs:double, $coords as element(geoproj-param:coord,geoproj-param:coordType) ", "element(geoproj-param:latlong)*"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "proj-phi2", 2, "$ts as xs:double, $e as xs:double", "xs:double"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "proj-phi2-helper", 4, "$i as xs:integer, $ts as xs:double, $e as xs:double, $prev_phi as xs:double", "xs:double"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "proj-tsfn", 1, "$phi as xs:double", "xs:double"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "rad-to-deg", 1, "$rad as xs:double", "xs:double"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "wgs84-to-omerc", 4, "$lat-0 as xs:double, $long-c as xs:double, $k0 as xs:double, $lat-long-degrees as element(geoproj-param:latlong) ", "element(geoproj-param:coord)*"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "wgs84-to-omerc-gmlpos", 4, "$lat-0 as xs:double, $long-c as xs:double, $k0 as xs:double, $lat-long-degrees as element(geoproj-param:latlong) ", "element(gml:pos)*"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "wgs84-to-omerc-gmlpos-validated", 4, "$lat_0 as xs:double, $long_c as xs:double, $k0 as xs:double, $lat_long_degrees as element(geoproj-param:latlong,geoproj-param:latlongType) ", "element(gml:pos)*"));
        fnMap.putValue(ns("geoproj"), bif("geoproj", "wgs84-to-omerc-validated", 4, "$lat_0 as xs:double, $long_c as xs:double, $k0 as xs:double, $lat_long_degrees as element(geoproj-param:latlong,geoproj-param:latlongType) ", "element(geoproj-param:coord)*"));
        fnMap.putValue(ns("hash"), bif("hash", "hash", 2, "$value as xs:string, $alg as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hash"), bif("hash", "hash-binary", 2, "$value as xs:base64Binary, $alg as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hash"), bif("hash", "md5", 1, "$value as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hash"), bif("hash", "md5-binary", 1, "$value as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("hash"), bif("hash", "sha1", 1, "$value as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hash"), bif("hash", "sha1-binary", 1, "$value as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("hmac"), bif("hmac", "compute", 3, "$message as xs:string, $secret-key as xs:string, $alg as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hmac"), bif("hmac", "compute-binary", 3, "$message as xs:base64Binary, $secret-key as xs:string, $hash-algo as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hmac"), bif("hmac", "md5", 2, "$message as xs:string, $secret-key as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hmac"), bif("hmac", "md5-binary", 2, "$message as xs:base64Binary, $secret-key as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hmac"), bif("hmac", "sha1", 2, "$message as xs:string, $secret-key as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("hmac"), bif("hmac", "sha1-binary", 2, "$message as xs:base64Binary, $secret-key as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("html"), bif("html", "parse", 1, "$html as xs:string", "document()"));
        fnMap.putValue(ns("html"), bif("html", "parse", 2, "$html as xs:string, $options as element(html-options:options)", "document()"));
        fnMap.putValue(ns("http"), bif("http", "delete", 1, "$href as string", "object()"));
        fnMap.putValue(ns("http"), bif("http", "get", 1, "$href as string", "object()"));
        fnMap.putValue(ns("http"), bif("http", "get-binary", 1, "$href as string", "object()"));
        fnMap.putValue(ns("http"), bif("http", "get-text", 1, "$href as string", "object()"));
        fnMap.putValue(ns("http"), bif("http", "head", 1, "$href as string", "object()"));
        fnMap.putValue(ns("http"), bif("http", "options", 1, "$href as string", "string*"));
        fnMap.putValue(ns("http"), bif("http", "post", 2, "$href as string, $body as atomic", "object()"));
        fnMap.putValue(ns("http"), bif("http", "post", 3, "$href as string, $body as atomic, $content-type as string", "object()"));
        fnMap.putValue(ns("http"), bif("http", "put", 2, "$href as string, $body as atomic", "object()"));
        fnMap.putValue(ns("http"), bif("http", "put", 3, "$href as string, $body as atomic, $content-type as string", "object()"));
        fnMap.putValue(ns("http"), bif("http", "send-nondeterministic-request", 1, "$request as object()", "object()"));
        fnMap.putValue(ns("http"), bif("http", "send-request", 1, "$request as object()", "object()"));
        fnMap.putValue(ns("icddl"), bif("icddl", "activate", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("icddl"), bif("icddl", "activated-integrity-constraints", 0, "", "xs:QName*"));
        fnMap.putValue(ns("icddl"), bif("icddl", "deactivate", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("icddl"), bif("icddl", "declared-integrity-constraints", 0, "", "xs:QName*"));
        fnMap.putValue(ns("icddl"), bif("icddl", "is-activated-integrity-constraint", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("icddl"), bif("icddl", "is-declared-integrity-constraint", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("icdml"), bif("icdml", "check-integrity-constraint", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("iddl"), bif("iddl", "available-indexes", 0, "", "xs:QName*"));
        fnMap.putValue(ns("iddl"), bif("iddl", "create", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("iddl"), bif("iddl", "declared-indexes", 0, "", "xs:QName*"));
        fnMap.putValue(ns("iddl"), bif("iddl", "delete", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("iddl"), bif("iddl", "is-available-index", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("iddl"), bif("iddl", "is-declared-index", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("idml"), bif("idml", "keys", 1, "$name as xs:QName", "node()*"));
        fnMap.putValue(ns("idml"), bif("idml", "probe-index-point-general", 2, "$name as xs:QName, $key as xs:anyAtomicType", "node()*"));
        fnMap.putValue(ns("idml"), bif("idml", "probe-index-point-value", 2, "$name as xs:QName, $key_i as xs:anyAtomicType", "node()*"));
        fnMap.putValue(ns("idml"), bif("idml", "probe-index-point-value-skip", 3, "$name as xs:QName, $skip as xs:integer, $key_i as xs:anyAtomicType", "node()*"));
        fnMap.putValue(ns("idml"), bif("idml", "probe-index-range-general", 7, "$name as xs:QName, $lowerBound as xs:anyAtomicType, $upperBound as xs:anyAtomicType, $haveLowerBound as xs:boolean, $haveUpperBound as xs:boolean, $lowerBoundIncluded as xs:boolean, $upperBoundIncluded as xs:boolean ", "node()*"));
        fnMap.putValue(ns("idml"), bif("idml", "probe-index-range-value", 7, "$name as xs:QName, $lowerBound-i as xs:anyAtomicType, $upperBound-i as xs:anyAtomicType, $haveLowerBound-i as xs:boolean, $haveUpperBound-i as xs:boolean, $lowerBoundIncluded-i as xs:boolean, $upperBoundIncluded-i as xs:boolean ", "node()*"));
        fnMap.putValue(ns("idml"), bif("idml", "probe-index-range-value-skip", 8, "$name as xs:QName, $skip as xs:integer, $lowerBound-i as xs:anyAtomicType, $upperBound-i as xs:anyAtomicType, $haveLowerBound-i as xs:boolean, $haveUpperBound-i as xs:boolean, $lowerBoundIncluded-i as xs:boolean, $upperBoundIncluded-i as xs:boolean ", "node()*"));
        fnMap.putValue(ns("idml"), bif("idml", "refresh-index", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("imap"), bif("imap", "copy", 5, "$host-info as element(email:hostInfo), $mailbox-from as xs:string, $mailbox-to as xs:string, $messages as xs:long, $uid as xs:boolean ", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "copy-impl", 6, "$host-info as element(email:hostInfo), $mailbox-from as xs:string, $mailbox-to as xs:string, $messages as xs:long, $uid as xs:boolean, $copy as xs:boolean ", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "create", 2, "$host-info as element(email:hostInfo), $mailbox-name as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "create-impl", 2, "$host-info as element(email:hostInfo), $mailbox-name as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "delete", 2, "$host-info as element(email:hostInfo), $mailbox-name as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "delete-impl", 2, "$host-info as element(email:hostInfo), $mailbox-name as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "expunge", 2, "$host-info as element(email:hostInfo), $mailbox as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "expunge-impl", 2, "$host-info as element(email:hostInfo), $mailbox as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-envelope", 4, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long, $uid as xs:boolean ", "element(email:envelope)"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-envelope-impl", 4, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long, $uid as xs:boolean ", "element(email:envelope)"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-flags", 4, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long, $uid as xs:boolean ", "element(email:flags)"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-flags-impl", 4, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long, $uid as xs:boolean ", "element(email:flags)"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-from", 3, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long", "xs:string"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-from-impl", 3, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long", "xs:string"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-message", 4, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long, $uid as xs:boolean ", "element(email:message)"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-message-impl", 4, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long, $uid as xs:boolean ", "element(*)"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-message-sequence-number", 3, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long", "xs:long"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-message-sequence-number-impl", 3, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long", "xs:long"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-subject", 3, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long", "xs:string"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-subject-impl", 3, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long", "xs:string"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-uid", 3, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long", "xs:long"));
        fnMap.putValue(ns("imap"), bif("imap", "fetch-uid-impl", 3, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long", "xs:long"));
        fnMap.putValue(ns("imap"), bif("imap", "list", 4, "$host-info as element(email:hostInfo), $mailbox-ref as xs:string, $pattern as xs:string, $only-subscribed as xs:boolean ", "element(email:mailbox)*"));
        fnMap.putValue(ns("imap"), bif("imap", "list-impl", 4, "$host-info as element(email:hostInfo), $mailbox-ref as xs:string, $pattern as xs:string, $only-subscribed as xs:boolean ", "xs:string*"));
        fnMap.putValue(ns("imap"), bif("imap", "move", 5, "$host-info as element(email:hostInfo), $mailbox-from as xs:string, $mailbox-to as xs:string, $messages as xs:long, $uid as xs:boolean ", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "rename", 3, "$host-info as element(email:hostInfo), $mailbox-old as xs:string, $mailbox-new as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "rename-impl", 3, "$host-info as element(email:hostInfo), $mailbox-old as xs:string, $mailbox-new as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "search", 4, "$host-info as element(email:hostInfo), $mailbox as xs:string, $criteria as xs:string, $uid as xs:boolean ", "xs:long*"));
        fnMap.putValue(ns("imap"), bif("imap", "search-impl", 4, "$host-info as element(email:hostInfo), $mailbox as xs:string, $criteria as xs:string, $uid as xs:boolean ", "xs:long*"));
        fnMap.putValue(ns("imap"), bif("imap", "set-flags", 5, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long, $flags as element(email:flags), $uid as xs:boolean ", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "set-flags-impl", 5, "$host-info as element(email:hostInfo), $mailbox as xs:string, $message-number as xs:long, $flags as element(email:flags), $uid as xs:boolean ", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "status", 2, "$host-info as element(email:hostInfo), $mailbox as xs:string", "element(email:status)"));
        fnMap.putValue(ns("imap"), bif("imap", "status-impl", 2, "$host-info as element(email:hostInfo), $mailbox as xs:string", "xs:string*"));
        fnMap.putValue(ns("imap"), bif("imap", "subscribe", 2, "$host-info as element(email:hostInfo), $mailbox as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "subscribe-impl", 2, "$host-info as element(email:hostInfo), $mailbox as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "unsubscribe", 2, "$host-info as element(email:hostInfo), $mailbox as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("imap"), bif("imap", "unsubscribe-impl", 2, "$host-info as element(email:hostInfo), $mailbox as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("item"), bif("item", "size", 1, "$item as item()", "xs:integer"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "affected-rows", 1, "$dataset-id as xs:anyURI", "xs:integer"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "clear-params", 1, "$prepared-statement as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "close-dataset", 1, "$dataset-id as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "close-prepared", 1, "$prepared-statement as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "commit", 1, "$connection-id as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "connect", 1, "$connection-config as object()", "xs:anyURI"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "connect", 2, "$connection-config as object(), $options as object()", "xs:anyURI"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "connection-options", 1, "$connection-id as xs:anyURI", "object()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "execute", 2, "$connection-id as xs:anyURI, $sql as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "execute-prepared", 1, "$prepared-statement as xs:anyURI", "xs:anyURI"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "execute-query", 2, "$connection-id as xs:anyURI, $sql as xs:string", "object()*"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "execute-query-prepared", 1, "$prepared-statement as xs:anyURI", "object()*"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "execute-update", 2, "$connection-id as xs:anyURI, $sql as xs:string", "xs:integer"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "execute-update-prepared", 1, "$prepared-statement as xs:anyURI", "xs:integer"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "is-connected", 1, "$connection-id as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "metadata", 1, "$dataset-id as xs:anyURI", "object()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "parameter-metadata", 1, "$prepared-statement as xs:anyURI", "object()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "prepare-statement", 2, "$connection-id as xs:anyURI, $sql as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "result-set", 1, "$dataset-id as xs:anyURI", "object()*"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "rollback", 1, "$connection-id as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "set-boolean", 3, "$prepared-statement as xs:anyURI, $parameter-index as xs:integer, $value as xs:boolean", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "set-null", 2, "$prepared-statement as xs:anyURI, $parameter-index as xs:integer", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "set-numeric", 3, "$prepared-statement as xs:anyURI, $parameter-index as xs:decimal, $value as xs:anyAtomicType", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "set-string", 3, "$prepared-statement as xs:anyURI, $parameter-index as xs:integer, $value as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "set-value", 3, "$prepared-statement as xs:anyURI, $parameter-index as xs:decimal, $value as xs:anyAtomicType", "empty-sequence()"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "tables", 1, "$connection-id as xs:anyURI", "object()*"));
        fnMap.putValue(ns("jdbc"), bif("jdbc", "tables", 4, "$connection-id as xs:anyURI, $catalog as xs:string, $schema as xs:string, $table as xs:string", "object()*"));
        fnMap.putValue(ns("jn"), bif("jn", "decode-from-roundtrip", 1, "$items as item()", "item()*"));
        fnMap.putValue(ns("jn"), bif("jn", "decode-from-roundtrip", 2, "$items as item(), $options as object()", "item()*"));
        fnMap.putValue(ns("jn"), bif("jn", "encode-for-roundtrip", 1, "$items as item()", "item()*"));
        fnMap.putValue(ns("jn"), bif("jn", "encode-for-roundtrip", 2, "$items as item(), $options as object()", "item()*"));
        fnMap.putValue(ns("jn"), bif("jn", "flatten", 1, "$items as item()", "item()*"));
        fnMap.putValue(ns("jn"), bif("jn", "keys", 1, "$o as item()", "string*"));
        fnMap.putValue(ns("jn"), bif("jn", "members", 1, "$a as item()", "item()*"));
        fnMap.putValue(ns("jn"), bif("jn", "null", 0, "", "js:null"));
        fnMap.putValue(ns("jn"), bif("jn", "parse-json", 1, "$j as string", "json-item()*"));
        fnMap.putValue(ns("jn"), bif("jn", "parse-json", 2, "$j as string, $o as object()", "json-item()*"));
        fnMap.putValue(ns("jn"), bif("jn", "project", 2, "$items as item(), $keys as string", "item()*"));
        fnMap.putValue(ns("jn"), bif("jn", "size", 1, "$a as array()", "integer?"));
        fnMap.putValue(ns("jn"), bif("jn", "trim", 2, "$items as item(), $keys as string", "item()*"));
        fnMap.putValue(ns("jsv"), bif("jsv", "check-array-type", 2, "$jstypes as object(), $type as object()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "check-atomic-type", 2, "$jstypes as object(), $type as object()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "check-object-type", 2, "$jstypes as object(), $type as object()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "check-ref-type", 2, "$jstypes as object(), $type as string", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "check-type", 2, "$jstypes as object(), $type as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "check-types", 2, "$jstypes as object(), $types as array()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "check-union-type", 2, "$jstypes as object(), $type as object()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "get-type-name", 1, "$type as object()", "string"));
        fnMap.putValue(ns("jsv"), bif("jsv", "jsd-valid", 3, "$ns as string, $name as string, $instance as json-item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "jsd-valid", 4, "$jsd as object(), $name as string, $ns as string, $instance as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "save-type", 2, "$jstypes as object(), $type as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "validate-array-type", 3, "$jstypes as object(), $type as object(), $instance as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "validate-atomic-type", 3, "$jstypes as object(), $type as object(), $instance as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "validate-enumeration", 3, "$jstypes as object(), $type as object(), $instance as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "validate-instance", 3, "$jstypes as object(), $name as string, $instance as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "validate-object-type", 3, "$jstypes as object(), $type as object(), $instance as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "validate-type", 3, "$jstypes as object(), $type as item(), $instance as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "validate-type-ref", 3, "$jstypes as object(), $type as string, $instance as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "validate-union-type", 3, "$jstypes as object(), $type as object(), $instance as item()", "boolean"));
        fnMap.putValue(ns("jsv"), bif("jsv", "value-except", 2, "$arg1 as xs:anyAtomicType, $arg2 as xs:anyAtomicType", "xs:anyAtomicType*"));
        fnMap.putValue(ns("jx"), bif("jx", "json-to-xml", 1, "$json as json-item()", "element(*,xs:untyped)?"));
        fnMap.putValue(ns("jx"), bif("jx", "json-to-xml", 2, "$json as json-item(), $options as object()", "element(*,xs:untyped)?"));
        fnMap.putValue(ns("jx"), bif("jx", "json-to-xml-internal", 2, "$json as json-item(), $options as object()", "element(*)*"));
        fnMap.putValue(ns("jx"), bif("jx", "xml-to-json", 1, "$xml as item()", "json-item()*"));
        fnMap.putValue(ns("jx"), bif("jx", "xml-to-json", 2, "$xml as item(), $options as object()", "json-item()*"));
        fnMap.putValue(ns("jx"), bif("jx", "xml-to-json-internal", 2, "$xml as item(), $options as object()", "json-item()*"));
        fnMap.putValue(ns("libjn"), bif("libjn", "accumulate", 1, "$items as item()", "object()"));
        fnMap.putValue(ns("libjn"), bif("libjn", "descendant-arrays", 1, "$items as item()", "array()*"));
        fnMap.putValue(ns("libjn"), bif("libjn", "descendant-arrays-priv", 1, "$i as item()", "array()*"));
        fnMap.putValue(ns("libjn"), bif("libjn", "descendant-objects", 1, "$items as item()", "object()*"));
        fnMap.putValue(ns("libjn"), bif("libjn", "descendant-objects-priv", 1, "$i as item()", "object()*"));
        fnMap.putValue(ns("libjn"), bif("libjn", "descendant-pairs", 1, "$items as item()", "object()*"));
        fnMap.putValue(ns("libjn"), bif("libjn", "descendant-pairs-priv", 1, "$i as item()", "object()*"));
        fnMap.putValue(ns("libjn"), bif("libjn", "intersect", 1, "$items as item()", "object()"));
        fnMap.putValue(ns("libjn"), bif("libjn", "values", 1, "$items as item()", "item()*"));
        fnMap.putValue(ns("man"), bif("man", "add-noise", 2, "$image as xs:base64Binary, $noise-type as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "add-noise-impl", 2, "$image as xs:base64Binary, $noise-type as image:noiseType", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "blur", 3, "$image as xs:base64Binary, $radius as xs:int, $sigma as xs:int", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "charcoal", 3, "$image as xs:base64Binary, $radius as xs:double, $sigma as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "chop", 3, "$image as xs:base64Binary, $upper-left-x as xs:unsignedInt, $upper-left-y as xs:unsignedInt", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "contrast", 2, "$image as xs:base64Binary, $sharpen as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "crop", 3, "$image as xs:base64Binary, $lower-right-x as xs:unsignedInt, $lower-right-y as xs:unsignedInt ", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "despeckle", 1, "$image as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "edge", 2, "$image as xs:base64Binary, $radius as xs:unsignedInt", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "emboss", 3, "$image as xs:base64Binary, $radius as xs:double, $sigma as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "enhance", 1, "$image as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "equalize", 1, "$image as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "erase", 1, "$image as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "flip", 1, "$image as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "flop", 1, "$image as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "gamma", 2, "$image as xs:base64Binary, $gamma-value as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "gamma", 4, "$image as xs:base64Binary, $gamma-red as xs:double, $gamma-green as xs:double, $gamma-blue as xs:double ", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "implode", 2, "$image as xs:base64Binary, $factor as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "oil-paint", 2, "$image as xs:base64Binary, $radius as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "overlay", 5, "$image as xs:base64Binary, $overlay-image as xs:base64Binary, $overlay-upper-left-x as xs:unsignedInt, $overlay-upper-left-y as xs:unsignedInt, $operator as xs:string ", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "overlay-impl", 5, "$image as xs:base64Binary, $overlay-image as xs:base64Binary, $overlay-upper-left-x as xs:unsignedInt, $overlay-upper-left-y as xs:unsignedInt, $operator as image:compositeOperatorType ", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "reduce-noise", 2, "$image as xs:base64Binary, $order as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "resize", 3, "$image as xs:base64Binary, $width as xs:unsignedInt, $height as xs:unsignedInt", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "rotate", 2, "$image as xs:base64Binary, $angle as xs:int", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "solarize", 2, "$image as xs:base64Binary, $factor as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "stereo", 2, "$left-image as xs:base64Binary, $right-image as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "sub-image", 5, "$image as xs:base64Binary, $left-upper-x as xs:unsignedInt, $left-upper-y as xs:unsignedInt, $width as xs:unsignedInt, $height as xs:unsignedInt ", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "swirl", 2, "$image as xs:base64Binary, $degree as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "transparent", 2, "$image as xs:base64Binary, $color as xs:string", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "transparent-impl", 2, "$image as xs:base64Binary, $color as image:colorType", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "trim", 1, "$image as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "watermark", 2, "$image as xs:base64Binary, $watermark as xs:base64Binary", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "zoom", 2, "$image as xs:base64Binary, $ratio as xs:double", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "zoom-by-height", 2, "$image as xs:base64Binary, $height as xs:unsignedInt", "xs:base64Binary"));
        fnMap.putValue(ns("man"), bif("man", "zoom-by-width", 2, "$image as xs:base64Binary, $width as xs:unsignedInt", "xs:base64Binary"));
        fnMap.putValue(ns("map"), bif("map", "available-maps", 0, "", "string*"));
        fnMap.putValue(ns("map"), bif("map", "create", 2, "$name as string, $key-types as item()", "empty-sequence()"));
        fnMap.putValue(ns("map"), bif("map", "create", 3, "$name as string, $key-types as item(), $options as object()", "empty-sequence()"));
        fnMap.putValue(ns("map"), bif("map", "delete", 2, "$name as string, $key as item()", "empty-sequence()"));
        fnMap.putValue(ns("map"), bif("map", "drop", 1, "$name as string", "empty-sequence()"));
        fnMap.putValue(ns("map"), bif("map", "get", 2, "$map as object(), $key as string", "item()"));
        fnMap.putValue(ns("map"), bif("map", "get", 2, "$name as string, $key as item()", "item()*"));
        fnMap.putValue(ns("map"), bif("map", "has-key", 2, "$map as object(), $key as string", "boolean"));
        fnMap.putValue(ns("map"), bif("map", "insert", 3, "$name as string, $key as item(), $value as item()", "empty-sequence()"));
        fnMap.putValue(ns("map"), bif("map", "keys", 1, "$name as string", "array()*"));
        fnMap.putValue(ns("map"), bif("map", "options", 1, "$name as string", "object()"));
        fnMap.putValue(ns("map"), bif("map", "set", 3, "$map as object(), $key as xs:string, $value as item()", "boolean"));
        fnMap.putValue(ns("map"), bif("map", "set-if-empty", 3, "$map as object(), $key as xs:string, $value as item()", "boolean"));
        fnMap.putValue(ns("map"), bif("map", "size", 1, "$name as string", "integer"));
        fnMap.putValue(ns("math"), bif("math", "acos", 1, "$arg as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "acosh", 1, "$arg as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "asin", 1, "$arg as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "asinh", 1, "$arg as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "atan", 1, "$arg as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "atan2", 2, "$y as xs:double, $x as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "atanh", 1, "$arg as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "avedev", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "cast-as-numeric", 1, "$number as anyAtomicType", "anyAtomicType"));
        fnMap.putValue(ns("math"), bif("math", "ceiling", 2, "$number as double, $significance as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "cos", 1, "$theta as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "cosh", 1, "$arg as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "deg-to-rad", 1, "$deg as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "even", 1, "$number as double", "integer"));
        fnMap.putValue(ns("math"), bif("math", "exp", 1, "$arg as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "exp10", 1, "$arg as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "fact", 1, "$number as integer", "integer"));
        fnMap.putValue(ns("math"), bif("math", "fact-integer", 1, "$intnum as integer", "integer"));
        fnMap.putValue(ns("math"), bif("math", "factdouble", 1, "$number as integer", "integer"));
        fnMap.putValue(ns("math"), bif("math", "floor", 2, "$number as double, $significance as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "fmod", 2, "$x as double, $y as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "frexp", 1, "$arg as double", "double+"));
        fnMap.putValue(ns("math"), bif("math", "gcd", 1, "$numbers as integer", "integer"));
        fnMap.putValue(ns("math"), bif("math", "int", 1, "$number as double", "integer"));
        fnMap.putValue(ns("math"), bif("math", "is-a-number", 1, "$value as anyAtomicType", "boolean"));
        fnMap.putValue(ns("math"), bif("math", "is_inf", 1, "$arg as double", "boolean"));
        fnMap.putValue(ns("math"), bif("math", "is_nan", 1, "$arg as double", "boolean"));
        fnMap.putValue(ns("math"), bif("math", "iterate-all-gcd", 3, "$numbers as integer, $min-nonzero as integer, $iteration as integer", "integer"));
        fnMap.putValue(ns("math"), bif("math", "large", 2, "$numbers as double, $k as integer", "double"));
        fnMap.putValue(ns("math"), bif("math", "lcm", 1, "$numbers as integer", "integer"));
        fnMap.putValue(ns("math"), bif("math", "ldexp", 2, "$x as double, $i as integer", "double"));
        fnMap.putValue(ns("math"), bif("math", "log", 1, "$arg as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "log10", 1, "$arg as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "median", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "min-without-zero", 1, "$numbers as integer", "integer"));
        fnMap.putValue(ns("math"), bif("math", "mod", 2, "$number as double, $divisor as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "mode", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "modf", 1, "$arg as double", "double+"));
        fnMap.putValue(ns("math"), bif("math", "mround", 2, "$number as decimal, $multiple as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "odd", 1, "$number as double", "integer"));
        fnMap.putValue(ns("math"), bif("math", "percentile", 2, "$numbers as double, $k_at as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "percentrank", 2, "$numbers as double, $x as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "pi", 0, "", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "pow", 2, "$x as xs:double, $y as numeric", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "prob", 3, "$x_range as double, $prob_range as double, $range_lower_limit as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "prob", 4, "$x_range as double, $prob_range as double, $range_lower_limit as double, $upper_limit as double ", "double"));
        fnMap.putValue(ns("math"), bif("math", "product", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "product-internal", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "quartile", 2, "$numbers as double, $quart as integer", "double"));
        fnMap.putValue(ns("math"), bif("math", "quotient", 2, "$numerator as double, $denominator as double", "integer"));
        fnMap.putValue(ns("math"), bif("math", "rad-to-deg", 1, "$rad as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "rank", 2, "$x as double, $numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "rank", 3, "$x as double, $numbers as double, $order_ascending as boolean", "double"));
        fnMap.putValue(ns("math"), bif("math", "roman", 1, "$number as integer", "string"));
        fnMap.putValue(ns("math"), bif("math", "round", 2, "$number as double, $precision as integer", "double"));
        fnMap.putValue(ns("math"), bif("math", "rounddown", 2, "$number as double, $precision as integer", "double"));
        fnMap.putValue(ns("math"), bif("math", "roundup", 2, "$number as double, $precision as integer", "double"));
        fnMap.putValue(ns("math"), bif("math", "sign", 1, "$number as double", "integer"));
        fnMap.putValue(ns("math"), bif("math", "sin", 1, "$theta as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "sinh", 1, "$arg as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "slope", 2, "$known_y as double, $known_x as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "small", 2, "$numbers as double, $k as integer", "double"));
        fnMap.putValue(ns("math"), bif("math", "sort-numbers", 1, "$numbers as double", "double*"));
        fnMap.putValue(ns("math"), bif("math", "sqrt", 1, "$arg as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "standardize", 3, "$x as double, $mean as double, $standard_dev as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "stdev", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "stdeva", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "stdevp", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "stdevpa", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "subtotal", 2, "$function_num as integer, $numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "sum-deviations", 2, "$numbers as double, $average as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "sum-prob", 1, "$prob_range as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "sum-prob-x", 4, "$x_range as double, $prob_range as double, $range_lower_limit as double, $upper_limit as double ", "double"));
        fnMap.putValue(ns("math"), bif("math", "sum-x-y-deviations", 4, "$x_numbers as double, $x_average as double, $y_numbers as double, $y_average as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "sumproduct", 2, "$array1 as double, $array2 as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "sumsq", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "sumsq-deviations", 2, "$numbers as double, $average as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "tan", 1, "$theta as xs:double", "xs:double?"));
        fnMap.putValue(ns("math"), bif("math", "tanh", 1, "$arg as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "trunc", 1, "$number as double", "integer"));
        fnMap.putValue(ns("math"), bif("math", "trunc", 2, "$number as double, $precision as integer", "double"));
        fnMap.putValue(ns("math"), bif("math", "try-exact-divide", 2, "$numbers as integer, $divider as integer", "boolean"));
        fnMap.putValue(ns("math"), bif("math", "var", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "vara", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "varp", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("math"), bif("math", "varpa", 1, "$numbers as double", "double"));
        fnMap.putValue(ns("node"), bif("node", "ancestor-of", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("node"), bif("node", "child-of", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("node"), bif("node", "copy", 1, "$input as node()", "node()*"));
        fnMap.putValue(ns("node"), bif("node", "descendant-of", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("node"), bif("node", "following-of", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("node"), bif("node", "following-sibling-of", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("node"), bif("node", "least-common-ancestor", 2, "$node1 as node(), $node2 as node()", "node()?"));
        fnMap.putValue(ns("node"), bif("node", "level", 1, "$node as node()", "xs:integer"));
        fnMap.putValue(ns("node"), bif("node", "parent-of", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("node"), bif("node", "preceding-of", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("node"), bif("node", "preceding-sibling-of", 2, "$node1 as node(), $node2 as node()", "xs:boolean"));
        fnMap.putValue(ns("normalization"), bif("normalization", "check-date", 1, "$date as xs:string", "xs:string"));
        fnMap.putValue(ns("normalization"), bif("normalization", "check-dateTime", 1, "$dateTime as xs:string", "xs:string"));
        fnMap.putValue(ns("normalization"), bif("normalization", "check-time", 1, "$Time as xs:string", "xs:string"));
        fnMap.putValue(ns("normalization"), bif("normalization", "month-dictionary", 0, "", "element(*)"));
        fnMap.putValue(ns("normalization"), bif("normalization", "normalize-address", 1, "$addr as xs:string", "xs:string*"));
        fnMap.putValue(ns("normalization"), bif("normalization", "normalize-phone", 1, "$addr as xs:string", "xs:string*"));
        fnMap.putValue(ns("normalization"), bif("normalization", "timeZone-dictionary", 0, "", "element(*)"));
        fnMap.putValue(ns("normalization"), bif("normalization", "to-date", 2, "$sd as xs:string, $format as xs:string", "xs:string"));
        fnMap.putValue(ns("normalization"), bif("normalization", "to-dateTime", 2, "$sd as xs:string, $format as xs:string", "xs:string"));
        fnMap.putValue(ns("normalization"), bif("normalization", "to-time", 2, "$sd as xs:string, $format as xs:string", "xs:string?"));
        fnMap.putValue(ns("nosql"), bif("nosql", "connect", 1, "$options as object()", "xs:anyURI"));
        fnMap.putValue(ns("nosql"), bif("nosql", "connect-internal", 2, "$store-name as xs:string, $helper-host-ports as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("nosql"), bif("nosql", "delete", 2, "$db as xs:anyURI, $key as xs:string", "xs:boolean"));
        fnMap.putValue(ns("nosql"), bif("nosql", "get", 2, "$db as xs:anyURI, $key as xs:string", "xs:string"));
        fnMap.putValue(ns("nosql"), bif("nosql", "get-binary", 2, "$db as xs:anyURI, $key as object()", "object()?"));
        fnMap.putValue(ns("nosql"), bif("nosql", "get-text", 2, "$db as xs:anyURI, $key as object()", "object()?"));
        fnMap.putValue(ns("nosql"), bif("nosql", "multi-get-binary", 5, "$db as xs:anyURI, $parent-key as object(), $sub-range as object(), $depth as xs:string, $direction as xs:string ", "object()*"));
        fnMap.putValue(ns("nosql"), bif("nosql", "multi-get-text", 5, "$db as xs:anyURI, $parent-key as object(), $sub-range as object(), $depth as xs:string, $direction as xs:string ", "object()*"));
        fnMap.putValue(ns("nosql"), bif("nosql", "multi-remove", 4, "$db as xs:anyURI, $parent-key as object(), $sub-range as object(), $depth as xs:string", "xs:int"));
        fnMap.putValue(ns("nosql"), bif("nosql", "put", 3, "$db as xs:anyURI, $key as xs:string, $value as xs:string", "xs:long"));
        fnMap.putValue(ns("nosql"), bif("nosql", "put-binary", 3, "$db as xs:anyURI, $key as object(), $value as xs:base64Binary", "xs:long"));
        fnMap.putValue(ns("nosql"), bif("nosql", "put-text", 3, "$db as xs:anyURI, $key as object(), $string-value as xs:string", "xs:long"));
        fnMap.putValue(ns("nosql"), bif("nosql", "remove", 2, "$db as xs:anyURI, $key as object()", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "ancestor-of", 2, "$pos1 as xs:anyURI, $pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "attribute-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "child-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "descendant-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "following-in-document-order-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "following-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "following-sibling-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "in-collection", 1, "$n-pos as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "in-same-collection-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "in-same-tree-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "in-subtree-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "is-attribute", 1, "$n-pos1 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "is-comment", 1, "$n-pos1 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "is-document", 1, "$n-pos1 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "is-element", 1, "$n-pos1 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "is-processing-instruction", 1, "$n-pos1 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "is-text", 1, "$n-pos1 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "level", 1, "$n-pos as xs:anyURI", "xs:integer"));
        fnMap.putValue(ns("np"), bif("np", "node-position", 1, "$arg as node()", "xs:anyURI"));
        fnMap.putValue(ns("np"), bif("np", "parent-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "preceding-in-document-order-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "preceding-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "preceding-sibling-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("np"), bif("np", "sibling-of", 2, "$n-pos1 as xs:anyURI, $n-pos2 as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("oauth"), bif("oauth", "access-token", 2, "$service-provider as schema-element(sp:service-provider), $parameters as schema-element(p:parameters) ", "schema-element(p:parameters)"));
        fnMap.putValue(ns("oauth"), bif("oauth", "access-token", 9, "$consumer-key as xs:string, $consumer-secret as xs:string, $signature-method as xs:string, $realm as xs:string, $oauth-token as xs:string, $oauth-token-secret as xs:string, $method as xs:string, $token-request-uri as xs:string, $additional-parameters as element(p:parameters) ", "element(p:parameters)"));
        fnMap.putValue(ns("oauth"), bif("oauth", "add-parameter", 3, "$parameters as schema-element(p:parameters), $name as xs:string, $value as xs:string", "schema-element(p:parameters)"));
        fnMap.putValue(ns("oauth"), bif("oauth", "additional-parameters", 1, "$parameters as element(p:parameters)", "element(p:parameters)?"));
        fnMap.putValue(ns("oauth"), bif("oauth", "authorization-header", 3, "$params as element(p:parameters), $realm as xs:string, $signature as xs:string", "xs:string"));
        fnMap.putValue(ns("oauth"), bif("oauth", "format-request", 8, "$consumer-key as xs:string, $consumer-secret as xs:string, $protected-resource as element(http:request), $oauth-token as xs:string, $oauth-token-secret as xs:string, $realm as xs:string, $signature-method as xs:string, $additional-parameters as element(p:parameters) ", "item()*"));
        fnMap.putValue(ns("oauth"), bif("oauth", "format-request", 9, "$consumer-key as xs:string, $consumer-secret as xs:string, $protected-resource as element(http:request), $oauth-token as xs:string, $oauth-token-secret as xs:string, $realm as xs:string, $signature-method as xs:string, $additional-parameters as element(p:parameters), $format-params as xs:boolean ", "item()*"));
        fnMap.putValue(ns("oauth"), bif("oauth", "http-request", 6, "$consumer-secret as xs:string, $protected-resource as element(http:request), $oauth-token-secret as xs:string, $params as element(p:parameters), $realm as xs:string, $signature-method as xs:string ", "item()*"));
        fnMap.putValue(ns("oauth"), bif("oauth", "key", 2, "$oauth-consumer-secret as xs:string, $oauth-token-secret as xs:string", "xs:string"));
        fnMap.putValue(ns("oauth"), bif("oauth", "nonce", 0, "", "xs:string"));
        fnMap.putValue(ns("oauth"), bif("oauth", "normalization", 4, "$params as schema-element(p:parameters), $divide as xs:string, $option as xs:string, $comma as xs:string ", "xs:string"));
        fnMap.putValue(ns("oauth"), bif("oauth", "parameter", 2, "$params as schema-element(p:parameters), $string as xs:string", "xs:string"));
        fnMap.putValue(ns("oauth"), bif("oauth", "parameters", 2, "$name as xs:string, $value as xs:string", "element(p:parameters)"));
        fnMap.putValue(ns("oauth"), bif("oauth", "parse-parameters", 1, "$input as xs:string", "element(p:parameters)"));
        fnMap.putValue(ns("oauth"), bif("oauth", "protected-resource", 3, "$protected-resource as schema-element(http:request), $service-provider as schema-element(sp:service-provider), $parameters as schema-element(p:parameters) ", "item()*"));
        fnMap.putValue(ns("oauth"), bif("oauth", "protected-resource", 8, "$consumer-key as xs:string, $consumer-secret as xs:string, $signature-method as xs:string, $oauth-token as xs:string, $oauth-token-secret as xs:string, $realm as xs:string, $protected-resource as schema-element(http:request), $additional-parameters as element(p:parameters) ", "item()*"));
        fnMap.putValue(ns("oauth"), bif("oauth", "request-token", 1, "$service-provider as schema-element(sp:service-provider)", "schema-element(p:parameters)"));
        fnMap.putValue(ns("oauth"), bif("oauth", "request-token", 2, "$service-provider as schema-element(sp:service-provider), $parameters as schema-element(p:parameters) ", "schema-element(p:parameters)"));
        fnMap.putValue(ns("oauth"), bif("oauth", "request-token", 8, "$consumer-key as xs:string, $consumer-secret as xs:string, $signature-method as xs:string, $method as xs:string, $realm as xs:string, $temporary-credential-request as xs:string, $callback-url as xs:string, $additional-parameters as element(p:parameters) ", "element(p:parameters)"));
        fnMap.putValue(ns("oauth"), bif("oauth", "service-provider", 10, "$consumer-key as xs:string, $consumer-secret as xs:string, $signature-method as xs:string, $realm as xs:string, $authorize-url as xs:string, $request-token-method as xs:string, $request-token-url as xs:string, $request-token-callback-url as xs:string, $access-token-method as xs:string, $access-token-url as xs:string ", "schema-element(sp:service-provider)"));
        fnMap.putValue(ns("oauth"), bif("oauth", "signature", 3, "$base-string as xs:string, $oauth-signature-method as xs:string, $key as xs:string", "xs:string"));
        fnMap.putValue(ns("oauth"), bif("oauth", "signature-base-string", 3, "$http-method as xs:string, $base-uri as xs:string, $params as element(p:parameters)", "xs:string"));
        fnMap.putValue(ns("oauth"), bif("oauth", "timestamp", 0, "", "xs:decimal"));
        fnMap.putValue(ns("p"), bif("p", "exec", 1, "$filename as string", "object()"));
        fnMap.putValue(ns("p"), bif("p", "exec", 2, "$filename as string, $args as string", "object()"));
        fnMap.putValue(ns("p"), bif("p", "exec", 3, "$filename as string, $args as string, $env as string", "object()"));
        fnMap.putValue(ns("p"), bif("p", "exec-command", 1, "$cmd as string", "object()"));
        fnMap.putValue(ns("p"), bif("p", "exec-command", 2, "$cmd as string, $args as string", "object()"));
        fnMap.putValue(ns("paint"), bif("paint", "paint", 2, "$image as xs:base64Binary, $shapes as object()", "xs:base64Binary"));
        fnMap.putValue(ns("paint"), bif("paint", "paint-impl", 2, "$image as xs:base64Binary, $shapes as object()", "xs:base64Binary"));
        fnMap.putValue(ns("queue"), bif("queue", "back", 1, "$name as xs:QName", "structured-item()?"));
        fnMap.putValue(ns("queue"), bif("queue", "copy", 2, "$destName as xs:QName, $sourceName as xs:QName", "empty-sequence()"));
        fnMap.putValue(ns("queue"), bif("queue", "create", 1, "$name as xs:QName", "empty-sequence()"));
        fnMap.putValue(ns("queue"), bif("queue", "empty", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("queue"), bif("queue", "front", 1, "$name as xs:QName", "structured-item()?"));
        fnMap.putValue(ns("queue"), bif("queue", "pop", 1, "$name as xs:QName", "structured-item()?"));
        fnMap.putValue(ns("queue"), bif("queue", "push", 2, "$name as xs:QName, $value as structured-item()", "empty-sequence()"));
        fnMap.putValue(ns("queue"), bif("queue", "size", 1, "$name as xs:QName", "xs:integer"));
        fnMap.putValue(ns("r"), bif("r", "random", 0, "", "integer"));
        fnMap.putValue(ns("r"), bif("r", "random", 1, "$num as integer", "integer*"));
        fnMap.putValue(ns("r"), bif("r", "random-between", 2, "$lower as integer, $upper as integer", "integer"));
        fnMap.putValue(ns("r"), bif("r", "random-between", 3, "$lower as integer, $upper as integer, $num as integer", "integer*"));
        fnMap.putValue(ns("r"), bif("r", "seeded-random", 2, "$seed as integer, $num as integer", "integer*"));
        fnMap.putValue(ns("r"), bif("r", "seeded-random-between", 4, "$seed as integer, $lower as integer, $upper as integer, $num as integer", "integer*"));
        fnMap.putValue(ns("r"), bif("r", "uuid", 0, "", "string"));
        fnMap.putValue(ns("read-pdf"), bif("read-pdf", "extract-text", 2, "$pdf as xs:base64Binary, $options as element(rp-options:extract-text-options)", "xs:string"));
        fnMap.putValue(ns("read-pdf"), bif("read-pdf", "extract-text-internal", 2, "$pdf as xs:base64Binary, $options as element(rp-options:extract-text-options,rp-options:extract-text-optionsType) ", "xs:string"));
        fnMap.putValue(ns("read-pdf"), bif("read-pdf", "render-to-images", 2, "$pdf as xs:base64Binary, $options as element(rp-options:render-to-images-options)", "xs:base64Binary*"));
        fnMap.putValue(ns("read-pdf"), bif("read-pdf", "render-to-images-internal", 2, "$pdf as xs:base64Binary, $options as element(rp-options:render-to-images-options,rp-options:render-to-images-optionsType) ", "xs:base64Binary*"));
        fnMap.putValue(ns("reflection"), bif("reflection", "eval", 1, "$query as xs:string", "item()*"));
        fnMap.putValue(ns("reflection"), bif("reflection", "eval-n", 1, "$query as xs:string", "item()*"));
        fnMap.putValue(ns("reflection"), bif("reflection", "eval-s", 1, "$query as xs:string", "item()*"));
        fnMap.putValue(ns("reflection"), bif("reflection", "eval-u", 1, "$query as xs:string", ""));
        fnMap.putValue(ns("reflection"), bif("reflection", "invoke", 1, "$name as xs:QName", "item()*"));
        fnMap.putValue(ns("reflection"), bif("reflection", "invoke-n", 1, "$name as xs:QName", "item()*"));
        fnMap.putValue(ns("reflection"), bif("reflection", "invoke-s", 1, "$name as xs:QName", "item()*"));
        fnMap.putValue(ns("reflection"), bif("reflection", "invoke-u", 1, "$name as xs:QName", ""));
        fnMap.putValue(ns("s"), bif("s", "clear-params", 1, "$pstmnt as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("s"), bif("s", "close-prepared", 1, "$pstmnt as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("s"), bif("s", "commit", 1, "$conn as xs:anyURI", "xs:anyURI"));
        fnMap.putValue(ns("s"), bif("s", "connect", 1, "$db-name as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("s"), bif("s", "connect", 2, "$db-name as xs:string, $options as object()", "xs:anyURI"));
        fnMap.putValue(ns("s"), bif("s", "execute-query", 2, "$conn as xs:anyURI, $sqlstr as xs:string", "object()*"));
        fnMap.putValue(ns("s"), bif("s", "execute-query-prepared", 1, "$pstmnt as xs:anyURI", "object()*"));
        fnMap.putValue(ns("s"), bif("s", "execute-update", 2, "$conn as xs:anyURI, $sqlstr as xs:string", "xs:integer"));
        fnMap.putValue(ns("s"), bif("s", "execute-update-prepared", 1, "$pstmnt as xs:anyURI", "xs:integer"));
        fnMap.putValue(ns("s"), bif("s", "is-connected", 1, "$conn as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("s"), bif("s", "metadata", 1, "$pstmnt as xs:anyURI", "object()"));
        fnMap.putValue(ns("s"), bif("s", "prepare-statement", 2, "$conn as xs:anyURI, $stmnt as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("s"), bif("s", "rollback", 1, "$conn as xs:anyURI", "xs:anyURI"));
        fnMap.putValue(ns("s"), bif("s", "set-boolean", 3, "$pstmnt as xs:anyURI, $param-num as xs:integer, $val as xs:boolean", "empty-sequence()"));
        fnMap.putValue(ns("s"), bif("s", "set-null", 2, "$pstmnt as xs:anyURI, $param-num as xs:integer", "empty-sequence()"));
        fnMap.putValue(ns("s"), bif("s", "set-numeric", 3, "$pstmnt as xs:anyURI, $param-num as xs:integer, $val as xs:anyAtomicType", "empty-sequence()"));
        fnMap.putValue(ns("s"), bif("s", "set-string", 3, "$pstmnt as xs:anyURI, $param-num as xs:integer, $val as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("s"), bif("s", "set-value", 3, "$pstmnt as xs:anyURI, $param-num as xs:integer, $val as item()", "empty-sequence()"));
        fnMap.putValue(ns("schema"), bif("schema", "is-validated", 1, "$node as node()", "xs:boolean"));
        fnMap.putValue(ns("schema"), bif("schema", "schema-type", 1, "$item as item()", "xs:QName?"));
        fnMap.putValue(ns("schema"), bif("schema", "validate-in-place", 1, "$node as node()", ""));
        fnMap.putValue(ns("schema-tools"), bif("schema-tools", "inst2xsd", 2, "$instances as element(*), $options as element(st-options:inst2xsd-options)", "document()*"));
        fnMap.putValue(ns("schema-tools"), bif("schema-tools", "inst2xsd-internal", 2, "$instances as element(*), $options as element(st-options:inst2xsd-options,st-options:inst2xsdOptionsType) ", "document()*"));
        fnMap.putValue(ns("schema-tools"), bif("schema-tools", "xsd2inst", 3, "$schemas as element(*), $rootElementName as xs:string, $options as element(st-options:xsd2inst-options) ", "document()"));
        fnMap.putValue(ns("schema-tools"), bif("schema-tools", "xsd2inst-internal", 3, "$schemas as element(*), $rootElementName as xs:string, $options as element(st-options:xsd2inst-options,st-options:xsd2instOptionsType) ", "document()"));
        fnMap.putValue(ns("sctx"), bif("sctx", "base-uri", 0, "", "xs:string?"));
        fnMap.putValue(ns("sctx"), bif("sctx", "boundary-space-policy", 0, "", "xs:string"));
        fnMap.putValue(ns("sctx"), bif("sctx", "construction-mode", 0, "", "xs:string"));
        fnMap.putValue(ns("sctx"), bif("sctx", "copy-namespaces-mode", 0, "", "xs:string+"));
        fnMap.putValue(ns("sctx"), bif("sctx", "default-collation", 0, "", "xs:string"));
        fnMap.putValue(ns("sctx"), bif("sctx", "default-collection-type", 0, "", "xs:string"));
        fnMap.putValue(ns("sctx"), bif("sctx", "default-function-namespace", 0, "", "xs:string"));
        fnMap.putValue(ns("sctx"), bif("sctx", "default-order", 0, "", "xs:string"));
        fnMap.putValue(ns("sctx"), bif("sctx", "function-annotations", 2, "$name as xs:QName, $arity as xs:integer", "xs:QName*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "function-arguments-count", 1, "$function as xs:QName", "xs:int*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "function-names", 0, "", "xs:QName*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "functions", 0, "", "object()*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "in-scope-attribute-declarations", 0, "", "xs:QName*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "in-scope-attribute-groups", 0, "", "xs:QName*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "in-scope-element-declarations", 0, "", "xs:QName*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "in-scope-element-groups", 0, "", "xs:QName*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "in-scope-schema-types", 0, "", "xs:QName*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "in-scope-variables", 0, "", "xs:QName*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "option", 1, "$name as xs:QName", "xs:string?"));
        fnMap.putValue(ns("sctx"), bif("sctx", "ordering-mode", 0, "", "xs:string"));
        fnMap.putValue(ns("sctx"), bif("sctx", "statically-known-collations", 0, "", "xs:anyURI*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "statically-known-document-type", 1, "$document as xs:string", "xs:QName"));
        fnMap.putValue(ns("sctx"), bif("sctx", "statically-known-documents", 0, "", "xs:anyURI*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "statically-known-namespace-binding", 1, "$prefix as xs:string", "xs:string?"));
        fnMap.putValue(ns("sctx"), bif("sctx", "statically-known-namespaces", 0, "", "xs:string*"));
        fnMap.putValue(ns("sctx"), bif("sctx", "xpath10-compatibility-mode", 0, "", "xs:boolean"));
        fnMap.putValue(ns("set"), bif("set", "deep-intersect", 2, "$s1, $s2", "item()*"));
        fnMap.putValue(ns("set"), bif("set", "deep-union", 2, "$s1, $s2", "item()*"));
        fnMap.putValue(ns("set"), bif("set", "dice", 2, "$s1, $s2", "xs:double"));
        fnMap.putValue(ns("set"), bif("set", "distinct", 1, "$s", "item()*"));
        fnMap.putValue(ns("set"), bif("set", "jaccard", 2, "$s1, $s2", "xs:double"));
        fnMap.putValue(ns("set"), bif("set", "overlap", 2, "$s1, $s2", "xs:double"));
        fnMap.putValue(ns("simc"), bif("simc", "edit-distance", 2, "$s1 as xs:string, $s2 as xs:string", "xs:integer"));
        fnMap.putValue(ns("simc"), bif("simc", "jaro", 2, "$s1 as xs:string, $s2 as xs:string", "xs:double"));
        fnMap.putValue(ns("simc"), bif("simc", "jaro-winkler", 4, "$s1 as xs:string, $s2 as xs:string, $prefix as xs:integer, $fact as xs:double", "xs:double"));
        fnMap.putValue(ns("simc"), bif("simc", "needleman-wunsch", 4, "$s1 as xs:string, $s2 as xs:string, $score as xs:integer, $penalty as xs:integer", "xs:double"));
        fnMap.putValue(ns("simc"), bif("simc", "smith-waterman", 4, "$s1 as xs:string, $s2 as xs:string, $score as xs:integer, $penalty as xs:integer", "xs:double"));
        fnMap.putValue(ns("simh"), bif("simh", "monge-elkan-jaro-winkler", 4, "$s1 as xs:string, $s2 as xs:string, $prefix as xs:integer, $fact as xs:double", "xs:double"));
        fnMap.putValue(ns("simh"), bif("simh", "soft-cosine-tokens-edit-distance", 4, "$s1 as xs:string, $s2 as xs:string, $r as xs:string, $t as xs:integer", "xs:double"));
        fnMap.putValue(ns("simh"), bif("simh", "soft-cosine-tokens-jaro", 4, "$s1 as xs:string, $s2 as xs:string, $r as xs:string, $t as xs:double", "xs:double"));
        fnMap.putValue(ns("simh"), bif("simh", "soft-cosine-tokens-jaro-winkler", 6, "$s1 as xs:string, $s2 as xs:string, $r as xs:string, $t as xs:double, $prefix as xs:integer, $fact as xs:double ", "xs:double"));
        fnMap.putValue(ns("simh"), bif("simh", "soft-cosine-tokens-metaphone", 3, "$s1 as xs:string, $s2 as xs:string, $r as xs:string", "xs:double"));
        fnMap.putValue(ns("simh"), bif("simh", "soft-cosine-tokens-soundex", 3, "$s1 as xs:string, $s2 as xs:string, $r as xs:string", "xs:double"));
        fnMap.putValue(ns("simp"), bif("simp", "metaphone", 2, "$s1 as xs:string, $s2 as xs:string", "xs:boolean"));
        fnMap.putValue(ns("simp"), bif("simp", "metaphone-key", 1, "$s1 as xs:string", "xs:string"));
        fnMap.putValue(ns("simp"), bif("simp", "soundex", 2, "$s1 as xs:string, $s2 as xs:string", "xs:boolean"));
        fnMap.putValue(ns("simp"), bif("simp", "soundex-key", 1, "$s1 as xs:string", "xs:string"));
        fnMap.putValue(ns("simt"), bif("simt", "cosine", 2, "$desc1 as xs:string, $desc2 as xs:string", "xs:double"));
        fnMap.putValue(ns("simt"), bif("simt", "cosine-ngrams", 3, "$s1 as xs:string, $s2 as xs:string, $n as xs:integer", "xs:double"));
        fnMap.putValue(ns("simt"), bif("simt", "cosine-tokens", 3, "$s1 as xs:string, $s2 as xs:string, $r as xs:string", "xs:double"));
        fnMap.putValue(ns("simt"), bif("simt", "dice-ngrams", 3, "$s1 as xs:string, $s2 as xs:string, $n as xs:integer", "xs:double"));
        fnMap.putValue(ns("simt"), bif("simt", "dice-tokens", 3, "$s1 as xs:string, $s2 as xs:string, $r as xs:string", "xs:double"));
        fnMap.putValue(ns("simt"), bif("simt", "jaccard-ngrams", 3, "$s1 as xs:string, $s2 as xs:string, $n as xs:integer", "xs:double"));
        fnMap.putValue(ns("simt"), bif("simt", "jaccard-tokens", 3, "$s1 as xs:string, $s2 as xs:string, $r as xs:string", "xs:double"));
        fnMap.putValue(ns("simt"), bif("simt", "ngrams", 2, "$s as xs:string, $n as xs:integer", "xs:string*"));
        fnMap.putValue(ns("simt"), bif("simt", "overlap-ngrams", 3, "$s1 as xs:string, $s2 as xs:string, $n as xs:integer", "xs:double"));
        fnMap.putValue(ns("simt"), bif("simt", "overlap-tokens", 3, "$s1 as xs:string, $s2 as xs:string, $r as xs:string", "xs:double"));
        fnMap.putValue(ns("smtp"), bif("smtp", "send", 2, "$host-info as element(email:hostInfo), $message as element(email:message)", "empty-sequence()"));
        fnMap.putValue(ns("smtp"), bif("smtp", "send-impl", 2, "$host-info as element(email:hostInfo), $message as element(email:message)", "empty-sequence()"));
        fnMap.putValue(ns("stack"), bif("stack", "copy", 2, "$destName as xs:QName, $sourceName as xs:QName", "empty-sequence()"));
        fnMap.putValue(ns("stack"), bif("stack", "create", 1, "$name as xs:QName", "empty-sequence()"));
        fnMap.putValue(ns("stack"), bif("stack", "empty", 1, "$name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("stack"), bif("stack", "pop", 1, "$name as xs:QName", "structured-item()?"));
        fnMap.putValue(ns("stack"), bif("stack", "push", 2, "$name as xs:QName, $value as structured-item()", "empty-sequence()"));
        fnMap.putValue(ns("stack"), bif("stack", "size", 1, "$name as xs:QName", "xs:integer"));
        fnMap.putValue(ns("stack"), bif("stack", "top", 1, "$name as xs:QName", "structured-item()?"));
        fnMap.putValue(ns("string"), bif("string", "analyze-string", 2, "$input as xs:string, $pattern as xs:string", "array()"));
        fnMap.putValue(ns("string"), bif("string", "analyze-string", 3, "$input as xs:string, $pattern as xs:string, $flags as xs:string", "array()"));
        fnMap.putValue(ns("string"), bif("string", "is-seekable", 1, "$s as string", "boolean"));
        fnMap.putValue(ns("string"), bif("string", "is-streamable", 1, "$s as string", "boolean"));
        fnMap.putValue(ns("string"), bif("string", "materialize", 1, "$s as string", "string"));
        fnMap.putValue(ns("string"), bif("string", "split", 2, "$s as string, $separator as string", "string*"));
        fnMap.putValue(ns("system"), bif("system", "all-properties", 0, "", "object()"));
        fnMap.putValue(ns("system"), bif("system", "properties", 0, "", "xs:string*"));
        fnMap.putValue(ns("system"), bif("system", "property", 1, "$key as xs:string", "xs:string?"));
        fnMap.putValue(ns("uri"), bif("uri", "decode", 1, "$u as xs:string", "xs:string"));
        fnMap.putValue(ns("uri"), bif("uri", "decode", 2, "$u as xs:string, $decode-plus as xs:boolean", "xs:string"));
        fnMap.putValue(ns("uri"), bif("uri", "decode", 3, "$s as xs:string, $decode-plus as xs:boolean, $charset as xs:string", "xs:string"));
        fnMap.putValue(ns("uri"), bif("uri", "parse", 1, "$uri as xs:string", "object()"));
        fnMap.putValue(ns("uri"), bif("uri", "serialize", 1, "$uri as object()", "xs:string"));
        fnMap.putValue(ns("x"), bif("x", "canonicalize", 1, "$xml-string as xs:string", "xs:string"));
        fnMap.putValue(ns("x"), bif("x", "canonicalize", 2, "$xml-string as xs:string, $options as element(opt:options)", "xs:string"));
        fnMap.putValue(ns("x"), bif("x", "canonicalize-impl", 2, "$xml-string as xs:string, $options as element(*)", "xs:string"));
        fnMap.putValue(ns("x"), bif("x", "parse", 2, "$xml-string as xs:string, $options as element(opt:options)", "node()*"));
        fnMap.putValue(ns("xqd"), bif("xqd", "xqdoc", 1, "$module-uri as xs:string", "element(*)"));
        fnMap.putValue(ns("xqd"), bif("xqd", "xqdoc", 2, "$module-uri as xs:string, $options as element(opt:enable)", "element(*)"));
        fnMap.putValue(ns("xqd"), bif("xqd", "xqdoc-content", 1, "$module as xs:string", "element(*)"));
        fnMap.putValue(ns("xqd"), bif("xqd", "xqdoc-content", 2, "$module as xs:string, $options as element(opt:enable)", "element(*)"));
        fnMap.putValue(ns("xqd"), bif("xqd", "xqdoc-content-impl", 2, "$module as xs:string, $filename as xs:string", "element(*)"));
        fnMap.putValue(ns("xqd"), bif("xqd", "xqdoc-content-options-impl", 3, "$module as xs:string, $filename as xs:string, $options as element(*)", "element(*)"));
        fnMap.putValue(ns("xs"), bif("xs", "untyped", 1, "$arg", "xs:untyped"));
        fnMap.putValue(ns("xs"), bif("xs", "untypedAtomic", 1, "$arg", "xs:untypedAtomic"));
        fnMap.putValue(ns("xs"), bif("xs", "dayTimeDuration", 1, "$arg", "xs:dayTimeDuration"));
        fnMap.putValue(ns("xs"), bif("xs", "yearMonthDuration", 1, "$arg", "xs:yearMonthDuration"));
        fnMap.putValue(ns("xs"), bif("xs", "anyURI", 1, "$arg", "xs:anyURI"));
        fnMap.putValue(ns("xs"), bif("xs", "base64Binary", 1, "$arg", "xs:base64Binary"));
        fnMap.putValue(ns("xs"), bif("xs", "boolean", 1, "$arg", "xs:boolean"));
        fnMap.putValue(ns("xs"), bif("xs", "date", 1, "$arg", "xs:date"));
        fnMap.putValue(ns("xs"), bif("xs", "int", 1, "$arg", "xs:int"));
        fnMap.putValue(ns("xs"), bif("xs", "integer", 1, "$arg", "xs:integer"));
        fnMap.putValue(ns("xs"), bif("xs", "short", 1, "$arg", "xs:short"));
        fnMap.putValue(ns("xs"), bif("xs", "long", 1, "$arg", "xs:long"));
        fnMap.putValue(ns("xs"), bif("xs", "dateTime", 1, "$arg", "xs:dateTime"));
        fnMap.putValue(ns("xs"), bif("xs", "dateTimeStamp", 1, "$arg", "xs:dateTimeStamp"));
        fnMap.putValue(ns("xs"), bif("xs", "decimal", 1, "$arg", "xs:decimal"));
        fnMap.putValue(ns("xs"), bif("xs", "double", 1, "$arg", "xs:double"));
        fnMap.putValue(ns("xs"), bif("xs", "duration", 1, "$arg", "xs:duration"));
        fnMap.putValue(ns("xs"), bif("xs", "float", 1, "$arg", "xs:float"));
        fnMap.putValue(ns("xs"), bif("xs", "gDay", 1, "$arg", "xs:gDay"));
        fnMap.putValue(ns("xs"), bif("xs", "gMonth", 1, "$arg", "xs:gMonth"));
        fnMap.putValue(ns("xs"), bif("xs", "gMonthDay", 1, "$arg", "xs:gMonthDay"));
        fnMap.putValue(ns("xs"), bif("xs", "gYear", 1, "$arg", "xs:gYear"));
        fnMap.putValue(ns("xs"), bif("xs", "gYearMonth", 1, "$arg", "gYearMonth"));
        fnMap.putValue(ns("xs"), bif("xs", "hexBinary", 1, "$arg", "xs:hexBinary"));
        fnMap.putValue(ns("xs"), bif("xs", "string", 1, "$arg", "xs:string"));
        fnMap.putValue(ns("xs"), bif("xs", "time", 1, "$arg", "xs:time"));
        fnMap.putValue(ns("xs"), bif("xs", "byte", 1, "$arg", "xs:byte"));
        fnMap.putValue(ns("xs"), bif("xs", "nonPositiveInteger", 1, "$arg", "xs:nonPositiveInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "nonNegativeInteger", 1, "$arg", "xs:nonNegativeInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "negativeInteger", 1, "$arg", "xs:negativeInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "positiveInteger", 1, "$arg", "xs:positiveInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedLong", 1, "$arg", "xs:unsignedLong"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedInt", 1, "$arg", "xs:unsignedInt"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedShort", 1, "$arg", "xs:unsignedShort"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedByte", 1, "$arg", "xs:unsignedByte"));
        fnMap.putValue(ns("xs"), bif("xs", "normalizedString", 1, "$arg", "xs:normalizedString"));
        fnMap.putValue(ns("xs"), bif("xs", "token", 1, "$arg", "xs:token"));
        fnMap.putValue(ns("xs"), bif("xs", "language", 1, "$arg", "xs:language"));
        fnMap.putValue(ns("xs"), bif("xs", "Name", 1, "$arg", "xs:Name"));
        fnMap.putValue(ns("xs"), bif("xs", "NCName", 1, "$arg", "xs:NCName"));
        fnMap.putValue(ns("xs"), bif("xs", "NMToken", 1, "$arg", "xs:NMToken"));
        fnMap.putValue(ns("xs"), bif("xs", "ID", 1, "$arg", "xs:ID"));
        fnMap.putValue(ns("xs"), bif("xs", "IDREF", 1, "$arg", "xs:IDREF"));
        fnMap.putValue(ns("xs"), bif("xs", "ENTITY", 1, "$arg", "xs:ENTITY"));
        fnMap.putValue(ns("xs"), bif("xs", "IDREFS", 1, "$arg", "xs:IDREFS"));
        fnMap.putValue(ns("xs"), bif("xs", "ENTITIES", 1, "$arg", "xs:ENTITIES"));
        fnMap.putValue(ns("xs"), bif("xs", "NMTOKENS", 1, "$arg", "xs:NMTOKENS"));
        fnMap.putValue(ns("xs"), bif("xs", "NMTOKEN", 1, "$arg", "xs:NMTOKEN"));
        fnMap.putValue(ns("xs"), bif("xs", "QName", 1, "$arg", "xs:QName"));
        fnMap.putValue(ns("xsl-fo"), bif("xsl-fo", "generator", 2, "$output-format as xs:string, $xsl-fo-document as node()", "xs:base64Binary"));
        fnMap.putValue(ns("xsl-fo"), bif("xsl-fo", "generator-impl", 2, "$output-format as xs:string, $xsl-fo-document as node()", "xs:base64Binary"));
        fnMap.putValue(ns("xslt"), bif("xslt", "transform", 2, "$source as node(), $stylesheet as node()", "node()"));
        fnMap.putValue(ns("zq"), bif("zq", "bind-context-item", 2, "$query-key as xs:anyURI, $dot as item()", "empty-sequence()"));
        fnMap.putValue(ns("zq"), bif("zq", "bind-variable", 3, "$query-key as xs:anyURI, $var as xs:QName, $value as item()", "empty-sequence()"));
        fnMap.putValue(ns("zq"), bif("zq", "delete-query", 1, "$query-key as xs:anyURI", "empty-sequence()"));
        fnMap.putValue(ns("zq"), bif("zq", "evaluate", 1, "$query-key as xs:anyURI", "item()*"));
        fnMap.putValue(ns("zq"), bif("zq", "evaluate-sequential", 1, "$query-key as xs:string", "item()*"));
        fnMap.putValue(ns("zq"), bif("zq", "evaluate-updating", 1, "$query-key as xs:anyURI", ""));
        fnMap.putValue(ns("zq"), bif("zq", "external-variables", 1, "$query-key as xs:anyURI", "xs:QName*"));
        fnMap.putValue(ns("zq"), bif("zq", "is-bound-context-item", 1, "$query-key as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("zq"), bif("zq", "is-bound-variable", 2, "$query-key as xs:anyURI, $var-name as xs:QName", "xs:boolean"));
        fnMap.putValue(ns("zq"), bif("zq", "is-sequential", 1, "$query-key as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("zq"), bif("zq", "is-updating", 1, "$query-key as xs:anyURI", "xs:boolean"));
        fnMap.putValue(ns("zq"), bif("zq", "load-from-query-plan", 1, "$plan as xs:base64Binary", "xs:anyURI"));
        fnMap.putValue(ns("zq"), bif("zq", "load-from-query-plan", 3, "$plan as xs:base64Binary, $resolver as item(), $mapper as item()", "xs:anyURI"));
        fnMap.putValue(ns("zq"), bif("zq", "prepare-library-module", 1, "$library-module-text as xs:string", "empty-sequence()"));
        fnMap.putValue(ns("zq"), bif("zq", "prepare-main-module", 1, "$main-module-text as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("zq"), bif("zq", "prepare-main-module", 3, "$main-module-text as xs:string, $resolver as function (xs:string, xs:string) as item()?, $mapper as function (xs:string, xs:string) as xs:string* ", "xs:anyURI"));
        fnMap.putValue(ns("zq"), bif("zq", "query-plan", 1, "$query-key as xs:anyURI", "xs:base64Binary"));
        fnMap.putValue(ns("zq"), bif("zq", "variable-value", 2, "$query-key as xs:anyURI, $var-name as xs:QName", "item()*"));
    }

    @Override
    public PredeclaredNamespaces predeclaredNamespaces() {
        return predeclaredNamespaces;
    }
}
