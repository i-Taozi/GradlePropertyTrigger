/*
 * Copyright 2013-2015 Grzegorz Ligas <ligasgr@gmail.com> and other contributors
 * (see the CONTRIBUTORS file).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.intellij.xquery.completion.function.bif;

import org.intellij.xquery.completion.function.AbstractBuiltInFunctionTable;
import org.intellij.xquery.reference.namespace.PredeclaredNamespaces;
import org.intellij.xquery.reference.namespace.exist.ExistPredeclaredNamespaces;

public class ExistBuiltInFunctionTable extends AbstractBuiltInFunctionTable {

    private PredeclaredNamespaces predeclaredNamespaces = new ExistPredeclaredNamespaces();

    {
        fnMap.putValue(ns("compression"), bif("compression", "gzip", 1, "$data as xs:base64Binary", "xs:base64Binary?"));
        fnMap.putValue(ns("compression"), bif("compression", "tar", 2, "$sources as xs:anyType+, $use-collection-hierarchy as xs:boolean", "xs:base64Binary*"));
        fnMap.putValue(ns("compression"), bif("compression", "tar", 3, "$sources as xs:anyType+, $use-collection-hierarchy as xs:boolean, $strip-prefix as xs:string", "xs:base64Binary*"));
        fnMap.putValue(ns("compression"), bif("compression", "ungzip", 1, "$gzip-data as xs:base64Binary", "xs:base64Binary?"));
        fnMap.putValue(ns("compression"), bif("compression", "untar", 5, "$tar-data as xs:base64Binary, $entry-filter as function, $entry-filter-param as xs:anyType*, $entry-data as function, $entry-data-param as xs:anyType*", "item()*"));
        fnMap.putValue(ns("compression"), bif("compression", "unzip", 5, "$zip-data as xs:base64Binary, $entry-filter as function, $entry-filter-param as xs:anyType*, $entry-data as function, $entry-data-param as xs:anyType*", "item()*"));
        fnMap.putValue(ns("compression"), bif("compression", "zip", 2, "$sources as xs:anyType+, $use-collection-hierarchy as xs:boolean", "xs:base64Binary*"));
        fnMap.putValue(ns("compression"), bif("compression", "zip", 3, "$sources as xs:anyType+, $use-collection-hierarchy as xs:boolean, $strip-prefix as xs:string", "xs:base64Binary*"));
        fnMap.putValue(ns("console"), bif("console", "jmx-token", 0, "", "xs:string?"));
        fnMap.putValue(ns("console"), bif("console", "log", 1, "$items as item()*", "empty()"));
        fnMap.putValue(ns("console"), bif("console", "log", 2, "$channel as xs:string, $items as item()*", "empty()"));
        fnMap.putValue(ns("console"), bif("console", "send", 2, "$channel as xs:string, $items as item()?", "empty()"));
        fnMap.putValue(ns("contentextraction"), bif("contentextraction", "get-metadata", 1, "$binary as xs:base64Binary", "document-node()"));
        fnMap.putValue(ns("contentextraction"), bif("contentextraction", "get-metadata-and-content", 1, "$binary as xs:base64Binary", "document-node()"));
        fnMap.putValue(ns("contentextraction"), bif("contentextraction", "stream-content", 5, "$binary as xs:base64Binary, $paths as xs:string*, $callback as function, $namespaces as element()?, $userData as item()*", "empty()"));
        fnMap.putValue(ns("emath"), bif("emath", "abs", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "acos", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "asin", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "atan", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "atan2", 2, "$y as xs:double, $x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "ceil", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "cos", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "degrees", 1, "$radians as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "e", 0, "", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "exp", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "floor", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "log", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "pi", 0, "", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "power", 2, "$value as xs:double, $power as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "radians", 1, "$degrees as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "random", 0, "", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "round", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "sin", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "sqrt", 1, "$x as xs:double", "xs:double"));
        fnMap.putValue(ns("emath"), bif("emath", "tan", 1, "$radians as xs:double", "xs:double"));
        fnMap.putValue(ns("example"), bif("example", "echo", 1, "$text as xs:string*", "xs:string*"));
        fnMap.putValue(ns("file"), bif("file", "delete", 1, "$path as item()", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "directory-list", 2, "$path as item(), $pattern as xs:string", "node()?"));
        fnMap.putValue(ns("file"), bif("file", "exists", 1, "$path as item()", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "is-directory", 1, "$path as item()", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "is-readable", 1, "$path as item()", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "is-writeable", 1, "$path as item()", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "list", 1, "$path as item()", "node()*"));
        fnMap.putValue(ns("file"), bif("file", "mkdir", 1, "$path as item()", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "mkdirs", 1, "$path as item()", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "move", 2, "$original as item(), $destination as item()", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "read", 1, "$path as item()", "xs:string?"));
        fnMap.putValue(ns("file"), bif("file", "read", 2, "$path as item(), $encoding as xs:string", "xs:string?"));
        fnMap.putValue(ns("file"), bif("file", "read-binary", 1, "$path as item()", "xs:base64Binary?"));
        fnMap.putValue(ns("file"), bif("file", "read-unicode", 1, "$path as item()", "xs:string?"));
        fnMap.putValue(ns("file"), bif("file", "read-unicode", 2, "$path as item(), $encoding as xs:string", "xs:string?"));
        fnMap.putValue(ns("file"), bif("file", "serialize", 3, "$node-set as node()*, $path as item(), $parameters as item()*", "xs:boolean?"));
        fnMap.putValue(ns("file"), bif("file", "serialize", 4, "$node-set as node()*, $path as item(), $parameters as item()*, $append as xs:boolean", "xs:boolean?"));
        fnMap.putValue(ns("file"), bif("file", "serialize-binary", 2, "$binarydata as xs:base64Binary, $path as item()", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "serialize-binary", 3, "$binarydata as xs:base64Binary, $path as item(), $append as xs:boolean", "xs:boolean"));
        fnMap.putValue(ns("file"), bif("file", "sync", 3, "$collection as xs:string, $targetPath as item(), $dateTime as xs:dateTime?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "QName", 2, "$uri as xs:string?, $qname as xs:string", "xs:QName"));
        fnMap.putValue(ns("fn"), bif("fn", "abs", 1, "$number as numeric?", "numeric"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-date-to-timezone", 1, "$date as xs:date?", "xs:date?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-date-to-timezone", 2, "$date as xs:date?, $duration as xs:dayTimeDuration?", "xs:date?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-dateTime-to-timezone", 1, "$date-time as xs:dateTime?", "xs:dateTime?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-dateTime-to-timezone", 2, "$date-time as xs:dateTime?, $duration as xs:dayTimeDuration?", "xs:dateTime?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-time-to-timezone", 1, "$time as xs:time?", "xs:time?"));
        fnMap.putValue(ns("fn"), bif("fn", "adjust-time-to-timezone", 2, "$time as xs:time?, $duration as xs:dayTimeDuration?", "xs:time?"));
        fnMap.putValue(ns("fn"), bif("fn", "analyze-string", 2, "$input as xs:string?, $pattern as xs:string", "element()"));
        fnMap.putValue(ns("fn"), bif("fn", "analyze-string", 3, "$input as xs:string?, $pattern as xs:string, $flags as xs:string", "element()"));
        fnMap.putValue(ns("fn"), bif("fn", "available-environment-variables", 0, "", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "avg", 1, "$values as xs:anyAtomicType*", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "base-uri", 0, "", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "base-uri", 1, "$uri as node()?", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "boolean", 1, "$items as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "ceiling", 1, "$number as numeric?", "numeric"));
        fnMap.putValue(ns("fn"), bif("fn", "codepoint-equal", 2, "$string-1 as xs:string?, $string-2 as xs:string?", "xs:boolean?"));
        fnMap.putValue(ns("fn"), bif("fn", "codepoints-to-string", 1, "$codepoints as xs:integer*", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "collection", 1, "$collection-uris as xs:string*", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "compare", 2, "$string-1 as xs:string?, $string-2 as xs:string?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "compare", 3, "$string-1 as xs:string?, $string-2 as xs:string?, $collation-uri as xs:string", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "concat", 1, "$atomizable-values as xs:anyAtomicType?", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "contains", 2, "$source-string as xs:string?, $substring as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "contains", 3, "$source-string as xs:string?, $substring as xs:string?, $collation-uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "count", 1, "$items as item()*", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "current-date", 0, "", "xs:date"));
        fnMap.putValue(ns("fn"), bif("fn", "current-dateTime", 0, "", "xs:dateTime"));
        fnMap.putValue(ns("fn"), bif("fn", "current-time", 0, "", "xs:time"));
        fnMap.putValue(ns("fn"), bif("fn", "data", 1, "$items as item()*", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "dateTime", 2, "$date as xs:date?, $time as xs:time?", "xs:dateTime?"));
        fnMap.putValue(ns("fn"), bif("fn", "day-from-date", 1, "$date as xs:date?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "day-from-dateTime", 1, "$date-time as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "days-from-duration", 1, "$duration as xs:dayTimeDuration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "deep-equal", 2, "$items-1 as item()*, $items-2 as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "deep-equal", 3, "$items-1 as item()*, $items-2 as item()*, $collation-uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "default-collation", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "distinct-values", 1, "$atomic-values as xs:anyAtomicType*", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "distinct-values", 2, "$atomic-values as xs:anyAtomicType*, $collation-uri as xs:string", "xs:anyAtomicType*"));
        fnMap.putValue(ns("fn"), bif("fn", "doc", 1, "$document-uri as xs:string?", "node()?"));
        fnMap.putValue(ns("fn"), bif("fn", "doc-available", 1, "$document-uri as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "document-uri", 1, "$document-node as node()?", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "empty", 1, "$items as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "encode-for-uri", 1, "$uri-part as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "ends-with", 2, "$source-string as xs:string?, $suffix as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "ends-with", 3, "$source-string as xs:string?, $suffix as xs:string?, $collation-uri as xs:string", "xs:boolean?"));
        fnMap.putValue(ns("fn"), bif("fn", "environment-variable", 1, "$name as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "equals", 2, "$source-string as xs:string?, $substring as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "equals", 3, "$source-string as xs:string?, $substring as xs:string?, $collation-uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 0, "", "empty()"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 1, "$qname as xs:QName", "empty()"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 2, "$qname as xs:QName?, $message as xs:string", "empty()"));
        fnMap.putValue(ns("fn"), bif("fn", "error", 3, "$qname as xs:QName?, $message as xs:string, $error-object as item()*", "empty()"));
        fnMap.putValue(ns("fn"), bif("fn", "escape-html-uri", 1, "$html-uri as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "escape-uri", 2, "$uri as xs:string?, $escape-reserved as xs:boolean", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "exactly-one", 1, "$items as item()*", "item()"));
        fnMap.putValue(ns("fn"), bif("fn", "exists", 1, "$items as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "false", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "filter", 2, "$sequence as item()*, $function as function", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "floor", 1, "$number as numeric*", "numeric"));
        fnMap.putValue(ns("fn"), bif("fn", "fold-left", 3, "$sequence as item()*, $zero as item()*, $function as function", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "fold-right", 3, "$sequence as item()*, $zero as item()*, $function as function", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "for-each", 2, "$sequence as item()*, $function as function", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "for-each-pair", 3, "$seq1 as item()*, $seq2 as item()*, $function as function", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "format-date", 2, "$value as xs:date?, $picture as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-date", 5, "$value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-dateTime", 2, "$value as xs:dateTime?, $picture as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-dateTime", 5, "$value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-number", 2, "$value as numeric?, $picture as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-number", 3, "$value as numeric?, $picture as xs:string, $decimal-format-name as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-time", 2, "$value as xs:time?, $picture as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "format-time", 5, "$value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "function-arity", 1, "$function as function", "xs:integer"));
        fnMap.putValue(ns("fn"), bif("fn", "function-lookup", 2, "$name as xs:QName, $arity as xs:integer", "function?"));
        fnMap.putValue(ns("fn"), bif("fn", "function-name", 1, "$function as function", "xs:QName?"));
        fnMap.putValue(ns("fn"), bif("fn", "generate-id", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "generate-id", 1, "$node as node()?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "head", 1, "$arg as item()*", "item()?"));
        fnMap.putValue(ns("fn"), bif("fn", "hours-from-dateTime", 1, "$date-time as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "hours-from-duration", 1, "$duration as xs:dayTimeDuration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "hours-from-time", 1, "$time as xs:time?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "id", 1, "$idrefs as xs:string*", "element()*"));
        fnMap.putValue(ns("fn"), bif("fn", "id", 2, "$idrefs as xs:string*, $node-in-document as node()", "element()*"));
        fnMap.putValue(ns("fn"), bif("fn", "idref", 1, "$ids as xs:string*", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "idref", 2, "$ids as xs:string*, $node-in-document as node()", "node()*"));
        fnMap.putValue(ns("fn"), bif("fn", "implicit-timezone", 0, "", "xs:dayTimeDuration"));
        fnMap.putValue(ns("fn"), bif("fn", "in-scope-prefixes", 1, "$element as element()", "xs:string*"));
        fnMap.putValue(ns("fn"), bif("fn", "index-of", 2, "$source as xs:anyAtomicType*, $search as xs:anyAtomicType", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "index-of", 3, "$source as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation-uri as xs:string", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "insert-before", 3, "$target as item()*, $position as xs:integer, $inserts as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "iri-to-uri", 1, "$iri as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "lang", 1, "$lang as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "lang", 2, "$lang as xs:string?, $node as node()", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "last", 0, "", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "local-name", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "local-name", 1, "$arg as node()?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "local-name-from-QName", 1, "$arg as xs:QName?", "xs:NCName?"));
        fnMap.putValue(ns("fn"), bif("fn", "lower-case", 1, "$arg as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "map", 2, "$function as function, $sequence as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "map-pairs", 3, "$function as function, $seq1 as item()*, $seq2 as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "matches", 2, "$input as xs:string*, $pattern as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "matches", 3, "$input as xs:string*, $pattern as xs:string, $flags as xs:string", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "max", 1, "$arg as xs:anyAtomicType*", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "max", 2, "$arg as xs:anyAtomicType*, $collation-uri as xs:string", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "min", 1, "$arg as xs:anyAtomicType*", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "min", 2, "$arg as xs:anyAtomicType*, $collation-uri as xs:string", "xs:anyAtomicType?"));
        fnMap.putValue(ns("fn"), bif("fn", "minutes-from-dateTime", 1, "$date-time as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "minutes-from-duration", 1, "$duration as xs:dayTimeDuration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "minutes-from-time", 1, "$time as xs:time?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "month-from-date", 1, "$date as xs:date?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "month-from-dateTime", 1, "$date-time as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "months-from-duration", 1, "$duration as xs:yearMonthDuration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "name", 0, "", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "name", 1, "$arg as node()?", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri", 0, "", "xs:anyURI"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri", 1, "$arg as node()?", "xs:anyURI"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri-for-prefix", 2, "$prefix as xs:string?, $element as element()", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "namespace-uri-from-QName", 1, "$arg as xs:QName?", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "nilled", 1, "$arg as node()?", "xs:boolean?"));
        fnMap.putValue(ns("fn"), bif("fn", "node-name", 1, "$arg as node()?", "xs:QName?"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-space", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-space", 1, "$arg as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-unicode", 1, "$arg as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "normalize-unicode", 2, "$arg as xs:string?, $normalization-form as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "not", 1, "$arg as item()*", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "number", 0, "", "xs:double"));
        fnMap.putValue(ns("fn"), bif("fn", "number", 1, "$arg as xs:anyAtomicType?", "xs:double"));
        fnMap.putValue(ns("fn"), bif("fn", "one-or-more", 1, "$arg as item()*", "item()+"));
        fnMap.putValue(ns("fn"), bif("fn", "parse-xml", 1, "$arg as xs:string?", "document-node()?"));
        fnMap.putValue(ns("fn"), bif("fn", "parse-xml-fragment", 1, "$arg as xs:string?", "element()*"));
        fnMap.putValue(ns("fn"), bif("fn", "position", 0, "", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "prefix-from-QName", 1, "$arg as xs:QName?", "xs:NCName?"));
        fnMap.putValue(ns("fn"), bif("fn", "remove", 2, "$target as item()*, $position as xs:integer", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "replace", 3, "$input as xs:string?, $pattern as xs:string, $replacement as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "replace", 4, "$input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "resolve-QName", 2, "$qname as xs:string?, $element as element()", "xs:QName"));
        fnMap.putValue(ns("fn"), bif("fn", "resolve-uri", 1, "$relative as xs:string?", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "resolve-uri", 2, "$relative as xs:string?, $base as xs:string", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "reverse", 1, "$arg as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "root", 0, "", "node()"));
        fnMap.putValue(ns("fn"), bif("fn", "root", 1, "$arg as node()?", "node()?"));
        fnMap.putValue(ns("fn"), bif("fn", "round", 1, "$arg as numeric?", "numeric"));
        fnMap.putValue(ns("fn"), bif("fn", "round-half-to-even", 1, "$arg as numeric?", "numeric"));
        fnMap.putValue(ns("fn"), bif("fn", "round-half-to-even", 2, "$arg as numeric?, $precision as numeric?", "numeric"));
        fnMap.putValue(ns("fn"), bif("fn", "seconds-from-dateTime", 1, "$date-time as xs:dateTime?", "xs:decimal?"));
        fnMap.putValue(ns("fn"), bif("fn", "seconds-from-duration", 1, "$duration as xs:dayTimeDuration?", "xs:decimal?"));
        fnMap.putValue(ns("fn"), bif("fn", "seconds-from-time", 1, "$time as xs:time?", "xs:decimal?"));
        fnMap.putValue(ns("fn"), bif("fn", "serialize", 1, "$args as item()*", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "serialize", 2, "$args as item()*, $parameters as node()?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "starts-with", 2, "$source as xs:string?, $prefix as xs:string?", "xs:boolean?"));
        fnMap.putValue(ns("fn"), bif("fn", "starts-with", 3, "$source as xs:string?, $prefix as xs:string?, $collation-uri as xs:string", "xs:boolean?"));
        fnMap.putValue(ns("fn"), bif("fn", "static-base-uri", 0, "", "xs:anyURI?"));
        fnMap.putValue(ns("fn"), bif("fn", "string", 0, "", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string", 1, "$arg as item()?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string-join", 1, "$arg as xs:string*", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string-join", 2, "$arg as xs:string*, $separator as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "string-length", 0, "", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "string-length", 1, "$arg as xs:string?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "string-to-codepoints", 1, "$arg as xs:string?", "xs:integer*"));
        fnMap.putValue(ns("fn"), bif("fn", "subsequence", 2, "$source as item()*, $starting-at as xs:double", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "subsequence", 3, "$source as item()*, $starting-at as xs:double, $length as xs:double", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "substring", 2, "$source as xs:string?, $starting-at as xs:double", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "substring", 3, "$source as xs:string?, $starting-at as xs:double, $length as xs:double", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-after", 2, "$source as xs:string?, $search as xs:string?", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-after", 3, "$source as xs:string?, $search as xs:string?, $collation-uri as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-before", 2, "$source as xs:string?, $search as xs:string?", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "substring-before", 3, "$source as xs:string?, $search as xs:string?, $collation-uri as xs:string", "xs:string?"));
        fnMap.putValue(ns("fn"), bif("fn", "sum", 1, "$arg as xs:anyAtomicType*", "xs:anyAtomicType"));
        fnMap.putValue(ns("fn"), bif("fn", "sum", 2, "$arg as xs:anyAtomicType*, $default as xs:anyAtomicType?", "xs:anyAtomicType"));
        fnMap.putValue(ns("fn"), bif("fn", "tail", 1, "$sequence as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "timezone-from-date", 1, "$date as xs:date?", "xs:dayTimeDuration?"));
        fnMap.putValue(ns("fn"), bif("fn", "timezone-from-dateTime", 1, "$date-time as xs:dateTime?", "xs:dayTimeDuration?"));
        fnMap.putValue(ns("fn"), bif("fn", "timezone-from-time", 1, "$time as xs:time?", "xs:dayTimeDuration?"));
        fnMap.putValue(ns("fn"), bif("fn", "tokenize", 2, "$input as xs:string?, $pattern as xs:string", "xs:string+"));
        fnMap.putValue(ns("fn"), bif("fn", "tokenize", 3, "$input as xs:string?, $pattern as xs:string, $flags as xs:string", "xs:string+"));
        fnMap.putValue(ns("fn"), bif("fn", "trace", 2, "$value as item()*, $label as xs:string", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "translate", 3, "$arg as xs:string?, $map as xs:string, $trans as xs:string", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "true", 0, "", "xs:boolean"));
        fnMap.putValue(ns("fn"), bif("fn", "unordered", 1, "$arg as item()*", "item()*"));
        fnMap.putValue(ns("fn"), bif("fn", "upper-case", 1, "$arg as xs:string?", "xs:string"));
        fnMap.putValue(ns("fn"), bif("fn", "year-from-date", 1, "$date as xs:date?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "year-from-dateTime", 1, "$date-time as xs:dateTime?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "years-from-duration", 1, "$duration as xs:yearMonthDuration?", "xs:integer?"));
        fnMap.putValue(ns("fn"), bif("fn", "zero-or-one", 1, "$arg as item()*", "item()?"));
        fnMap.putValue(ns("ft"), bif("ft", "close", 0, "", "empty()"));
        fnMap.putValue(ns("ft"), bif("ft", "get-field", 2, "$path as xs:string*, $field as xs:string", "xs:string*"));
        fnMap.putValue(ns("ft"), bif("ft", "has-index", 1, "$path as xs:string", "xs:boolean*"));
        fnMap.putValue(ns("ft"), bif("ft", "index", 2, "$documentPath as xs:string, $solrExression as node()", "empty()"));
        fnMap.putValue(ns("ft"), bif("ft", "index", 3, "$documentPath as xs:string, $solrExression as node(), $close as xs:boolean", "empty()"));
        fnMap.putValue(ns("ft"), bif("ft", "optimize", 0, "", "empty()"));
        fnMap.putValue(ns("ft"), bif("ft", "query", 2, "$nodes as node()*, $query as item()", "node()*"));
        fnMap.putValue(ns("ft"), bif("ft", "query", 3, "$nodes as node()*, $query as item(), $options as node()?", "node()*"));
        fnMap.putValue(ns("ft"), bif("ft", "query-field", 2, "$field as xs:string*, $query as item()", "node()*"));
        fnMap.putValue(ns("ft"), bif("ft", "query-field", 3, "$field as xs:string*, $query as item(), $options as node()?", "node()*"));
        fnMap.putValue(ns("ft"), bif("ft", "remove-index", 1, "$documentPath as xs:string", "empty()"));
        fnMap.putValue(ns("ft"), bif("ft", "score", 1, "$node as node()", "xs:float*"));
        fnMap.putValue(ns("ft"), bif("ft", "search", 1, "$query as xs:string", "node()"));
        fnMap.putValue(ns("ft"), bif("ft", "search", 2, "$path as xs:string*, $query as xs:string", "node()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "clear-all", 0, "", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "delete", 3, "$url as xs:anyURI, $persist as xs:boolean, $request-headers as element()?", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "get", 3, "$url as xs:anyURI, $persist as xs:boolean, $request-headers as element()?", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "get", 4, "$url as xs:anyURI, $persist as xs:boolean, $request-headers as element()?, $parser-options as element()?", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "head", 3, "$url as xs:anyURI, $persist as xs:boolean, $request-headers as element()?", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "options", 3, "$url as xs:anyURI, $persist as xs:boolean, $request-headers as element()?", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "post", 4, "$url as xs:anyURI, $content as item(), $persist as xs:boolean, $request-headers as element()?", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "post-form", 4, "$url as xs:anyURI, $content as element(), $persist as xs:boolean, $request-headers as element()?", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "put", 4, "$url as xs:anyURI, $content as item(), $persist as xs:boolean, $request-headers as element()?", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "put", 5, "$url as xs:anyURI, $content as item(), $persist as xs:boolean, $request-headers as element()?, $indentation as xs:integer", "item()"));
        fnMap.putValue(ns("httpclient"), bif("httpclient", "set-parser-options", 1, "$parser-options as element()?", "item()"));
        fnMap.putValue(ns("inspect"), bif("inspect", "inspect-function", 1, "$function as function", "node()"));
        fnMap.putValue(ns("inspect"), bif("inspect", "inspect-module", 1, "$location as xs:anyURI", "element()?"));
        fnMap.putValue(ns("inspect"), bif("inspect", "inspect-module-uri", 1, "$uri as xs:anyURI", "element()?"));
        fnMap.putValue(ns("inspect"), bif("inspect", "module-functions", 0, "", "function*"));
        fnMap.putValue(ns("inspect"), bif("inspect", "module-functions", 1, "$location as xs:anyURI", "function*"));
        fnMap.putValue(ns("inspect"), bif("inspect", "module-functions-by-uri", 1, "$uri as xs:anyURI", "function*"));
        fnMap.putValue(ns("kwic"), bif("kwic", "callback", 3, "$callback as function?, $node as node(), $mode as xs:string", "xs:string?"));
        fnMap.putValue(ns("kwic"), bif("kwic", "display-text", 1, "$text as text()?", "node()?"));
        fnMap.putValue(ns("kwic"), bif("kwic", "expand", 1, "$hit as element()", "element()"));
        fnMap.putValue(ns("kwic"), bif("kwic", "get-matches", 1, "$hit as element()", "element()*"));
        fnMap.putValue(ns("kwic"), bif("kwic", "get-summary", 3, "$root as node(), $node as element(), $config as element()?", "element()"));
        fnMap.putValue(ns("kwic"), bif("kwic", "get-summary", 4, "$root as node(), $node as element(), $config as element()?, $callback as function?", "element()"));
        fnMap.putValue(ns("kwic"), bif("kwic", "string-length", 1, "$nodes as item()*", "xs:integer"));
        fnMap.putValue(ns("kwic"), bif("kwic", "substring", 3, "$node as item(), $start as xs:int, $count as xs:int", "item()?"));
        fnMap.putValue(ns("kwic"), bif("kwic", "summarize", 2, "$hit as element(), $config as element()?", "element()*"));
        fnMap.putValue(ns("kwic"), bif("kwic", "summarize", 3, "$hit as element(), $config as element()?, $callback as function?", "element()*"));
        fnMap.putValue(ns("kwic"), bif("kwic", "truncate-following", 6, "$root as node(), $node as node()?, $truncated as item()*, $max as xs:int, $chars as xs:int, $callback as function?", "item()*"));
        fnMap.putValue(ns("kwic"), bif("kwic", "truncate-previous", 6, "$root as node(), $node as node()?, $truncated as item()*, $max as xs:int, $chars as xs:int, $callback as function?", "item()*"));
        fnMap.putValue(ns("mail"), bif("mail", "close-mail-folder", 2, "$mail-folder-handle as xs:integer, $expunge as xs:boolean", "item()"));
        fnMap.putValue(ns("mail"), bif("mail", "close-mail-store", 1, "$mail-store-handle as xs:integer", "item()"));
        fnMap.putValue(ns("mail"), bif("mail", "close-message-list", 1, "$message-list-handle as xs:integer", "item()"));
        fnMap.putValue(ns("mail"), bif("mail", "get-mail-folder", 2, "$mail-store-handle as xs:integer, $foldername as xs:string", "xs:long?"));
        fnMap.putValue(ns("mail"), bif("mail", "get-mail-session", 1, "$properties as element()?", "xs:long?"));
        fnMap.putValue(ns("mail"), bif("mail", "get-mail-store", 1, "$mail-handle as xs:integer", "xs:long?"));
        fnMap.putValue(ns("mail"), bif("mail", "get-message-list", 1, "$mail-folder-handle as xs:integer", "xs:long?"));
        fnMap.putValue(ns("mail"), bif("mail", "get-message-list-as-xml", 2, "$message-list-handle as xs:integer, $include-headers as xs:boolean", "element()?"));
        fnMap.putValue(ns("mail"), bif("mail", "get-messages", 2, "$message-list-handle as xs:integer, $message-numbers as xs:integer*", "element()?"));
        fnMap.putValue(ns("mail"), bif("mail", "search-message-list", 2, "$mail-folder-handle as xs:integer, $search-parameters as element()", "xs:long?"));
        fnMap.putValue(ns("mail"), bif("mail", "send-email", 2, "$mail-handle as xs:long, $email as element()+", "item()"));
        fnMap.putValue(ns("mail"), bif("mail", "send-email", 3, "$email as element()+, $server as xs:string?, $charset as xs:string?", "xs:boolean+"));
        fnMap.putValue(ns("map"), bif("map", "contains", 2, "$map as map, $key as xs:anyAtomicType", "xs:boolean"));
        fnMap.putValue(ns("map"), bif("map", "entry", 2, "$key as xs:anyAtomicType, $value as item()*", "map"));
        fnMap.putValue(ns("map"), bif("map", "for-each-entry", 2, "$input as map, $action as function", "item()*"));
        fnMap.putValue(ns("map"), bif("map", "get", 2, "$map as map, $key as xs:anyAtomicType", "item()*"));
        fnMap.putValue(ns("map"), bif("map", "keys", 1, "$map as map", "xs:anyAtomicType*"));
        fnMap.putValue(ns("map"), bif("map", "new", 0, "", "map"));
        fnMap.putValue(ns("map"), bif("map", "new", 1, "$maps as map*", "map"));
        fnMap.putValue(ns("map"), bif("map", "new", 2, "$maps as map*, $collation as xs:string", "map"));
        fnMap.putValue(ns("map"), bif("map", "remove", 2, "$map as map, $key as xs:string", "map"));
        fnMap.putValue(ns("math"), bif("math", "acos", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "asin", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "atan", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "atan2", 2, "$y as xs:double, $x as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "cos", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "exp", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "exp10", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "log", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "log10", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "pi", 0, "", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "pow", 2, "$value as xs:double, $power as numeric", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "sin", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "sqrt", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("math"), bif("math", "tan", 1, "$arg as xs:double", "xs:double"));
        fnMap.putValue(ns("ner"), bif("ner", "classify-node", 2, "$classifier as xs:anyURI, $node as node()", "node()"));
        fnMap.putValue(ns("ner"), bif("ner", "classify-node", 3, "$classifier as xs:anyURI, $node as node(), $callback as function", "node()"));
        fnMap.putValue(ns("ner"), bif("ner", "classify-node-cn", 2, "$classifier as xs:anyURI, $node as node()", "node()"));
        fnMap.putValue(ns("ner"), bif("ner", "classify-node-cn", 3, "$classifier as xs:anyURI, $node as node(), $callback as function", "node()"));
        fnMap.putValue(ns("ner"), bif("ner", "classify-string", 2, "$classifier as xs:anyURI, $text as xs:string", "element()"));
        fnMap.putValue(ns("ner"), bif("ner", "classify-string-cn", 2, "$classifier as xs:anyURI, $text as xs:string", "element()"));
        fnMap.putValue(ns("ngram"), bif("ngram", "add-match", 1, "$node-set as node()?", "node()*"));
        fnMap.putValue(ns("ngram"), bif("ngram", "contains", 2, "$nodes as node()*, $queryString as xs:string?", "node()*"));
        fnMap.putValue(ns("ngram"), bif("ngram", "ends-with", 2, "$nodes as node()*, $queryString as xs:string?", "node()*"));
        fnMap.putValue(ns("ngram"), bif("ngram", "filter-matches", 2, "$nodes as node()*, $function-reference as function", "node()*"));
        fnMap.putValue(ns("ngram"), bif("ngram", "starts-with", 2, "$nodes as node()*, $queryString as xs:string?", "node()*"));
        fnMap.putValue(ns("ngram"), bif("ngram", "wildcard-contains", 2, "$nodes as node()*, $queryString as xs:string?", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "contains", 2, "$nodes as node()*, $key as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "ends-with", 2, "$nodes as node()*, $key as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "eq", 2, "$nodes as node()*, $key as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field", 3, "$fields as xs:string+, $operators as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field-contains", 2, "$fields as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field-ends-with", 2, "$fields as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field-eq", 2, "$fields as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field-ge", 2, "$fields as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field-gt", 2, "$fields as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field-le", 2, "$fields as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field-lt", 2, "$fields as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field-matches", 2, "$fields as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "field-starts-with", 2, "$fields as xs:string+, $keys as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "ge", 2, "$nodes as node()*, $key as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "gt", 2, "$nodes as node()*, $key as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "index-keys-for-field", 3, "$field as xs:string, $function-reference as function, $max-number-returned as xs:int?", "item()*"));
        fnMap.putValue(ns("range"), bif("range", "index-keys-for-field", 4, "$field as xs:string, $start-value as xs:anyAtomicType?, $function-reference as function, $max-number-returned as xs:int?", "item()*"));
        fnMap.putValue(ns("range"), bif("range", "le", 2, "$nodes as node()*, $key as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "lt", 2, "$nodes as node()*, $key as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "matches", 2, "$nodes as node()*, $regex as xs:string*", "node()*"));
        fnMap.putValue(ns("range"), bif("range", "optimize", 0, "", "empty()"));
        fnMap.putValue(ns("range"), bif("range", "starts-with", 2, "$nodes as node()*, $key as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("repo"), bif("repo", "deploy", 1, "$pkgName as xs:string", "element()"));
        fnMap.putValue(ns("repo"), bif("repo", "deploy", 2, "$pkgName as xs:string, $targetCollection as xs:string", "element()"));
        fnMap.putValue(ns("repo"), bif("repo", "get-resource", 2, "$pkgName as xs:string, $resource as xs:string", "xs:base64Binary?"));
        fnMap.putValue(ns("repo"), bif("repo", "get-root", 0, "", "xs:string"));
        fnMap.putValue(ns("repo"), bif("repo", "install", 1, "$text as xs:string", "xs:boolean"));
        fnMap.putValue(ns("repo"), bif("repo", "install-and-deploy", 2, "$pkgName as xs:string, $publicRepoURL as xs:string", "element()"));
        fnMap.putValue(ns("repo"), bif("repo", "install-and-deploy", 3, "$pkgName as xs:string, $version as xs:string?, $publicRepoURL as xs:string", "element()"));
        fnMap.putValue(ns("repo"), bif("repo", "install-and-deploy-from-db", 1, "$path as xs:string", "element()"));
        fnMap.putValue(ns("repo"), bif("repo", "install-and-deploy-from-db", 2, "$path as xs:string, $publicRepoURL as xs:string", "element()"));
        fnMap.putValue(ns("repo"), bif("repo", "install-from-db", 1, "$path as xs:string", "xs:boolean"));
        fnMap.putValue(ns("repo"), bif("repo", "list", 0, "", "xs:string*"));
        fnMap.putValue(ns("repo"), bif("repo", "remove", 1, "$text as xs:string*", "xs:boolean"));
        fnMap.putValue(ns("repo"), bif("repo", "undeploy", 1, "$pkgName as xs:string", "element()"));
        fnMap.putValue(ns("request"), bif("request", "attribute-names", 0, "", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "exists", 0, "", "xs:boolean"));
        fnMap.putValue(ns("request"), bif("request", "get-attribute", 1, "$attribute-name as xs:string", "item()*"));
        fnMap.putValue(ns("request"), bif("request", "get-context-path", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "get-cookie-names", 0, "", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "get-cookie-value", 1, "$cookie-name as xs:string", "xs:string?"));
        fnMap.putValue(ns("request"), bif("request", "get-data", 0, "", "item()?"));
        fnMap.putValue(ns("request"), bif("request", "get-effective-uri", 0, "", "xs:anyURI"));
        fnMap.putValue(ns("request"), bif("request", "get-header", 1, "$header-name as xs:string", "xs:string?"));
        fnMap.putValue(ns("request"), bif("request", "get-header-names", 0, "", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "get-hostname", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "get-method", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "get-parameter", 2, "$name as xs:string, $default-value as item()*", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "get-parameter", 3, "$name as xs:string, $default-value as item()*, $failonerror as xs:boolean*", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "get-parameter-names", 0, "", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "get-path-info", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "get-query-string", 0, "", "xs:string?"));
        fnMap.putValue(ns("request"), bif("request", "get-remote-addr", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "get-remote-host", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "get-remote-port", 0, "", "xs:integer"));
        fnMap.putValue(ns("request"), bif("request", "get-scheme", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "get-server-name", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "get-server-port", 0, "", "xs:integer"));
        fnMap.putValue(ns("request"), bif("request", "get-servlet-path", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "get-uploaded-file-data", 1, "$upload-param-name as xs:string", "xs:base64Binary*"));
        fnMap.putValue(ns("request"), bif("request", "get-uploaded-file-name", 1, "$upload-param-name as xs:string", "xs:string*"));
        fnMap.putValue(ns("request"), bif("request", "get-uploaded-file-size", 1, "$upload-param-name as xs:string", "xs:double*"));
        fnMap.putValue(ns("request"), bif("request", "get-uri", 0, "", "xs:anyURI"));
        fnMap.putValue(ns("request"), bif("request", "get-url", 0, "", "xs:string"));
        fnMap.putValue(ns("request"), bif("request", "is-multipart-content", 0, "", "xs:boolean"));
        fnMap.putValue(ns("request"), bif("request", "set-attribute", 2, "$name as xs:string, $value as item()*", "item()"));
        fnMap.putValue(ns("response"), bif("response", "exists", 0, "", "xs:boolean"));
        fnMap.putValue(ns("response"), bif("response", "redirect-to", 1, "$uri as xs:anyURI", "item()"));
        fnMap.putValue(ns("response"), bif("response", "set-cookie", 2, "$name as xs:string, $value as xs:string", "item()"));
        fnMap.putValue(ns("response"), bif("response", "set-cookie", 4, "$name as xs:string, $value as xs:string, $max-age as xs:duration?, $secure-flag as xs:boolean?", "item()"));
        fnMap.putValue(ns("response"), bif("response", "set-cookie", 6, "$name as xs:string, $value as xs:string, $max-age as xs:duration?, $secure-flag as xs:boolean?, $domain as xs:string?, $path as xs:string?", "item()"));
        fnMap.putValue(ns("response"), bif("response", "set-date-header", 2, "$name as xs:string, $value as xs:string", "item()"));
        fnMap.putValue(ns("response"), bif("response", "set-header", 2, "$name as xs:string, $value as xs:string", "item()"));
        fnMap.putValue(ns("response"), bif("response", "set-status-code", 1, "$code as xs:integer", "item()"));
        fnMap.putValue(ns("response"), bif("response", "stream", 2, "$content as item()*, $serialization-options as xs:string", "item()"));
        fnMap.putValue(ns("response"), bif("response", "stream-binary", 3, "$binary-data as xs:base64Binary, $content-type as xs:string, $filename as xs:string?", "item()"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "delete-scheduled-job", 1, "$job-name as xs:string", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "get-scheduled-jobs", 0, "", "node()"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "pause-scheduled-job", 1, "$job-name as xs:string", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "resume-scheduled-job", 1, "$job-name as xs:string", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "schedule-java-cron-job", 3, "$java-classname as xs:string, $cron-expression as xs:string, $job-name as xs:string", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "schedule-java-cron-job", 4, "$java-classname as xs:string, $cron-expression as xs:string, $job-name as xs:string, $job-parameters as element()?", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "schedule-java-periodic-job", 6, "$java-classname as xs:string, $period as xs:integer, $job-name as xs:string, $job-parameters as element()?, $delay as xs:integer, $repeat as xs:integer", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "schedule-xquery-cron-job", 3, "$xquery-resource as xs:string, $cron-expression as xs:string, $job-name as xs:string", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "schedule-xquery-cron-job", 4, "$xquery-resource as xs:string, $cron-expression as xs:string, $job-name as xs:string, $job-parameters as element()?", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "schedule-xquery-cron-job", 5, "$xquery-resource as xs:string, $cron-expression as xs:string, $job-name as xs:string, $job-parameters as element()?, $unschedule as xs:boolean", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "schedule-xquery-periodic-job", 6, "$xquery-resource as xs:string, $period as xs:integer, $job-name as xs:string, $job-parameters as element()?, $delay as xs:integer, $repeat as xs:integer", "xs:boolean"));
        fnMap.putValue(ns("scheduler"), bif("scheduler", "schedule-xquery-periodic-job", 7, "$xquery-resource as xs:string, $period as xs:integer, $job-name as xs:string, $job-parameters as element()?, $delay as xs:integer, $repeat as xs:integer, $unschedule as xs:boolean", "xs:boolean"));
        fnMap.putValue(ns("seq"), bif("seq", "filter", 2, "$func as function, $seq as item()*", "item()*"));
        fnMap.putValue(ns("seq"), bif("seq", "fold", 3, "$func as function, $seq as item()*, $start as item()", "item()*"));
        fnMap.putValue(ns("seq"), bif("seq", "map", 3, "$func as function, $seqA as item()*, $seqB as item()*", "item()*"));
        fnMap.putValue(ns("session"), bif("session", "clear", 0, "", "xs:string"));
        fnMap.putValue(ns("session"), bif("session", "create", 0, "", "item()"));
        fnMap.putValue(ns("session"), bif("session", "encode-url", 1, "$url as xs:anyURI", "xs:anyURI"));
        fnMap.putValue(ns("session"), bif("session", "exists", 0, "", "xs:boolean"));
        fnMap.putValue(ns("session"), bif("session", "get-attribute", 1, "$name as xs:string", "item()*"));
        fnMap.putValue(ns("session"), bif("session", "get-attribute-names", 0, "", "xs:string*"));
        fnMap.putValue(ns("session"), bif("session", "get-creation-time", 0, "", "xs:dateTime"));
        fnMap.putValue(ns("session"), bif("session", "get-id", 0, "", "xs:string?"));
        fnMap.putValue(ns("session"), bif("session", "get-last-accessed-time", 0, "", "xs:dateTime"));
        fnMap.putValue(ns("session"), bif("session", "get-max-inactive-interval", 0, "", "xs:int"));
        fnMap.putValue(ns("session"), bif("session", "invalidate", 0, "", "item()"));
        fnMap.putValue(ns("session"), bif("session", "remove-attribute", 1, "$name as xs:string", "item()"));
        fnMap.putValue(ns("session"), bif("session", "set-attribute", 2, "$name as xs:string, $value as item()*", "item()"));
        fnMap.putValue(ns("session"), bif("session", "set-current-user", 2, "$user-name as xs:string, $password as xs:string", "xs:boolean?"));
        fnMap.putValue(ns("session"), bif("session", "set-max-inactive-interval", 1, "$interval as xs:int", "item()"));
        fnMap.putValue(ns("sm"), bif("sm", "add-group-ace", 4, "$path as xs:anyURI, $group-name as xs:string, $allowed as xs:boolean, $mode as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "add-group-manager", 2, "$group as xs:string, $manager as xs:string+", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "add-group-member", 2, "$group as xs:string, $member as xs:string+", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "add-user-ace", 4, "$path as xs:anyURI, $user-name as xs:string, $allowed as xs:boolean, $mode as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "chgrp", 2, "$path as xs:anyURI, $group-name as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "chmod", 2, "$path as xs:anyURI, $mode as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "chown", 2, "$path as xs:anyURI, $owner as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "clear-acl", 1, "$path as xs:anyURI", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "create-account", 3, "$username as xs:string, $password as xs:string, $groups as xs:string*", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "create-account", 4, "$username as xs:string, $password as xs:string, $primary-group as xs:string, $groups as xs:string*", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "create-account", 5, "$username as xs:string, $password as xs:string, $groups as xs:string*, $full-name as xs:string, $description as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "create-account", 6, "$username as xs:string, $password as xs:string, $primary-group as xs:string, $groups as xs:string*, $full-name as xs:string, $description as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "create-group", 1, "$group-name as xs:string", "item()"));
        fnMap.putValue(ns("sm"), bif("sm", "create-group", 2, "$group-name as xs:string, $description as xs:string", "item()"));
        fnMap.putValue(ns("sm"), bif("sm", "create-group", 3, "$group-name as xs:string, $managers as xs:string+, $description as xs:string", "item()"));
        fnMap.putValue(ns("sm"), bif("sm", "delete-group", 1, "$group-id as xs:string", "item()"));
        fnMap.putValue(ns("sm"), bif("sm", "find-groups-by-groupname", 1, "$starts-with as xs:string", "xs:string*"));
        fnMap.putValue(ns("sm"), bif("sm", "find-groups-where-groupname-contains", 1, "$fragment as xs:string", "xs:string*"));
        fnMap.putValue(ns("sm"), bif("sm", "find-users-by-name", 1, "$starts-with as xs:string", "xs:string*"));
        fnMap.putValue(ns("sm"), bif("sm", "find-users-by-name-part", 1, "$starts-with as xs:string", "xs:string*"));
        fnMap.putValue(ns("sm"), bif("sm", "find-users-by-username", 1, "$starts-with as xs:string", "xs:string*"));
        fnMap.putValue(ns("sm"), bif("sm", "get-account-metadata", 2, "$username as xs:string, $attribute as xs:anyURI", "xs:string?"));
        fnMap.putValue(ns("sm"), bif("sm", "get-account-metadata-keys", 0, "", "xs:anyURI*"));
        fnMap.putValue(ns("sm"), bif("sm", "get-account-metadata-keys", 1, "$username as xs:string", "xs:anyURI*"));
        fnMap.putValue(ns("sm"), bif("sm", "get-group-managers", 1, "$group as xs:string", "xs:string+"));
        fnMap.putValue(ns("sm"), bif("sm", "get-group-members", 1, "$group as xs:string", "xs:string+"));
        fnMap.putValue(ns("sm"), bif("sm", "get-group-metadata", 2, "$group-name as xs:string, $attribute as xs:anyURI", "xs:string?"));
        fnMap.putValue(ns("sm"), bif("sm", "get-group-metadata-keys", 0, "", "xs:anyURI*"));
        fnMap.putValue(ns("sm"), bif("sm", "get-group-metadata-keys", 1, "$group-name as xs:string", "xs:anyURI*"));
        fnMap.putValue(ns("sm"), bif("sm", "get-groups", 0, "", "xs:string*"));
        fnMap.putValue(ns("sm"), bif("sm", "get-permissions", 1, "$path as xs:anyURI", "document-node()"));
        fnMap.putValue(ns("sm"), bif("sm", "get-umask", 1, "$username as xs:string", "xs:int*"));
        fnMap.putValue(ns("sm"), bif("sm", "get-user-groups", 1, "$user as xs:string", "xs:string+"));
        fnMap.putValue(ns("sm"), bif("sm", "get-user-primary-group", 1, "$user as xs:string", "xs:string"));
        fnMap.putValue(ns("sm"), bif("sm", "group-exists", 1, "$group as xs:string", "xs:boolean"));
        fnMap.putValue(ns("sm"), bif("sm", "has-access", 2, "$path as xs:anyURI, $mode as xs:string", "xs:boolean"));
        fnMap.putValue(ns("sm"), bif("sm", "id", 0, "", "document-node()"));
        fnMap.putValue(ns("sm"), bif("sm", "insert-group-ace", 5, "$path as xs:anyURI, $index as xs:int, $group-name as xs:string, $allowed as xs:boolean, $mode as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "insert-user-ace", 5, "$path as xs:anyURI, $index as xs:int, $user-name as xs:string, $allowed as xs:boolean, $mode as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "is-account-enabled", 1, "$username as xs:string", "xs:boolean"));
        fnMap.putValue(ns("sm"), bif("sm", "is-authenticated", 0, "", "xs:boolean"));
        fnMap.putValue(ns("sm"), bif("sm", "is-dba", 1, "$username as xs:string", "xs:boolean"));
        fnMap.putValue(ns("sm"), bif("sm", "is-externally-authenticated", 0, "", "xs:boolean"));
        fnMap.putValue(ns("sm"), bif("sm", "list-groups", 0, "", "xs:string*"));
        fnMap.putValue(ns("sm"), bif("sm", "list-users", 0, "", "xs:string+"));
        fnMap.putValue(ns("sm"), bif("sm", "mode-to-octal", 1, "$mode as xs:string", "xs:string"));
        fnMap.putValue(ns("sm"), bif("sm", "modify-ace", 4, "$path as xs:anyURI, $index as xs:int, $allowed as xs:boolean, $mode as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "octal-to-mode", 1, "$octal as xs:string", "xs:string"));
        fnMap.putValue(ns("sm"), bif("sm", "passwd", 2, "$username as xs:string, $password as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "remove-account", 1, "$username as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "remove-ace", 2, "$path as xs:anyURI, $index as xs:int", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "remove-group", 1, "$group-name as xs:string", "item()"));
        fnMap.putValue(ns("sm"), bif("sm", "remove-group-manager", 2, "$group as xs:string, $manager as xs:string+", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "remove-group-member", 2, "$group as xs:string, $member as xs:string+", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "set-account-enabled", 2, "$username as xs:string, $enabled as xs:boolean", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "set-account-metadata", 3, "$username as xs:string, $attribute as xs:anyURI, $value as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "set-group-metadata", 3, "$group-name as xs:string, $attribute as xs:anyURI, $value as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "set-umask", 2, "$username as xs:string, $umask as xs:int", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "set-user-primary-group", 2, "$username as xs:string, $group as xs:string", "empty()"));
        fnMap.putValue(ns("sm"), bif("sm", "user-exists", 1, "$user as xs:string", "xs:boolean"));
        fnMap.putValue(ns("sort"), bif("sort", "create-index", 4, "$id as xs:string, $nodes as node()*, $values as xs:anyAtomicType*, $options as element()?", "item()*"));
        fnMap.putValue(ns("sort"), bif("sort", "create-index-callback", 4, "$id as xs:string, $nodes as node()*, $callback as function, $options as element()?", "item()*"));
        fnMap.putValue(ns("sort"), bif("sort", "has-index", 1, "$id as xs:string", "xs:boolean"));
        fnMap.putValue(ns("sort"), bif("sort", "index", 2, "$id as xs:string, $node as node()?", "xs:long?"));
        fnMap.putValue(ns("sort"), bif("sort", "remove-index", 1, "$id as xs:string", "item()*"));
        fnMap.putValue(ns("sort"), bif("sort", "remove-index", 2, "$id as xs:string, $document-node as node()", "item()*"));
        fnMap.putValue(ns("system"), bif("system", "as-user", 3, "$username as xs:string, $password as xs:string?, $code-block as item()*", "item()*"));
        fnMap.putValue(ns("system"), bif("system", "clear-trace", 0, "", "item()"));
        fnMap.putValue(ns("system"), bif("system", "clear-xquery-cache", 0, "", "empty()"));
        fnMap.putValue(ns("system"), bif("system", "count-instances-active", 0, "", "xs:integer"));
        fnMap.putValue(ns("system"), bif("system", "count-instances-available", 0, "", "xs:integer"));
        fnMap.putValue(ns("system"), bif("system", "count-instances-max", 0, "", "xs:integer"));
        fnMap.putValue(ns("system"), bif("system", "enable-tracing", 1, "$enable as xs:boolean", "item()"));
        fnMap.putValue(ns("system"), bif("system", "enable-tracing", 2, "$enable as xs:boolean, $tracelog as xs:boolean", "item()"));
        fnMap.putValue(ns("system"), bif("system", "export", 3, "$dir-or-file as xs:string, $incremental as xs:boolean?, $zip as xs:boolean?", "node()"));
        fnMap.putValue(ns("system"), bif("system", "export-silently", 3, "$dir-or-file as xs:string, $incremental as xs:boolean?, $zip as xs:boolean?", "xs:boolean"));
        fnMap.putValue(ns("system"), bif("system", "ft-index-lookup", 2, "$nodes as node()*, $string-filter as xs:string?", "node()*"));
        fnMap.putValue(ns("system"), bif("system", "function-available", 2, "$function-name as xs:QName, $arity as xs:integer", "xs:boolean"));
        fnMap.putValue(ns("system"), bif("system", "get-build", 0, "", "xs:string"));
        fnMap.putValue(ns("system"), bif("system", "get-exist-home", 0, "", "xs:string"));
        fnMap.putValue(ns("system"), bif("system", "get-index-statistics", 0, "", "node()?"));
        fnMap.putValue(ns("system"), bif("system", "get-memory-free", 0, "", "xs:long"));
        fnMap.putValue(ns("system"), bif("system", "get-memory-max", 0, "", "xs:long"));
        fnMap.putValue(ns("system"), bif("system", "get-memory-total", 0, "", "xs:long"));
        fnMap.putValue(ns("system"), bif("system", "get-module-load-path", 0, "", "xs:string"));
        fnMap.putValue(ns("system"), bif("system", "get-revision", 0, "", "xs:string"));
        fnMap.putValue(ns("system"), bif("system", "get-running-jobs", 0, "", "item()"));
        fnMap.putValue(ns("system"), bif("system", "get-running-xqueries", 0, "", "item()"));
        fnMap.putValue(ns("system"), bif("system", "get-scheduled-jobs", 0, "", "item()"));
        fnMap.putValue(ns("system"), bif("system", "get-uptime", 0, "", "xs:dayTimeDuration"));
        fnMap.putValue(ns("system"), bif("system", "get-version", 0, "", "xs:string"));
        fnMap.putValue(ns("system"), bif("system", "import", 3, "$dir-or-file as xs:string, $admin-pass as xs:string?, $new-admin-pass as xs:string?", "node()"));
        fnMap.putValue(ns("system"), bif("system", "import-silently", 3, "$dir-or-file as xs:string, $admin-pass as xs:string?, $new-admin-pass as xs:string?", "node()"));
        fnMap.putValue(ns("system"), bif("system", "kill-running-xquery", 1, "$xquery-id as xs:integer", "item()"));
        fnMap.putValue(ns("system"), bif("system", "kill-running-xquery", 2, "$xquery-id as xs:integer, $wait-time as xs:long", "item()"));
        fnMap.putValue(ns("system"), bif("system", "restore", 3, "$dir-or-file as xs:string, $admin-pass as xs:string?, $new-admin-pass as xs:string?", "node()"));
        fnMap.putValue(ns("system"), bif("system", "shutdown", 0, "", "item()"));
        fnMap.putValue(ns("system"), bif("system", "shutdown", 1, "$delay as xs:long", "item()"));
        fnMap.putValue(ns("system"), bif("system", "trace", 0, "", "node()"));
        fnMap.putValue(ns("system"), bif("system", "tracing-enabled", 0, "", "xs:boolean"));
        fnMap.putValue(ns("system"), bif("system", "trigger-system-task", 2, "$java-classname as xs:string, $task-parameters as node()?", "item()"));
        fnMap.putValue(ns("system"), bif("system", "update-statistics", 0, "", "empty()"));
        fnMap.putValue(ns("t"), bif("t", "declare-variable", 1, "$var as element()", "item()?"));
        fnMap.putValue(ns("t"), bif("t", "format-testResult", 1, "$result as item()*", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "init-prolog", 1, "$test as element()", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "normalize", 1, "$nodes as node()*", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "normalize-node", 1, "$node as node()", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "run-test", 2, "$test as element(), $count as xs:integer", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "run-testSet", 2, "$set as element(), $id as xs:string?", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "setup", 1, "$setup as element()?", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "setup-action", 1, "$action as item()*", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "store", 1, "$action as element()", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "store-files", 1, "$action as element()", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "tearDown", 1, "$tearDown as element()?", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "test", 1, "$result as item()*", "item()*"));
        fnMap.putValue(ns("t"), bif("t", "xpath", 2, "$output as item()*, $xpath as element()", "item()*"));
        fnMap.putValue(ns("text"), bif("text", "filter", 2, "$text as xs:string, $regularexpression as xs:string", "xs:string*"));
        fnMap.putValue(ns("text"), bif("text", "filter-nested", 1, "$node-set as node()*", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "fuzzy-index-terms", 1, "$term as xs:string?", "xs:string*"));
        fnMap.putValue(ns("text"), bif("text", "fuzzy-match-all", 2, "$source as node()*, $keyword as xs:string", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "fuzzy-match-any", 2, "$source as node()*, $keyword as xs:string", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "groups", 2, "$text as xs:string, $regularexpression as xs:string", "xs:string*"));
        fnMap.putValue(ns("text"), bif("text", "groups", 3, "$text as xs:string, $regularexpression as xs:string, $flags as xs:string", "xs:string*"));
        fnMap.putValue(ns("text"), bif("text", "groups-regex", 2, "$text as xs:string, $regularexpression as xs:string", "xs:string*"));
        fnMap.putValue(ns("text"), bif("text", "groups-regex", 3, "$text as xs:string, $regularexpression as xs:string, $flags as xs:string", "xs:string*"));
        fnMap.putValue(ns("text"), bif("text", "highlight-matches", 3, "$source as text()*, $callback-function-ref as function, $parameters as item()*", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "index-terms", 4, "$nodes as node()*, $start as xs:string?, $function as function, $returnMax as xs:int", "item()*"));
        fnMap.putValue(ns("text"), bif("text", "index-terms", 5, "$nodes as node()*, $qnames as xs:QName+, $start as xs:string?, $function as function, $returnMax as xs:int", "item()*"));
        fnMap.putValue(ns("text"), bif("text", "kwic-display", 4, "$text as text()*, $width as xs:positiveInteger, $callback-function as function, $parameters as item()*", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "kwic-display", 5, "$text as text()*, $width as xs:positiveInteger, $callback-function as function, $result-callback as function, $parameters as item()*", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "make-token", 1, "$text as xs:string", "xs:string*"));
        fnMap.putValue(ns("text"), bif("text", "match-all", 2, "$source as node()*, $regular-expression as xs:string+", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "match-all", 3, "$source as node()*, $regular-expression as xs:string+, $flag as xs:string", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "match-any", 2, "$source as node()*, $regular-expression as xs:string+", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "match-any", 3, "$source as node()*, $regular-expression as xs:string+, $flag as xs:string", "node()*"));
        fnMap.putValue(ns("text"), bif("text", "match-count", 1, "$source as node()?", "xs:integer"));
        fnMap.putValue(ns("text"), bif("text", "matches-regex", 2, "$input as xs:string*, $pattern as xs:string", "xs:boolean"));
        fnMap.putValue(ns("text"), bif("text", "matches-regex", 3, "$input as xs:string*, $pattern as xs:string, $flags as xs:string", "xs:boolean"));
        fnMap.putValue(ns("text"), bif("text", "text-rank", 1, "$text as node()?", "xs:double"));
        fnMap.putValue(ns("transform"), bif("transform", "stream-transform", 3, "$node-tree as node()*, $stylesheet as item(), $parameters as node()?", "item()"));
        fnMap.putValue(ns("transform"), bif("transform", "stream-transform", 4, "$node-tree as node()*, $stylesheet as item(), $parameters as node()?, $serialization-options as xs:string", "item()"));
        fnMap.putValue(ns("transform"), bif("transform", "transform", 3, "$node-tree as node()*, $stylesheet as item(), $parameters as node()?", "node()?"));
        fnMap.putValue(ns("transform"), bif("transform", "transform", 5, "$node-tree as node()*, $stylesheet as item(), $parameters as node()?, $attributes as node()?, $serialization-options as xs:string?", "node()?"));
        fnMap.putValue(ns("util"), bif("util", "absolute-resource-id", 1, "$node-or-path as item()", "xs:integer?"));
        fnMap.putValue(ns("util"), bif("util", "base-to-integer", 2, "$number as item(), $base as xs:integer", "xs:integer"));
        fnMap.putValue(ns("util"), bif("util", "base64-decode", 1, "$string as xs:string?", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "base64-encode", 1, "$string as xs:string?", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "base64-encode", 2, "$string as xs:string?, $trim as xs:boolean", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "binary-doc", 1, "$binary-resource as xs:string?", "xs:base64Binary?"));
        fnMap.putValue(ns("util"), bif("util", "binary-doc-available", 1, "$binary-resource as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("util"), bif("util", "binary-to-string", 1, "$binary-resource as xs:base64Binary?", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "binary-to-string", 2, "$binary-resource as xs:base64Binary?, $encoding as xs:string", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "call", 2, "$function-reference as function, $parameters as item()*", "item()*"));
        fnMap.putValue(ns("util"), bif("util", "catch", 3, "$java-classnames as xs:string+, $try-code-blocks as item()*, $catch-code-blocks as item()*", "item()*"));
        fnMap.putValue(ns("util"), bif("util", "collations", 0, "", "xs:string*"));
        fnMap.putValue(ns("util"), bif("util", "collection-name", 1, "$node-or-path-string as item()?", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "compile", 1, "$expression as xs:string", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "compile", 2, "$expression as xs:string, $module-load-path as xs:string", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "compile-query", 2, "$expression as xs:string, $module-load-path as xs:string?", "element()"));
        fnMap.putValue(ns("util"), bif("util", "declare-namespace", 2, "$prefix as xs:string, $namespace-uri as xs:anyURI", "item()"));
        fnMap.putValue(ns("util"), bif("util", "declare-option", 2, "$name as xs:string, $option as xs:string", "item()"));
        fnMap.putValue(ns("util"), bif("util", "declared-variables", 1, "$namespace-uri as xs:string", "xs:string+"));
        fnMap.putValue(ns("util"), bif("util", "deep-copy", 1, "$item as item()?", "item()?"));
        fnMap.putValue(ns("util"), bif("util", "describe-function", 1, "$function-name as xs:QName", "node()"));
        fnMap.putValue(ns("util"), bif("util", "disable-profiling", 0, "", "item()"));
        fnMap.putValue(ns("util"), bif("util", "doctype", 1, "$doctype as xs:string+", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "document-id", 1, "$node-or-path as item()", "xs:int?"));
        fnMap.putValue(ns("util"), bif("util", "document-name", 1, "$node-or-path as item()", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "enable-profiling", 1, "$verbosity as xs:int", "item()"));
        fnMap.putValue(ns("util"), bif("util", "eval", 1, "$expression as item()", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "eval", 2, "$expression as item(), $cache-flag as xs:boolean", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "eval", 3, "$expression as item(), $cache-flag as xs:boolean, $external-variable as xs:anyType*", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "eval-async", 1, "$expression as item()", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "eval-inline", 2, "$inline-context as item()*, $expression as item()", "item()*"));
        fnMap.putValue(ns("util"), bif("util", "eval-inline", 3, "$inline-context as item()*, $expression as item(), $cache-flag as xs:boolean", "item()*"));
        fnMap.putValue(ns("util"), bif("util", "eval-with-context", 3, "$expression as item(), $context as node()?, $cache-flag as xs:boolean", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "eval-with-context", 4, "$expression as item(), $context as node()?, $cache-flag as xs:boolean, $eval-context-item as item()?", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "exclusive-lock", 2, "$nodes as node()*, $expression as item()*", "item()*"));
        fnMap.putValue(ns("util"), bif("util", "expand", 1, "$node as node()*", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "expand", 2, "$node as node()*, $serialization-parameters as xs:string", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "function", 2, "$name as xs:QName, $arity as xs:integer", "function"));
        fnMap.putValue(ns("util"), bif("util", "get-fragment-between", 4, "$beginning-node as node()?, $ending-node as node()?, $make-fragment as xs:boolean?, $display-root-namespace as xs:boolean?", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "get-module-description", 1, "$namespace-uri as xs:string", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "get-module-info", 0, "", "element()"));
        fnMap.putValue(ns("util"), bif("util", "get-module-info", 1, "$namespace-uri as xs:string", "element()"));
        fnMap.putValue(ns("util"), bif("util", "get-option", 1, "$name as xs:string", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "get-resource-by-absolute-id", 1, "$absolute-id as xs:integer", "item()?"));
        fnMap.putValue(ns("util"), bif("util", "get-sequence-type", 1, "$sequence-type as xs:anyType*", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "hash", 2, "$message as item(), $algorithm as xs:string", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "hash", 3, "$message as item(), $algorithm as xs:string, $base64flag as xs:boolean", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "import-module", 3, "$module-uri as xs:anyURI, $prefix as xs:string, $location as xs:anyURI", "item()"));
        fnMap.putValue(ns("util"), bif("util", "index-key-documents", 2, "$nodes as node()*, $value as xs:anyAtomicType", "xs:integer?"));
        fnMap.putValue(ns("util"), bif("util", "index-key-documents", 3, "$nodes as node()*, $value as xs:anyAtomicType, $index as xs:string", "xs:integer?"));
        fnMap.putValue(ns("util"), bif("util", "index-key-occurrences", 2, "$nodes as node()*, $value as xs:anyAtomicType", "xs:integer?"));
        fnMap.putValue(ns("util"), bif("util", "index-key-occurrences", 3, "$nodes as node()*, $value as xs:anyAtomicType, $index as xs:string", "xs:integer?"));
        fnMap.putValue(ns("util"), bif("util", "index-keys", 4, "$node-set as node()*, $start-value as xs:anyAtomicType?, $function-reference as function, $max-number-returned as xs:int?", "item()*"));
        fnMap.putValue(ns("util"), bif("util", "index-keys", 5, "$node-set as node()*, $start-value as xs:anyAtomicType?, $function-reference as function, $max-number-returned as xs:int?, $index as xs:string", "item()*"));
        fnMap.putValue(ns("util"), bif("util", "index-keys-by-qname", 5, "$qname as xs:QName*, $start-value as xs:anyAtomicType?, $function-reference as function, $max-number-returned as xs:int?, $index as xs:string", "item()*"));
        fnMap.putValue(ns("util"), bif("util", "index-type", 1, "$set-of-nodes as node()*", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "inspect-function", 1, "$function as function", "node()"));
        fnMap.putValue(ns("util"), bif("util", "int-to-octal", 1, "$int as xs:int", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "integer-to-base", 2, "$number as xs:integer, $base as xs:integer", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "is-binary-doc", 1, "$binary-resource as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("util"), bif("util", "is-module-mapped", 1, "$namespace-uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("util"), bif("util", "is-module-registered", 1, "$namespace-uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("util"), bif("util", "list-functions", 0, "", "function*"));
        fnMap.putValue(ns("util"), bif("util", "list-functions", 1, "$namespace-uri as xs:string", "function*"));
        fnMap.putValue(ns("util"), bif("util", "log", 2, "$priority as xs:string, $message as item()*", "item()"));
        fnMap.putValue(ns("util"), bif("util", "log-app", 3, "$priority as xs:string, $logger-name as xs:string, $message as item()*", "item()"));
        fnMap.putValue(ns("util"), bif("util", "log-system-err", 1, "$message as item()*", "item()"));
        fnMap.putValue(ns("util"), bif("util", "log-system-out", 1, "$message as item()*", "item()"));
        fnMap.putValue(ns("util"), bif("util", "map-module", 2, "$namespace-uri as xs:string, $location-uri as xs:string", "item()"));
        fnMap.putValue(ns("util"), bif("util", "mapped-modules", 0, "", "xs:string+"));
        fnMap.putValue(ns("util"), bif("util", "node-by-id", 2, "$document as node(), $node-id as xs:string", "node()"));
        fnMap.putValue(ns("util"), bif("util", "node-id", 1, "$node as node()", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "node-xpath", 1, "$node as node()", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "octal-to-int", 1, "$octal as xs:string", "xs:int"));
        fnMap.putValue(ns("util"), bif("util", "parse", 1, "$to-be-parsed as xs:string?", "document-node()?"));
        fnMap.putValue(ns("util"), bif("util", "parse-html", 1, "$to-be-parsed as xs:string?", "document-node()?"));
        fnMap.putValue(ns("util"), bif("util", "qname-index-lookup", 2, "$qname as xs:QName, $comparison-value as xs:anyAtomicType", "node()*"));
        fnMap.putValue(ns("util"), bif("util", "random", 0, "", "xs:double"));
        fnMap.putValue(ns("util"), bif("util", "random", 1, "$max as xs:integer", "xs:integer"));
        fnMap.putValue(ns("util"), bif("util", "random-ulong", 0, "", "xs:unsignedLong"));
        fnMap.putValue(ns("util"), bif("util", "registered-functions", 0, "", "xs:string+"));
        fnMap.putValue(ns("util"), bif("util", "registered-functions", 1, "$namespace-uri as xs:string", "xs:string+"));
        fnMap.putValue(ns("util"), bif("util", "registered-modules", 0, "", "xs:string+"));
        fnMap.putValue(ns("util"), bif("util", "serialize", 2, "$node-set as node()*, $parameters as item()*", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "serialize", 3, "$ as node()*, $ as xs:string, $ as xs:string*", "xs:boolean?"));
        fnMap.putValue(ns("util"), bif("util", "shared-lock", 2, "$nodes as node()*, $expression as item()*", "item()*"));
        fnMap.putValue(ns("util"), bif("util", "string-to-binary", 1, "$encoded-string as xs:string?", "xs:base64Binary?"));
        fnMap.putValue(ns("util"), bif("util", "string-to-binary", 2, "$encoded-string as xs:string?, $encoding as xs:string", "xs:base64Binary?"));
        fnMap.putValue(ns("util"), bif("util", "system-date", 0, "", "xs:date"));
        fnMap.putValue(ns("util"), bif("util", "system-dateTime", 0, "", "xs:dateTime"));
        fnMap.putValue(ns("util"), bif("util", "system-property", 1, "$property-name as xs:string", "xs:string?"));
        fnMap.putValue(ns("util"), bif("util", "system-time", 0, "", "xs:time"));
        fnMap.putValue(ns("util"), bif("util", "unescape-uri", 2, "$escaped-string as xs:string, $encoding as xs:string", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "unmap-module", 1, "$namespace-uri as xs:string", "item()"));
        fnMap.putValue(ns("util"), bif("util", "uuid", 0, "", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "uuid", 1, "$name as item()", "xs:string"));
        fnMap.putValue(ns("util"), bif("util", "wait", 1, "$interval as xs:integer", "item()"));
        fnMap.putValue(ns("v"), bif("v", "annotate", 2, "$doc as node(), $rev as xs:integer", "item()*"));
        fnMap.putValue(ns("v"), bif("v", "apply-patch", 2, "$doc as node(), $diffs as element()*", "item()*"));
        fnMap.putValue(ns("v"), bif("v", "diff", 2, "$doc as node(), $rev as xs:integer", "element()?"));
        fnMap.putValue(ns("v"), bif("v", "doc", 2, "$doc as node(), $rev as xs:integer?", "node()*"));
        fnMap.putValue(ns("v"), bif("v", "find-newer-revision", 3, "$doc as node(), $base as xs:integer, $key as xs:string", "element()?"));
        fnMap.putValue(ns("v"), bif("v", "history", 1, "$doc as node()", "element()"));
        fnMap.putValue(ns("v"), bif("v", "revisions", 1, "$doc as node()", "xs:integer*"));
        fnMap.putValue(ns("v"), bif("v", "versions", 1, "$doc as node()", "element()*"));
        fnMap.putValue(ns("validation"), bif("validation", "clear-grammar-cache", 0, "", "xs:integer"));
        fnMap.putValue(ns("validation"), bif("validation", "jaxp", 2, "$instance as item(), $cache-grammars as xs:boolean", "xs:boolean"));
        fnMap.putValue(ns("validation"), bif("validation", "jaxp", 3, "$instance as item(), $cache-grammars as xs:boolean, $catalogs as item()*", "xs:boolean"));
        fnMap.putValue(ns("validation"), bif("validation", "jaxp-parse", 3, "$instance as item(), $enable-grammar-cache as xs:boolean, $catalogs as item()*", "node()"));
        fnMap.putValue(ns("validation"), bif("validation", "jaxp-report", 2, "$instance as item(), $enable-grammar-cache as xs:boolean", "node()"));
        fnMap.putValue(ns("validation"), bif("validation", "jaxp-report", 3, "$instance as item(), $enable-grammar-cache as xs:boolean, $catalogs as item()*", "node()"));
        fnMap.putValue(ns("validation"), bif("validation", "jaxv", 2, "$instance as item(), $grammars as item()+", "xs:boolean"));
        fnMap.putValue(ns("validation"), bif("validation", "jaxv", 3, "$instance as item(), $grammars as item()+, $language as xs:string", "xs:boolean"));
        fnMap.putValue(ns("validation"), bif("validation", "jaxv-report", 2, "$instance as item(), $grammars as item()+", "node()"));
        fnMap.putValue(ns("validation"), bif("validation", "jaxv-report", 3, "$instance as item(), $grammars as item()+, $language as xs:string", "node()"));
        fnMap.putValue(ns("validation"), bif("validation", "jing", 2, "$instance as item(), $grammar as item()", "xs:boolean"));
        fnMap.putValue(ns("validation"), bif("validation", "jing-report", 2, "$instance as item(), $grammar as item()", "node()"));
        fnMap.putValue(ns("validation"), bif("validation", "pre-parse-grammar", 1, "$grammar as xs:anyURI*", "xs:string*"));
        fnMap.putValue(ns("validation"), bif("validation", "show-grammar-cache", 0, "", "node()"));
        fnMap.putValue(ns("validation"), bif("validation", "validate", 1, "$instance as item()", "xs:boolean"));
        fnMap.putValue(ns("validation"), bif("validation", "validate", 2, "$instance as item(), $grammar as xs:anyURI", "node()"));
        fnMap.putValue(ns("validation"), bif("validation", "validate-report", 1, "$instance as item()", "node()"));
        fnMap.putValue(ns("validation"), bif("validation", "validate-report", 2, "$instance as item(), $grammar as item()", "node()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "add-user-to-group", 2, "$user as xs:string, $group as xs:string", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "authenticate", 3, "$collection-uri as xs:string, $user-id as xs:string?, $password as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "change-user", 3, "$user-id as xs:string, $password as xs:string?, $groups as xs:string*", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "change-user", 4, "$user-id as xs:string, $password as xs:string?, $groups as xs:string*, $home-collection as xs:string?", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "chmod-collection", 2, "$collection as xs:string, $mode as xs:integer", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "chmod-resource", 3, "$collection as xs:string, $resource as xs:string, $mode as xs:integer", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "clear-lock", 2, "$collection-uri as xs:string, $resource as xs:string", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "collection-available", 1, "$collection-uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "copy", 2, "$source-collection-uri as xs:string, $target-collection-uri as xs:string", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "copy", 3, "$source-collection-uri as xs:string, $target-collection-uri as xs:string, $resource as xs:string", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "create-collection", 2, "$target-collection-uri as xs:string, $new-collection as xs:string", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "create-group", 1, "$group as xs:string", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "create-group", 2, "$group as xs:string, $group-manager-username as xs:string+", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "create-user", 3, "$user-id as xs:string, $password as xs:string, $groups as xs:string+", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "create-user", 4, "$user-id as xs:string, $password as xs:string, $groups as xs:string+, $home-collection-uri as xs:string?", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "created", 1, "$collection-uri as xs:string", "xs:dateTime"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "created", 2, "$collection-uri as xs:string, $resource as xs:string", "xs:dateTime"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "decode", 1, "$string as xs:string", "xs:string"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "decode-uri", 1, "$uri as xs:anyURI", "xs:string"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "defragment", 1, "$nodes as node()+", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "defragment", 2, "$nodes as node()+, $integer as xs:integer", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "delete-user", 1, "$user-id as xs:string", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "document", 1, "$document-uris as xs:string+", "node()*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "document-has-lock", 2, "$collection-uri as xs:string, $resource as xs:string", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "encode", 1, "$string as xs:string", "xs:string"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "encode-uri", 1, "$string as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "exists-user", 1, "$user-id as xs:string", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "find-last-modified-since", 2, "$node-set as node()*, $since as xs:dateTime", "node()?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-child-collections", 1, "$collection-uri as xs:string", "xs:string*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-child-resources", 1, "$collection-uri as item()", "xs:string*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-current-user", 0, "", "xs:string"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-current-user-attribute", 1, "$name as xs:string", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-current-user-attribute-names", 0, "", "xs:string*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-group", 1, "$collection-uri as xs:string", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-group", 2, "$collection-uri as xs:string, $resource as xs:string", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-mime-type", 1, "$resource-uri as xs:anyURI", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-owner", 1, "$collection-uri as item()", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-owner", 2, "$collection-uri as item(), $resource as xs:string", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-permissions", 1, "$collection-uri as xs:string", "xs:int?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-permissions", 2, "$collection-uri as xs:string, $resource as xs:string", "xs:int?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-user-groups", 1, "$user-id as xs:string", "xs:string+"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-user-home", 1, "$user-id as xs:string", "xs:anyURI?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-user-primary-group", 1, "$user-id as xs:string", "xs:string"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "get-users", 1, "$group-name as xs:string", "xs:string*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "group-exists", 1, "$group as xs:string", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "is-admin-user", 1, "$user-id as xs:string", "xs:boolean?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "is-authenticated", 0, "", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "last-modified", 2, "$collection-uri as item(), $resource as xs:string", "xs:dateTime?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "login", 3, "$collection-uri as xs:string, $user-id as xs:string?, $password as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "login", 4, "$collection-uri as xs:string, $user-id as xs:string?, $password as xs:string?, $create-session as xs:boolean?", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "match-collection", 1, "$regexp as xs:string", "xs:string*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "move", 2, "$source-collection-uri as xs:string, $target-collection-uri as xs:string", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "move", 3, "$source-collection-uri as xs:string, $target-collection-uri as xs:string, $resource as xs:string", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "permissions-to-string", 1, "$permissions as xs:integer", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "register-database", 2, "$driver as xs:string, $create-db as xs:boolean", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "reindex", 1, "$collection-uri as xs:string", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "remove", 1, "$collection-uri as xs:string", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "remove", 2, "$collection-uri as xs:string, $resource as xs:string", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "remove-user-from-group", 2, "$user as xs:string, $group as xs:string", "xs:boolean"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "rename", 2, "$source-collection-uri as xs:string, $new-collection-name as xs:string", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "rename", 3, "$collection-uri as xs:string, $resource as xs:string, $new-resource-name as xs:string", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "set-collection-permissions", 4, "$collection-uri as xs:string, $user-id as xs:string, $group-id as xs:string, $permissions as xs:integer", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "set-mime-type", 2, "$resource-uri as xs:anyURI, $mime-type as xs:string?", "empty()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "set-resource-permissions", 5, "$collection-uri as xs:string, $resource as xs:string, $user-id as xs:string, $group-id as xs:string, $permissions as xs:integer", "item()"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "size", 2, "$collection-uri as xs:string, $resource as xs:string", "xs:long"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "store", 3, "$collection-uri as xs:string, $resource-name as xs:string?, $contents as item()", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "store", 4, "$collection-uri as xs:string, $resource-name as xs:string?, $contents as item(), $mime-type as xs:string", "xs:string?"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "store-files-from-pattern", 3, "$collection-uri as xs:string, $directory as xs:string, $pattern as xs:string+", "xs:string*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "store-files-from-pattern", 4, "$collection-uri as xs:string, $directory as xs:string, $pattern as xs:string+, $mime-type as xs:string?", "xs:string*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "store-files-from-pattern", 5, "$collection-uri as xs:string, $directory as xs:string, $pattern as xs:string+, $mime-type as xs:string?, $preserve-structure as xs:boolean", "xs:string*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "store-files-from-pattern", 6, "$collection-uri as xs:string, $directory as xs:string, $pattern as xs:string+, $mime-type as xs:string?, $preserve-structure as xs:boolean, $exclude as xs:string*", "xs:string*"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "string-to-permissions", 1, "$permissions-string as xs:string", "xs:integer"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "update", 2, "$collection-uri as xs:string, $modifications as node()", "xs:integer"));
        fnMap.putValue(ns("xmldb"), bif("xmldb", "xcollection", 1, "$collection-uris as xs:string+", "node()*"));
        fnMap.putValue(ns("xqdm"), bif("xqdm", "scan", 1, "$uri as xs:anyURI", "node()*"));
        fnMap.putValue(ns("xqdm"), bif("xqdm", "scan", 2, "$data as xs:base64Binary, $name as xs:string", "node()*"));
        fnMap.putValue(ns("xs"), bif("xs", "untyped", 1, "$arg", "xs:untyped"));
        fnMap.putValue(ns("xs"), bif("xs", "untypedAtomic", 1, "$arg", "xs:untypedAtomic"));
        fnMap.putValue(ns("xs"), bif("xs", "dayTimeDuration", 1, "$arg", "xs:dayTimeDuration"));
        fnMap.putValue(ns("xs"), bif("xs", "yearMonthDuration", 1, "$arg", "xs:yearMonthDuration"));
        fnMap.putValue(ns("xs"), bif("xs", "anyURI", 1, "$arg", "xs:anyURI"));
        fnMap.putValue(ns("xs"), bif("xs", "base64Binary", 1, "$arg", "xs:base64Binary"));
        fnMap.putValue(ns("xs"), bif("xs", "boolean", 1, "$arg", "xs:boolean"));
        fnMap.putValue(ns("xs"), bif("xs", "date", 1, "$arg", "xs:date"));
        fnMap.putValue(ns("xs"), bif("xs", "int", 1, "$arg", "xs:int"));
        fnMap.putValue(ns("xs"), bif("xs", "integer", 1, "$arg", "xs:integer"));
        fnMap.putValue(ns("xs"), bif("xs", "short", 1, "$arg", "xs:short"));
        fnMap.putValue(ns("xs"), bif("xs", "long", 1, "$arg", "xs:long"));
        fnMap.putValue(ns("xs"), bif("xs", "dateTime", 1, "$arg", "xs:dateTime"));
        fnMap.putValue(ns("xs"), bif("xs", "dateTimeStamp", 1, "$arg", "xs:dateTimeStamp"));
        fnMap.putValue(ns("xs"), bif("xs", "decimal", 1, "$arg", "xs:decimal"));
        fnMap.putValue(ns("xs"), bif("xs", "double", 1, "$arg", "xs:double"));
        fnMap.putValue(ns("xs"), bif("xs", "duration", 1, "$arg", "xs:duration"));
        fnMap.putValue(ns("xs"), bif("xs", "float", 1, "$arg", "xs:float"));
        fnMap.putValue(ns("xs"), bif("xs", "gDay", 1, "$arg", "xs:gDay"));
        fnMap.putValue(ns("xs"), bif("xs", "gMonth", 1, "$arg", "xs:gMonth"));
        fnMap.putValue(ns("xs"), bif("xs", "gMonthDay", 1, "$arg", "xs:gMonthDay"));
        fnMap.putValue(ns("xs"), bif("xs", "gYear", 1, "$arg", "xs:gYear"));
        fnMap.putValue(ns("xs"), bif("xs", "gYearMonth", 1, "$arg", "gYearMonth"));
        fnMap.putValue(ns("xs"), bif("xs", "hexBinary", 1, "$arg", "xs:hexBinary"));
        fnMap.putValue(ns("xs"), bif("xs", "string", 1, "$arg", "xs:string"));
        fnMap.putValue(ns("xs"), bif("xs", "time", 1, "$arg", "xs:time"));
        fnMap.putValue(ns("xs"), bif("xs", "byte", 1, "$arg", "xs:byte"));
        fnMap.putValue(ns("xs"), bif("xs", "nonPositiveInteger", 1, "$arg", "xs:nonPositiveInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "nonNegativeInteger", 1, "$arg", "xs:nonNegativeInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "negativeInteger", 1, "$arg", "xs:negativeInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "positiveInteger", 1, "$arg", "xs:positiveInteger"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedLong", 1, "$arg", "xs:unsignedLong"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedInt", 1, "$arg", "xs:unsignedInt"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedShort", 1, "$arg", "xs:unsignedShort"));
        fnMap.putValue(ns("xs"), bif("xs", "unsignedByte", 1, "$arg", "xs:unsignedByte"));
        fnMap.putValue(ns("xs"), bif("xs", "normalizedString", 1, "$arg", "xs:normalizedString"));
        fnMap.putValue(ns("xs"), bif("xs", "token", 1, "$arg", "xs:token"));
        fnMap.putValue(ns("xs"), bif("xs", "language", 1, "$arg", "xs:language"));
        fnMap.putValue(ns("xs"), bif("xs", "Name", 1, "$arg", "xs:Name"));
        fnMap.putValue(ns("xs"), bif("xs", "NCName", 1, "$arg", "xs:NCName"));
        fnMap.putValue(ns("xs"), bif("xs", "NMToken", 1, "$arg", "xs:NMToken"));
        fnMap.putValue(ns("xs"), bif("xs", "ID", 1, "$arg", "xs:ID"));
        fnMap.putValue(ns("xs"), bif("xs", "IDREF", 1, "$arg", "xs:IDREF"));
        fnMap.putValue(ns("xs"), bif("xs", "ENTITY", 1, "$arg", "xs:ENTITY"));
        fnMap.putValue(ns("xs"), bif("xs", "IDREFS", 1, "$arg", "xs:IDREFS"));
        fnMap.putValue(ns("xs"), bif("xs", "ENTITIES", 1, "$arg", "xs:ENTITIES"));
        fnMap.putValue(ns("xs"), bif("xs", "NMTOKENS", 1, "$arg", "xs:NMTOKENS"));
        fnMap.putValue(ns("xs"), bif("xs", "NMTOKEN", 1, "$arg", "xs:NMTOKEN"));
        fnMap.putValue(ns("xs"), bif("xs", "QName", 1, "$arg", "xs:QName"));
        fnMap.putValue(ns("xsl"), bif("xsl", "current", 0, "", "item()"));
        fnMap.putValue(ns("xsl"), bif("xsl", "document", 1, "$ as node()*", "node()*"));
        fnMap.putValue(ns("xsl"), bif("xsl", "document", 2, "$ as node()*, $ as node()", "node()*"));
        fnMap.putValue(ns("xsl"), bif("xsl", "format-date", 2, "$date as xs:date?, $picture as xs:string", "xs:string?"));
        fnMap.putValue(ns("xsl"), bif("xsl", "format-date", 5, "$date as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $country as xs:string?", "xs:string?"));
        fnMap.putValue(ns("xsl"), bif("xsl", "format-dateTime", 2, "$date-TIME as xs:dateTime?, $picture as xs:string", "xs:string?"));
        fnMap.putValue(ns("xsl"), bif("xsl", "format-dateTime", 5, "$date-TIME as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $country as xs:string?", "xs:string?"));
        fnMap.putValue(ns("xsl"), bif("xsl", "format-number", 2, "$number as numeric?, $format as xs:string", "xs:string"));
        fnMap.putValue(ns("xsl"), bif("xsl", "format-number", 3, "$number as numeric?, $format as xs:string, $decimalformat as xs:string", "xs:string"));
        fnMap.putValue(ns("xsl"), bif("xsl", "format-time", 2, "$time as xs:time?, $picture as xs:string", "xs:string?"));
        fnMap.putValue(ns("xsl"), bif("xsl", "format-time", 5, "$time as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $country as xs:string?", "xs:string?"));
        fnMap.putValue(ns("xsl"), bif("xsl", "generate-id", 0, "", "item()"));
        fnMap.putValue(ns("xsl"), bif("xsl", "generate-id", 0, "", "item()"));
        fnMap.putValue(ns("xsl"), bif("xsl", "generate-id", 1, "$ as node()?", "item()"));
        fnMap.putValue(ns("xsl"), bif("xsl", "key", 2, "$ as xs:string, $ as xs:anyAtomicType*", "node()*"));
        fnMap.putValue(ns("xsl"), bif("xsl", "key", 3, "$ as xs:string, $ as xs:anyAtomicType*, $ as node()", "node()?"));
        fnMap.putValue(ns("xsl"), bif("xsl", "system-property", 1, "$ as xs:string", "xs:string"));
        fnMap.putValue(ns("xsl"), bif("xsl", "unparsed-entity-public-id", 1, "$ as xs:string", "xs:string"));
        fnMap.putValue(ns("xsl"), bif("xsl", "unparsed-entity-uri", 1, "$ as xs:string", "xs:anyURI"));
        fnMap.putValue(ns("xsl"), bif("xsl", "unparsed-text", 1, "$ as xs:string?", "xs:string?"));
        fnMap.putValue(ns("xsl"), bif("xsl", "unparsed-text", 2, "$ as xs:string?, $ as xs:string", "xs:string?"));
        fnMap.putValue(ns("xsl"), bif("xsl", "unparsed-text-available", 1, "$ as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("xsl"), bif("xsl", "unparsed-text-available", 2, "$ as xs:string?, $ as xs:string?", "xs:boolean"));
        fnMap.putValue(ns("xslfo"), bif("xslfo", "render", 3, "$document as node(), $mime-type as xs:string, $parameters as node()?", "xs:base64Binary?"));
        fnMap.putValue(ns("xslfo"), bif("xslfo", "render", 4, "$document as node(), $mime-type as xs:string, $parameters as node()?, $config-file as node()?", "xs:base64Binary?"));
    }

    @Override
    public PredeclaredNamespaces predeclaredNamespaces() {
        return predeclaredNamespaces;
    }
}
